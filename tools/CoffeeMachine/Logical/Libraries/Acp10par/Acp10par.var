(********************************************************************
 COPYRIGHT (C) BERNECKER + RAINER, AUSTRIA, 5142 EGGELSBERG
 ********************************************************************
 * File: ACP10PAR.VAR (2014-07-04 11:17:14)
 ********************************************************************
 * Constants of library ACP10PAR (V2.45.1)
 ********************************************************************)
VAR CONSTANT
    ACP10PAR_SAFEMC_STATUS            :UINT  := 4;     (* (UDINT) SafeMC: Status *)
    ACP10PAR_SAFEMC_CONTROL           :UINT  := 5;     (* (UDINT) SafeMC: Control *)
    ACP10PAR_SAFEMC_SPEED_ACT         :UINT  := 6;     (* (INT) SafeMC: Actual speed [sUnits/s] *)
    ACP10PAR_SAFEMC_SPEED_LIM         :UINT  := 7;     (* (INT) SafeMC: Speed limit [sUnits/s] *)
    ACP10PAR_BRAKE_STATUS             :UINT  := 8;     (* (UDINT) Motor holding brake: Status *)
    ACP10PAR_R_BLEEDER_EXT            :UINT  := 10;    (* (REAL) Bleeder: External: Resistance [Ohm] *)
    ACP10PAR_TEMP_MAX_BLEEDER_EXT     :UINT  := 11;    (* (REAL) Bleeder: External: Limit temperature [°C] *)
    ACP10PAR_RTH_BLEEDER_AMB_EXT      :UINT  := 12;    (* (REAL) Bleeder: External: Thermal resistance [K/W] *)
    ACP10PAR_CTH_BLEEDER_EXT          :UINT  := 13;    (* (REAL) Bleeder: External: Thermal capacity [Ws/K] *)
    ACP10PAR_BRAKE_TEST_TORQUE        :UINT  := 14;    (* (REAL) Motor holding brake: Test torque [Nm] *)
    ACP10PAR_BRAKE_TEST_POS_LIM       :UINT  := 15;    (* (REAL) Motor holding brake: Position error limit [Rev.] *)
    ACP10PAR_ACOPOS_POWER_RATED       :UINT  := 16;    (* (REAL) Power stage: Rated power [W] *)
    ACP10PAR_ACOPOS_CURR_RATED        :UINT  := 17;    (* (REAL) Power stage: Rated current [A] *)
    ACP10PAR_ACOPOS_CURR_MAX          :UINT  := 18;    (* (REAL) Power stage: Peak current [A] *)
    ACP10PAR_PHASE_MON_PARID          :UINT  := 19;    (* (UINT) Power mains: Parameter ID of the phase failure signal *)
    ACP10PAR_STAT_PHASE_MON           :UINT  := 20;    (* (UDINT) Power mains: Status phase failure *)
    ACP10PAR_ENCOD_REF_DCM_DIFF       :UINT  := 21;    (* (DINT) Encoder1: DCM Distance difference [Lines] *)
    ACP10PAR_ENCOD2_REF_DCM_DIFF      :UINT  := 22;    (* (DINT) Encoder2: DCM Distance difference [Lines] *)
    ACP10PAR_ENCOD3_REF_DCM_DIFF      :UINT  := 23;    (* (DINT) Encoder3: DCM Distance difference [Lines] *)
    ACP10PAR_FFCTRL_KV_TORQUE         :UINT  := 24;    (* (REAL) CTRL Feed forward: Speed torque factor [Nms] *)
    ACP10PAR_PLIM_MODE                :UINT  := 25;    (* (UDINT) Power limiter: Mode *)
    ACP10PAR_MOTOR_TYPE               :UINT  := 30;    (* (UINT) Motor: Type *)
    ACP10PAR_MOTOR_COMPATIBILITY      :UINT  := 31;    (* (UINT) Motor: Software compatibility *)
    ACP10PAR_MOTOR_DATE               :UINT  := 32;    (* (UDINT) Motor: Test date *)
    ACP10PAR_ENCOD_SERIAL_DATA        :UINT  := 33;    (* (DATA) Encoder1: Serial data block *)
    ACP10PAR_ENCOD_SERIAL_STATUS      :UINT  := 34;    (* (UINT) Encoder1: Serial status *)
    ACP10PAR_ENCOD2_SERIAL_DATA       :UINT  := 35;    (* (DATA) Encoder2: Serial data block *)
    ACP10PAR_ENCOD2_SERIAL_STATUS     :UINT  := 36;    (* (UINT) Encoder2: Serial status *)
    ACP10PAR_ENCOD3_SERIAL_DATA       :UINT  := 37;    (* (DATA) Encoder3: Serial data block *)
    ACP10PAR_ENCOD3_SERIAL_STATUS     :UINT  := 38;    (* (UINT) Encoder3: Serial status *)
    ACP10PAR_MOTOR_ORDERTEXT          :UINT  := 40;    (* (STR32) Motor: Order text *)
    ACP10PAR_MOTOR_SERIALNUMBER       :UINT  := 41;    (* (STR16) Motor: Serial number *)
    ACP10PAR_MOTOR_BRAKE_CURR_RATED   :UINT  := 42;    (* (REAL) Motor holding brake: Rated current [A] *)
    ACP10PAR_MOTOR_BRAKE_TORQ_RATED   :UINT  := 43;    (* (REAL) Motor holding brake: Rated torque [Nm] *)
    ACP10PAR_MOTOR_BRAKE_ON_TIME      :UINT  := 44;    (* (REAL) Motor holding brake: Engaging delay [s] *)
    ACP10PAR_MOTOR_BRAKE_OFF_TIME     :UINT  := 45;    (* (REAL) Motor holding brake: Release delay [s] *)
    ACP10PAR_MOTOR_WIND_CONNECT       :UINT  := 46;    (* (USINT) Motor: Winding connection *)
    ACP10PAR_MOTOR_POLEPAIRS          :UINT  := 47;    (* (USINT) Motor: Number of pole-pairs *)
    ACP10PAR_MOTOR_VOLTAGE_RATED      :UINT  := 48;    (* (REAL) Motor: Rated voltage [V] *)
    ACP10PAR_MOTOR_VOLTAGE_CONST      :UINT  := 49;    (* (REAL) Motor: Voltage constant [mVmin] *)
    ACP10PAR_MOTOR_SPEED_RATED        :UINT  := 50;    (* (REAL) Motor: Rated speed [1/min] *)
    ACP10PAR_MOTOR_SPEED_MAX          :UINT  := 51;    (* (REAL) Motor: Maximum speed [1/min] *)
    ACP10PAR_MOTOR_TORQ_STALL         :UINT  := 52;    (* (REAL) Motor: Stall torque [Nm] *)
    ACP10PAR_MOTOR_TORQ_RATED         :UINT  := 53;    (* (REAL) Motor: Rated torque [Nm] *)
    ACP10PAR_MOTOR_TORQ_MAX           :UINT  := 54;    (* (REAL) Motor: Peak torque [Nm] *)
    ACP10PAR_MOTOR_TORQ_CONST         :UINT  := 55;    (* (REAL) Motor: Torque constant [Nm/A] *)
    ACP10PAR_MOTOR_CURR_STALL         :UINT  := 56;    (* (REAL) Motor: Stall current [A] *)
    ACP10PAR_MOTOR_CURR_RATED         :UINT  := 57;    (* (REAL) Motor: Rated current [A] *)
    ACP10PAR_MOTOR_CURR_MAX           :UINT  := 58;    (* (REAL) Motor: Peak current [A] *)
    ACP10PAR_MOTOR_WIND_CROSS_SECT    :UINT  := 59;    (* (REAL) Motor: Line cross section [mm²] *)
    ACP10PAR_MOTOR_STATOR_RESISTANCE  :UINT  := 60;    (* (REAL) Motor: Stator resistance [Ohm] *)
    ACP10PAR_MOTOR_STATOR_INDUCTANCE  :UINT  := 61;    (* (REAL) Motor: Stator inductance [Henry] *)
    ACP10PAR_MOTOR_INERTIA            :UINT  := 62;    (* (REAL) Motor: Moment of inertia [kgm²] *)
    ACP10PAR_MOTOR_COMMUT_OFFSET      :UINT  := 63;    (* (REAL) Motor: Commutation offset [rad] *)
    ACP10PAR_MOTOR_TEMPSENS_PAR1      :UINT  := 64;    (* (REAL) Temperature sensor: Parameter 1 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR2      :UINT  := 65;    (* (REAL) Temperature sensor: Parameter 2 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR3      :UINT  := 66;    (* (REAL) Temperature sensor: Parameter 3 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR4      :UINT  := 67;    (* (REAL) Temperature sensor: Parameter 4 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR5      :UINT  := 68;    (* (REAL) Temperature sensor: Parameter 5 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR6      :UINT  := 69;    (* (REAL) Temperature sensor: Parameter 6 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR7      :UINT  := 70;    (* (REAL) Temperature sensor: Parameter 7 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR8      :UINT  := 71;    (* (REAL) Temperature sensor: Parameter 8 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR9      :UINT  := 72;    (* (REAL) Temperature sensor: Parameter 9 *)
    ACP10PAR_MOTOR_TEMPSENS_PAR10     :UINT  := 73;    (* (REAL) Temperature sensor: Parameter 10 *)
    ACP10PAR_MOTOR_WIND_TEMP_MAX      :UINT  := 74;    (* (REAL) Motor: Limit temperature [°C] *)
    ACP10PAR_MOTOR_THERMAL_CONST      :UINT  := 75;    (* (REAL) Motor: Thermal time constant (for MOTOR_COMPATIBILITY 0x0202) [s] *)
    ACP10PAR_MOTOR_ROTOR_RESISTANCE   :UINT  := 76;    (* (REAL) Motor: Rotor resistance [Ohm] *)
    ACP10PAR_MOTOR_ROTOR_INDUCTANCE   :UINT  := 77;    (* (REAL) Motor: Rotor inductance [Henry] *)
    ACP10PAR_MOTOR_MUTUAL_INDUCTANCE  :UINT  := 78;    (* (REAL) Motor: Mutual inductance [Henry] *)
    ACP10PAR_MOTOR_MAGNETIZING_CURR   :UINT  := 79;    (* (REAL) Motor: Magnetizing current [A] *)
    ACP10PAR_PHASE_MON_IGNORE         :UINT  := 80;    (* (UINT) Power mains: Ignore phase failure *)
    ACP10PAR_CMD_MOTOR_DATA           :UINT  := 81;    (* (UINT) Motor: Command *)
    ACP10PAR_ENCOD_STATUS             :UINT  := 82;    (* (UDINT) Encoder1: Status *)
    ACP10PAR_MOTOR_DATA_STATUS        :UINT  := 84;    (* (UINT) Motor: Dataset status *)
    ACP10PAR_ENCOD2_TYPE              :UINT  := 85;    (* (USINT) Encoder2: Type *)
    ACP10PAR_CMD_BRAKE                :UINT  := 86;    (* (UINT) Motor holding brake: Command *)
    ACP10PAR_FFCTRL_TORQUE_POS        :UINT  := 87;    (* (REAL) CTRL Feed forward: Torque in positive direction [Nm] *)
    ACP10PAR_ENCOD2_STATUS            :UINT  := 88;    (* (UDINT) Encoder2: Status *)
    ACP10PAR_FFCTRL_TORQUE_NEG        :UINT  := 89;    (* (REAL) CTRL Feed forward: Torque in negative direction [Nm] *)
    ACP10PAR_BRAKE_MODE               :UINT  := 90;    (* (UINT) Motor holding brake: Mode *)
    ACP10PAR_ENCOD1_S_ACT             :UINT  := 91;    (* (DINT) Encoder1: Actual position [Units] *)
    ACP10PAR_PCTRL_V_ACT              :UINT  := 92;    (* (REAL) CTRL Position controller: Actual speed [Units/s] *)
    ACP10PAR_CMD_CONTROLLER           :UINT  := 93;    (* (UINT) CTRL Controller: Command *)
    ACP10PAR_STATUS_CYCLIC_S          :UINT  := 94;    (* (DINT) Position for cyclic status [Units] *)
    ACP10PAR_STATUS_CYCLIC_V          :UINT  := 95;    (* (REAL) Speed for cyclic status [Units/s] *)
    ACP10PAR_ENCOD_COUNT_DIR          :UINT  := 96;    (* (USINT) Encoder1: Load scaling: Count direction *)
    ACP10PAR_ENCOD_TYPE               :UINT  := 97;    (* (USINT) Encoder1: Type *)
    ACP10PAR_AXLIM_DS_STOP            :UINT  := 98;    (* (REAL) Limit values: Lag error for stop of a movement [Units] *)
    ACP10PAR_AXLIM_DS_WARNING         :UINT  := 99;    (* (REAL) Limit values: Lag error for display of a warning [Units] *)
    ACP10PAR_POS_CTRL_KV              :UINT  := 100;   (* (REAL) CTRL Position controller: Proportional amplification [1/s] *)
    ACP10PAR_POS_CTRL_TN              :UINT  := 101;   (* (REAL) CTRL Position controller: Integral action time [s] *)
    ACP10PAR_POS_CTRL_T_PREDICT       :UINT  := 102;   (* (REAL) CTRL Position controller: Prediction time [s] *)
    ACP10PAR_POS_CTRL_T_TOTAL         :UINT  := 103;   (* (REAL) CTRL Position controller: Total delay time [s] *)
    ACP10PAR_POS_CTRL_P_MAX           :UINT  := 104;   (* (REAL) CTRL Position controller: Maximum proportional action [Units/s] *)
    ACP10PAR_POS_CTRL_I_MAX           :UINT  := 105;   (* (REAL) CTRL Position controller: Maximum integral action [Units/s] *)
    ACP10PAR_SCALE_LOAD_UNITS         :UINT  := 106;   (* (UDINT) Encoder1: Load scaling: Units per load revolution [Units] *)
    ACP10PAR_SCALE_LOAD_MOTOR_REV     :UINT  := 107;   (* (UDINT) Encoder1: Load scaling: Encoder revolutions per load revolution *)
    ACP10PAR_SCALE_ENCOD_MOTOR_REV    :UINT  := 108;   (* (UDINT) Encoder1: Encoder scaling: motor revolutions *)
    ACP10PAR_SCALE_ENCOD_INCR         :UINT  := 109;   (* (UDINT) Encoder1: Encoder scaling: increments per encoder revolution *)
    ACP10PAR_CMD_SIMULATION           :UINT  := 110;   (* (UINT) Simulation mode: Command *)
    ACP10PAR_PCTRL_S_ACT              :UINT  := 111;   (* (DINT) CTRL Position controller: Actual position [Units] *)
    ACP10PAR_PCTRL_LAG_ERROR          :UINT  := 112;   (* (REAL) CTRL Position controller: Lag error [Units] *)
    ACP10PAR_PCTRL_S_SET              :UINT  := 113;   (* (DINT) CTRL Position controller: Set position [Units] *)
    ACP10PAR_PCTRL_V_SET              :UINT  := 114;   (* (REAL) CTRL Position controller: Set speed [Units/s] *)
    ACP10PAR_CMD_ABS_MOVE             :UINT  := 115;   (* (BASIS_MOVE_S_ABS, BASIS_MOVE_MODE) Basis movements: Start movement with absolute target position *)
    ACP10PAR_OVERRIDE                 :UINT  := 116;   (* (V_OVERRIDE, A_OVERRIDE) Basis movements: Override *)
    ACP10PAR_V_OVERRIDE               :UINT  := 117;   (* (INT) Basis movements: Speed override *)
    ACP10PAR_A_OVERRIDE               :UINT  := 118;   (* (INT) Basis movements: Acceleration override *)
    ACP10PAR_AXLIM_V_POS              :UINT  := 119;   (* (REAL) Limit values: Maximum speed in positive direction [Units/s] *)
    ACP10PAR_AXLIM_V_NEG              :UINT  := 120;   (* (REAL) Limit values: Maximum speed in negative direction [Units/s] *)
    ACP10PAR_AXLIM_A1_POS             :UINT  := 121;   (* (REAL) Limit values: Maximum acceleration in positive direction [Units/s²] *)
    ACP10PAR_AXLIM_A2_POS             :UINT  := 122;   (* (REAL) Limit values: Maximum deceleration in positive direction [Units/s²] *)
    ACP10PAR_AXLIM_A1_NEG             :UINT  := 123;   (* (REAL) Limit values: Maximum acceleration in negative direction [Units/s²] *)
    ACP10PAR_AXLIM_A2_NEG             :UINT  := 124;   (* (REAL) Limit values: Maximum deceleration in negative direction [Units/s²] *)
    ACP10PAR_AXLIM_T_JOLT             :UINT  := 125;   (* (REAL) Limit values: Jolt time [s] *)
    ACP10PAR_AXLIM_POS_SW_END         :UINT  := 126;   (* (DINT) Limit values: Positive SW end position [Units] *)
    ACP10PAR_AXLIM_NEG_SW_END         :UINT  := 127;   (* (DINT) Limit values: Negative SW end position [Units] *)
    ACP10PAR_SGEN_SW_END_IGNORE       :UINT  := 128;   (* (USINT) Limit values: Ignore SW end positions *)
    ACP10PAR_STATUS_TRACE             :UINT  := 129;   (* (USINT) Trace: Status *)
    ACP10PAR_PCTRL_S_ACT_FRAC         :UINT  := 130;   (* (REAL) CTRL Position controller: Actual position fractional part [Units] *)
    ACP10PAR_TRACE_TRIGGER_PARID      :UINT  := 131;   (* (UINT) Trace: Parameter ID for trigger event *)
    ACP10PAR_TRACE_TRIGGER_EVENT      :UINT  := 132;   (* (USINT) Trace: Trigger event *)
    ACP10PAR_TRACE_TRIGGER_THRESHOLD  :UINT  := 133;   (* (REAL) Trace: Trigger threshold *)
    ACP10PAR_TRACE_TRIGGER_WINDOW     :UINT  := 134;   (* (REAL) Trace: Trigger window *)
    ACP10PAR_TRACE_TEST_PARID         :UINT  := 135;   (* (UINT) Trace: Parameter ID for test date *)
    ACP10PAR_TRACE_TEST_TYPE          :UINT  := 136;   (* (USINT) Trace: Data type for test date *)
    ACP10PAR_CMD_TRACE                :UINT  := 137;   (* (UINT) Trace: Command *)
    ACP10PAR_CPU_TICKS_CYCLE_PEAK     :UINT  := 139;   (* (DINT) Diagnosis: Peak value CPU computing time per cycle  *)
    ACP10PAR_TRACE_TEST_INDEX         :UINT  := 140;   (* (UINT) Trace: Index for test date *)
    ACP10PAR_TRACE_T_TRACE            :UINT  := 141;   (* (REAL) Trace: Recording time [s] *)
    ACP10PAR_TRACE_T_SAMPLING         :UINT  := 142;   (* (REAL) Trace: Sampling time [s] *)
    ACP10PAR_TRACE_T_DELAY            :UINT  := 143;   (* (REAL) Trace: Delay time relative to trigger event [s] *)
    ACP10PAR_TRACE_MAX_DATLEN         :UINT  := 144;   (* (UDINT) Trace: Maximum length of data [Byte] *)
    ACP10PAR_AXLIM_T_INPOS            :UINT  := 150;   (* (REAL) Limit values: Waiting time before message 'target position reached' [s] *)
    ACP10PAR_HOMING_TR_S_REL          :UINT  := 151;   (* (REAL) Homing: Reference pulse distance [Rev.] *)
    ACP10PAR_HOMING_S                 :UINT  := 152;   (* (DINT) Homing: Reference position [Units] *)
    ACP10PAR_HOMING_V_SWITCH          :UINT  := 153;   (* (REAL) Homing: Speed for searching the reference switch [Units/s] *)
    ACP10PAR_HOMING_V_TRIGGER         :UINT  := 154;   (* (REAL) Homing: Trigger speed [Units/s] *)
    ACP10PAR_HOMING_A                 :UINT  := 155;   (* (REAL) Homing: Acceleration for homing procedure [Units/s²] *)
    ACP10PAR_HOMING_MODE              :UINT  := 156;   (* (USINT) Homing: Mode *)
    ACP10PAR_HOMING_MODE_BITS         :UINT  := 157;   (* (USINT) Homing: Mode control bits *)
    ACP10PAR_HOMING_TR_S_BLOCK        :UINT  := 158;   (* (REAL) Homing: Distance for blocking the reference pulse [Rev.] *)
    ACP10PAR_BASIS_MOVE_S_ABS         :UINT  := 159;   (* (DINT) Basis movements: Target position [Units] *)
    ACP10PAR_BASIS_MOVE_S_REL         :UINT  := 160;   (* (DINT) Basis movements: Relative move distance [Units] *)
    ACP10PAR_BASIS_MOVE_V_POS         :UINT  := 161;   (* (REAL) Basis movements: Speed in positive direction [Units/s] *)
    ACP10PAR_BASIS_MOVE_V_NEG         :UINT  := 162;   (* (REAL) Basis movements: Speed in negative direction [Units/s] *)
    ACP10PAR_BASIS_MOVE_A1_POS        :UINT  := 163;   (* (REAL) Basis movements: Acceleration in positive direction [Units/s²] *)
    ACP10PAR_BASIS_MOVE_A2_POS        :UINT  := 164;   (* (REAL) Basis movements: Deceleration in positive direction [Units/s²] *)
    ACP10PAR_BASIS_MOVE_A1_NEG        :UINT  := 165;   (* (REAL) Basis movements: Acceleration in negative direction [Units/s²] *)
    ACP10PAR_BASIS_MOVE_A2_NEG        :UINT  := 166;   (* (REAL) Basis movements: Deceleration in negative direction [Units/s²] *)
    ACP10PAR_CMD_HOMING               :UINT  := 167;   (* (HOMING_S, HOMING_MODE, HOMING_MODE_BITS) Homing: Command start homing procedure *)
    ACP10PAR_CMD_REL_MOVE             :UINT  := 168;   (* (BASIS_MOVE_S_REL, BASIS_MOVE_MODE) Basis movements: Start movement with relative move distance *)
    ACP10PAR_CMD_POS_MOVE             :UINT  := 169;   (* (BASIS_MOVE_V_POS, BASIS_MOVE_MODE) Basis movements: Start movement in positive direction *)
    ACP10PAR_CMD_NEG_MOVE             :UINT  := 170;   (* (BASIS_MOVE_V_NEG, BASIS_MOVE_MODE) Basis movements: Start movement in negative direction *)
    ACP10PAR_STOP_CMD_CONF_INDEX      :UINT  := 171;   (* (USINT) Movement stop: Index of parameter record for the stop command *)
    ACP10PAR_HOMING_OFFSET            :UINT  := 172;   (* (DINT) Homing: Offset [Units] *)
    ACP10PAR_STOP_CONF_INDEX          :UINT  := 173;   (* (USINT) Movement stop: Index of parameter record for stop configuration *)
    ACP10PAR_STOP_CONF_DECEL_RAMP     :UINT  := 174;   (* (USINT) Movement stop: Deceleration ramp *)
    ACP10PAR_STOP_CONF_CTRL_STATE     :UINT  := 175;   (* (USINT) Movement stop: Controller state after movement stop *)
    ACP10PAR_CMD_MOVEMENT_STOP        :UINT  := 176;   (* (STOP_CMD_CONF_INDEX) Movement stop: Command stop movement *)
    ACP10PAR_STATUS_BITS              :UINT  := 178;   (* (UDINT) Status: General bits *)
    ACP10PAR_STATUS_CYCLIC_BITS       :UINT  := 179;   (* (UDINT) Status: Cyclic bits *)
    ACP10PAR_ERROR_NUMBER             :UINT  := 180;   (* (UINT) Messages: Error number *)
    ACP10PAR_ERROR_INFO               :UINT  := 181;   (* (DINT) Messages: Additional error info *)
    ACP10PAR_ERROR_TIME               :UINT  := 182;   (* (UDINT) Error Time [us] *)
    ACP10PAR_ERROR_REC                :UINT  := 183;   (* (ERROR_NUMBER, ERROR_INFO) Messages: Error record from drive *)
    ACP10PAR_DIG_IN_FORCE_ENABLE      :UINT  := 184;   (* (USINT) Digital inputs: Force enable bits *)
    ACP10PAR_CMD_DIG_IN_FORCE         :UINT  := 185;   (* (USINT) Digital inputs: Force function *)
    ACP10PAR_DIG_IN_ACTIVE_LEVEL      :UINT  := 186;   (* (USINT) Digital inputs: Active level bits *)
    ACP10PAR_NETWORK_LIVE_CTRL        :UINT  := 189;   (* (UDINT) Time for network live sign control [us] *)
    ACP10PAR_CMD_CYC_SET_VALUE_MODE   :UINT  := 190;   (* (UINT) Mode for cyclic external set values *)
    ACP10PAR_CMD_BASIS_MOVE_HALT      :UINT  := 191;   (* (NIL) Basis movements: Halt *)
    ACP10PAR_CYC_MASTER_SET_POS       :UINT  := 192;   (* (DINT) Cyclic set position [Units] *)
    ACP10PAR_AUT_PAR_RESET            :UINT  := 194;   (* (USINT) Cam automat: Reset parameter *)
    ACP10PAR_AUT_PAR_RESET_VAX1       :UINT  := 195;   (* (USINT) VAX Cam automat: Reset parameter *)
    ACP10PAR_STOP_ERR_DECEL_RAMP      :UINT  := 197;   (* (USINT) Movement stop: Deceleration ramp after drive error *)
    ACP10PAR_CYCLIC_TODRV_T_CTRL      :UINT  := 198;   (* (DINT) Cyclic communication: Time for life sign monitoring of data to drive [us] *)
    ACP10PAR_TRIGGER_STOP_MODE        :UINT  := 199;   (* (USINT) Trigger stop mode *)
    ACP10PAR_ENCOD_POLEPAIRS          :UINT  := 203;   (* (USINT) Encoder1: Resolver polepairs per encoder revolution *)
    ACP10PAR_ENCOD2_POLEPAIRS         :UINT  := 204;   (* (USINT) Encoder2: Resolver polepairs per encoder revolution *)
    ACP10PAR_CYCLIC_TODRV_PARID       :UINT  := 207;   (* (UINT) Cyclic communication: Parameter ID of data to drive *)
    ACP10PAR_CYCLIC_TODRV_OFFSET      :UINT  := 208;   (* (UINT) Cyclic communication: Offset of data to drive *)
    ACP10PAR_VCTRL_I1                 :UINT  := 209;   (* (REAL) Power stage: Phase 1: Current  [A] *)
    ACP10PAR_VCTRL_I2                 :UINT  := 210;   (* (REAL) Power stage: Phase 2: Current  [A] *)
    ACP10PAR_BRAKE_CTRL_MON_FILTER    :UINT  := 211;   (* (REAL) Motor holding brake: Control monitoring filter time  [s] *)
    ACP10PAR_ENCOD_DIAG1              :UINT  := 212;   (* (REAL) Encoder1: Diagnosis 1 *)
    ACP10PAR_ICTRL_ISQ_REF            :UINT  := 213;   (* (REAL) CTRL Current controller: Set stator current quadrature component [A] *)
    ACP10PAR_ICTRL_ISQ_ACT            :UINT  := 214;   (* (REAL) CTRL Current controller: Actual stator current quadrature component [A] *)
    ACP10PAR_ICTRL_USQ_REF            :UINT  := 216;   (* (REAL) CTRL Current controller: Stator voltage quadrature component [V] *)
    ACP10PAR_ICTRL_ISD_REF            :UINT  := 218;   (* (REAL) CTRL Current controller: Set stator current direct component [A] *)
    ACP10PAR_ICTRL_ISD_ACT            :UINT  := 219;   (* (REAL) CTRL Current controller: Actual stator current direct component [A] *)
    ACP10PAR_ICTRL_USD_REF            :UINT  := 221;   (* (REAL) CTRL Current controller: Stator voltage direct component [V] *)
    ACP10PAR_ICTRL_KV                 :UINT  := 223;   (* (REAL) CTRL Current controller: Proportional amplification factor [V/A] *)
    ACP10PAR_ICTRL_TI                 :UINT  := 225;   (* (REAL) CTRL Current controller: Integral action time [s] *)
    ACP10PAR_SCTRL_FILTER_F0          :UINT  := 226;   (* (REAL) CTRL Speed controller: Notchfilter frequence [1/s] *)
    ACP10PAR_SCTRL_FILTER_B           :UINT  := 227;   (* (REAL) CTRL Speed controller: Notchfilter bandwidth [1/s] *)
    ACP10PAR_PCTRL_LAG2_ERROR         :UINT  := 228;   (* (REAL) CTRL Two encoder control: Positions difference [Units] *)
    ACP10PAR_AXLIM_DS_STOP2           :UINT  := 229;   (* (REAL) CTRL Two encoder control: Positions difference limit for stop of a movement [Units] *)
    ACP10PAR_PCTRL_S_ACT_PARID        :UINT  := 230;   (* (UINT) CTRL Position controller: Actual encoder position parameter ID *)
    ACP10PAR_PCTRL_ENABLE_PARID       :UINT  := 231;   (* (UINT) CTRL Position controller: Parameter ID enable input *)
    ACP10PAR_CYCLIC_TODRV_PAR_INDEX   :UINT  := 232;   (* (USINT) Cyclic communication: Parameter index of data to drive *)
    ACP10PAR_CYCLIC_TODRV_TEL_INDEX   :UINT  := 233;   (* (USINT) Cyclic communication: Telegram index of data to drive *)
    ACP10PAR_CYCLIC_FRDRV_REC_INDEX   :UINT  := 234;   (* (USINT) Cyclic communication: Index of parameter record for data from drive *)
    ACP10PAR_CYCLIC_FRDRV_PAR_INDEX   :UINT  := 235;   (* (USINT) Cyclic communication: Parameter index of data from drive *)
    ACP10PAR_CYCLIC_FRDRV_PARID       :UINT  := 236;   (* (UINT) Cyclic communication: Parameter ID of data from drive *)
    ACP10PAR_ENCOD_SSI_ZERO_BITS      :UINT  := 237;   (* (USINT) Encoder1: SSI Number of leading zeros *)
    ACP10PAR_ENCOD_SSI_BITS           :UINT  := 238;   (* (USINT) Encoder1: SSI Number of data bits *)
    ACP10PAR_ENCOD_SSI_CODE           :UINT  := 239;   (* (USINT) Encoder1: SSI, Data code *)
    ACP10PAR_ENCOD_SSI_PARITY_CHK     :UINT  := 240;   (* (USINT) Encoder1: SSI Parity check *)
    ACP10PAR_ENCOD2_SSI_ZERO_BITS     :UINT  := 241;   (* (USINT) Encoder2: SSI Number of leading zeros *)
    ACP10PAR_ENCOD2_SSI_BITS          :UINT  := 242;   (* (USINT) Encoder2: SSI Number of data bits *)
    ACP10PAR_ENCOD2_SSI_CODE          :UINT  := 243;   (* (USINT) Encoder2: SSI Data code *)
    ACP10PAR_ENCOD2_SSI_PARITY_CHK    :UINT  := 244;   (* (USINT) Encoder2: SSI Parity check *)
    ACP10PAR_ENCOD_POS_ACT            :UINT  := 245;   (* (DINT) Encoder1: Actual position per revolution [Incr] *)
    ACP10PAR_ENCOD2_POS_ACT           :UINT  := 246;   (* (DINT) Encoder2: Actual position per revolution [Incr] *)
    ACP10PAR_ICTRL_ADD_TRQ            :UINT  := 247;   (* (REAL) CTRL Current controller: Additive torque [Nm] *)
    ACP10PAR_LIM_T1_POS               :UINT  := 248;   (* (REAL) CTRL Torque limiter: Maximum acceleration torque in positive direction [Nm] *)
    ACP10PAR_LIM_T1_NEG               :UINT  := 249;   (* (REAL) CTRL Torque limiter: Maximum acceleration torque in negative direction [Nm] *)
    ACP10PAR_SCTRL_SPEED_REF          :UINT  := 250;   (* (REAL) CTRL Speed controller: Set speed [1/s] *)
    ACP10PAR_SCTRL_SPEED_ACT          :UINT  := 251;   (* (REAL) CTRL Speed controller: Actual speed [1/s] *)
    ACP10PAR_SCTRL_KV                 :UINT  := 253;   (* (REAL) CTRL Speed controller: Proportional amplification [As] *)
    ACP10PAR_SCTRL_TN                 :UINT  := 255;   (* (REAL) CTRL Speed controller: Integral action time [s] *)
    ACP10PAR_SCTRL_ISQ_REF            :UINT  := 256;   (* (REAL) CTRL Speed controller: Manipulated variable [A] *)
    ACP10PAR_FCTRL_IM_REF             :UINT  := 257;   (* (REAL) CTRL Flux: Set magnetizing current [A] *)
    ACP10PAR_FCTRL_IM_ACT             :UINT  := 258;   (* (REAL) CTRL Flux: Actual magnetizing current [A] *)
    ACP10PAR_FCTRL_KV                 :UINT  := 259;   (* (REAL) CTRL Flux: Proportional amplification factor *)
    ACP10PAR_FCTRL_TN                 :UINT  := 260;   (* (REAL) CTRL Flux: Integral action time [s] *)
    ACP10PAR_UCTRL_ISQ_ADD_PARID      :UINT  := 261;   (* (UINT) CTRL DC bus: Parameter ID additive active current *)
    ACP10PAR_POWER_SUPPLY_MODE        :UINT  := 262;   (* (UINT) Power mains: Mode *)
    ACP10PAR_PHASING_CURR             :UINT  := 275;   (* (REAL) Motor: Phasing: Current [A] *)
    ACP10PAR_PHASING_MODE             :UINT  := 276;   (* (UINT) Motor: Phasing: Mode *)
    ACP10PAR_TORQUE_ACT               :UINT  := 277;   (* (REAL) Motor: Torque [Nm] *)
    ACP10PAR_POWER_ACT                :UINT  := 278;   (* (REAL) Motor: Power [W] *)
    ACP10PAR_ENCOD_RATIO_MOTOR_REV    :UINT  := 280;   (* (UDINT) Encoder1: Gear ratio motor revolutions *)
    ACP10PAR_FFCTRL_ISQ               :UINT  := 281;   (* (REAL) CTRL Feed forward: Set stator current [A] *)
    ACP10PAR_FFCTRL_TORQ_LOAD_PARID   :UINT  := 282;   (* (UINT) CTRL Feed forward: Parameter ID load torque *)
    ACP10PAR_SCTRL_TI_FIL             :UINT  := 283;   (* (REAL) CTRL Speed controller: Filter time constant [s] *)
    ACP10PAR_ENCOD3_POLEPAIRS         :UINT  := 284;   (* (USINT) Encoder3: Resolver polepairs per encoder revolution *)
    ACP10PAR_FFCTRL_INERTIA_PARID     :UINT  := 285;   (* (UINT) CTRL Feed forward: Parameter ID mass moment of inertia *)
    ACP10PAR_ENCOD_OUT_PARID          :UINT  := 286;   (* (UINT) Encoder1: Emulation: Output parameter ID *)
    ACP10PAR_STAT_BRAKE_CIRCUIT       :UINT  := 287;   (* (UDINT) Motor holding brake: Electrical state *)
    ACP10PAR_SCTRL_ADD_SET_PARID      :UINT  := 288;   (* (UINT) CTRL Speed controller: Parameter ID additive set value *)
    ACP10PAR_SCALE_ENCOD2_INCR        :UINT  := 289;   (* (UDINT) Encoder2: Encoder scaling: Increments per encoder revolution *)
    ACP10PAR_BRC_CANID_DRV_SYNC       :UINT  := 290;   (* (UINT) Broadcast CAN ID for SYNC telegram *)
    ACP10PAR_BRC_CANID_BRC_CMD        :UINT  := 291;   (* (UINT) Broadcast CAN ID for broadcast command *)
    ACP10PAR_CONST_I4_ZERO            :UINT  := 292;   (* (DINT) Function block: Constant zero *)
    ACP10PAR_BASIS_CANID_USCYC_TODRV  :UINT  := 293;   (* (UINT) Basis CAN ID for cyclic user telegram to the drive *)
    ACP10PAR_BASIS_CANID_USCYC_FRDRV  :UINT  := 294;   (* (UINT) Basis CAN ID for cyclic user telegram from the drive *)
    ACP10PAR_BASIS_CANID_WR_RD_2      :UINT  := 295;   (* (UINT) Basis CAN ID for write and read channel2 *)
    ACP10PAR_BASIS_CANID_WR_RD_3      :UINT  := 296;   (* (UINT) Basis CAN ID for write and read channel3 *)
    ACP10PAR_CMD_CANID_ACOPOS_STD     :UINT  := 297;   (* (NIL) Command: CAN ID standard setting *)
    ACP10PAR_UDC_ACT                  :UINT  := 298;   (* (REAL) CTRL DC bus: Voltage [V] *)
    ACP10PAR_UDC_CTRL_TI_FIL          :UINT  := 299;   (* (REAL) CTRL DC bus: Filter time constant [s] *)
    ACP10PAR_UDC_DETECTION            :UINT  := 300;   (* (REAL) CTRL DC bus: Voltage detection: Lower limit [V] *)
    ACP10PAR_FFCTRL_INERTIA           :UINT  := 301;   (* (REAL) CTRL Feed forward: Mass moment of inertia [kgm²] *)
    ACP10PAR_UDC_FILTER               :UINT  := 302;   (* (REAL) CTRL DC bus: Filtered voltage [V] *)
    ACP10PAR_ENCOD_ADC1               :UINT  := 303;   (* (REAL) Encoder1: ADC1 value *)
    ACP10PAR_SAFEMC_POS_ACT           :UINT  := 309;   (* (DINT) SafeMC: Actual position [Units] *)
    ACP10PAR_CONST_I4_ONE             :UINT  := 310;   (* (DINT) Function block: Constant one *)
    ACP10PAR_ENABLE_CONFIG            :UINT  := 311;   (* (UDINT) ENABLE: Configuration *)
    ACP10PAR_FCTRL_IM_LIM_MAX         :UINT  := 312;   (* (REAL) CTRL Flux:  Magnetizing current limiter: Upper limit [A] *)
    ACP10PAR_SCTRL_SPEED_MON_LIM      :UINT  := 313;   (* (REAL) CTRL Speed controller: Monitoring: Speed limit [1/s] *)
    ACP10PAR_CHP_DUTY_CYCLE_MIN       :UINT  := 314;   (* (REAL) CTRL Chopper: Minimum pwm duty cycle *)
    ACP10PAR_JUNCTION_POWER_LOSS      :UINT  := 315;   (* (REAL) Power stage: Junction temperature model: Power loss [W] *)
    ACP10PAR_BRAKE_TEST_POS_DELTA     :UINT  := 323;   (* (REAL) Motor holding brake: Maximal position error [Rev.] *)
    ACP10PAR_ICTRL_ADD_SET_PARID      :UINT  := 325;   (* (UINT) CTRL Current controller: Additive set value parameter ID *)
    ACP10PAR_CONTROLLER_MODE          :UINT  := 328;   (* (USINT) CTRL Controller: Mode *)
    ACP10PAR_SCTRL_V_SET_UNITS        :UINT  := 329;   (* (REAL) CTRL Speed controller: Set speed [Units/s] *)
    ACP10PAR_CMD_PHASING              :UINT  := 334;   (* (UINT) Motor: Phasing: Command *)
    ACP10PAR_ENCOD_ERROR_STATE        :UINT  := 336;   (* (USINT) Encoder1: Error state *)
    ACP10PAR_ENCOD2_ERROR_STATE       :UINT  := 337;   (* (USINT) Encoder2: Error state *)
    ACP10PAR_ENCOD3_ERROR_STATE       :UINT  := 338;   (* (USINT) Encoder3: Error state *)
    ACP10PAR_SCTRL_V_SET_SCALE        :UINT  := 339;   (* (INT) CTRL Speed controller: Standardized set speed *)
    ACP10PAR_CMD_ERR_STATE_INTO_FIFO  :UINT  := 340;   (* (NIL) Messages: Command write error state into error FIFO *)
    ACP10PAR_SCTRL_K_V_SET_SCALE      :UINT  := 341;   (* (REAL) CTRL Speed controller: Factor for standardized set speed *)
    ACP10PAR_LOAD_MOTOR_MODEL         :UINT  := 342;   (* (REAL) Motor: Temperature model: Load [%] *)
    ACP10PAR_LIM_T_OVR_GRP            :UINT  := 343;   (* (LIM_T1_POS_OVR, LIM_T1_NEG_OVR, LIM_T2_POS_OVR, LIM_T2_NEG_OVR) CTRL Torque limiter: Override *)
    ACP10PAR_LIM_T1_POS_OVR           :UINT  := 344;   (* (USINT) CTRL Torque limiter: LIM_T1_POS override [%] *)
    ACP10PAR_UDC_BLEEDER_ON           :UINT  := 345;   (* (REAL) CTRL DC bus: Limiter: Switch on threshold [V] *)
    ACP10PAR_LIM_T1_NEG_OVR           :UINT  := 346;   (* (USINT) CTRL Torque limiter: LIM_T1_NEG override [%] *)
    ACP10PAR_F_SWITCH                 :UINT  := 347;   (* (REAL) Power stage: Switch frequency [cps] *)
    ACP10PAR_LIM_T2_POS               :UINT  := 348;   (* (REAL) CTRL Torque limiter: Maximum deceleration torque in positive direction [Nm] *)
    ACP10PAR_LIM_T2_NEG               :UINT  := 349;   (* (REAL) CTRL Torque limiter: Maximum deceleration torque in negative direction [Nm] *)
    ACP10PAR_RHO                      :UINT  := 350;   (* (REAL) Rotor flux angle [rad] *)
    ACP10PAR_ERRESP_UDC_POWERFAIL     :UINT  := 351;   (* (UDINT) Power mains: Error response *)
    ACP10PAR_LOAD_MOTOR_MODEL_MAX     :UINT  := 352;   (* (REAL) Motor: Temperature model: Maximum load [%] *)
    ACP10PAR_SYS_TIME                 :UINT  := 355;   (* (UDINT) Drive synchronisation: Total time [us] *)
    ACP10PAR_SYNC_MASTERDRIVE         :UINT  := 356;   (* (BOOL) Drive synchronisation: Master *)
    ACP10PAR_SYNC_MASTERPERIOD        :UINT  := 357;   (* (UDINT) Drive synchronisation: Master cycle time [us] *)
    ACP10PAR_DIO_STATE                :UINT  := 358;   (* (UDINT) Digital IO: Status *)
    ACP10PAR_SYNC_SYS_TIME_DIFF       :UINT  := 359;   (* (DINT) Drive synchronisation: Deviation from master time *)
    ACP10PAR_DIO_CONFIG               :UINT  := 360;   (* (UDINT) Digital IO: Configuration *)
    ACP10PAR_CMD_DO_SET               :UINT  := 361;   (* (UDINT) Command: Digital output set *)
    ACP10PAR_CMD_DO_CLR               :UINT  := 362;   (* (UDINT) Command: Digital output clear *)
    ACP10PAR_SYNC_MSG_PERIOD          :UINT  := 363;   (* (UDINT) Period of sync telegram [us] *)
    ACP10PAR_TEMP_HEATSINK_ANA        :UINT  := 365;   (* (INT) Power stage: Heatsink temperature sensor: AD-converter value *)
    ACP10PAR_TEMP_MOTOR_ANA           :UINT  := 366;   (* (INT) Temperature sensor: AD-converter value *)
    ACP10PAR_STAT_UDC_POWERFAIL       :UINT  := 367;   (* (UDINT) Power mains: Status *)
    ACP10PAR_UVLIM_MODE               :UINT  := 368;   (* (UDINT) CTRL DC bus: Limiter: Mode *)
    ACP10PAR_ENCOD_REF_PULSE_STATUS   :UINT  := 369;   (* (USINT) Encoder1: INC Reference pulse state *)
    ACP10PAR_ENCOD2_REF_PULSE_STATUS  :UINT  := 370;   (* (USINT) Encoder2: INC Reference pulse state *)
    ACP10PAR_ENCOD3_REF_PULSE_STATUS  :UINT  := 371;   (* (USINT) Encoder3: INC Reference pulse state *)
    ACP10PAR_ENCOD_RATIO_ENCOD_REV    :UINT  := 372;   (* (UDINT) Encoder1: Gear ratio encoder revolutions *)
    ACP10PAR_TEMP_MOTOR_MODEL_MODE    :UINT  := 373;   (* (UINT) Motor: Temperature model: Mode *)
    ACP10PAR_LIM_T2_POS_OVR           :UINT  := 374;   (* (USINT) CTRL Torque limiter: LIM_T2_POS override [%] *)
    ACP10PAR_LIM_T2_NEG_OVR           :UINT  := 375;   (* (USINT) CTRL Torque limiter: LIM_T2_NEG override [%] *)
    ACP10PAR_LOAD_CONT_CURR           :UINT  := 377;   (* (REAL) Power stage: Continuous current: Load [%] *)
    ACP10PAR_LOAD_CONT_CURR_MAX       :UINT  := 378;   (* (REAL) Power stage: Continuous current: Maximum load [%] *)
    ACP10PAR_LOAD_PEAK_CURR           :UINT  := 379;   (* (REAL) Power stage: Peak current: Load [%] *)
    ACP10PAR_TEMP_HEATSINK            :UINT  := 380;   (* (REAL) Power stage: Heatsink temperature sensor: Temperature [°C] *)
    ACP10PAR_TEMP_MOTOR               :UINT  := 381;   (* (REAL) Temperature sensor: Temperature [°C] *)
    ACP10PAR_TEMP_JUNCTION            :UINT  := 382;   (* (REAL) Power stage: Junction temperature model: Temperature [°C] *)
    ACP10PAR_TEMP_BLEEDER             :UINT  := 383;   (* (REAL) Bleeder: Temperature model: Temperature [°C] *)
    ACP10PAR_TEMP_HEATSINK_MAX        :UINT  := 384;   (* (REAL) Power stage: Heatsink temperature sensor: Maximum temperature [°C] *)
    ACP10PAR_TEMP_MOTOR_MAX           :UINT  := 385;   (* (REAL) Temperature sensor: Maximum temperature [°C] *)
    ACP10PAR_TEMP_JUNCTION_MAX        :UINT  := 386;   (* (REAL) Power stage: Junction temperature model: Maximum temperature [°C] *)
    ACP10PAR_TEMP_BLEEDER_MAX         :UINT  := 387;   (* (REAL) Bleeder: Temperature model: Maximum temperature [°C] *)
    ACP10PAR_LOAD_PEAK_CURR_MAX       :UINT  := 388;   (* (REAL) Power stage: peak current: Maximum load [%] *)
    ACP10PAR_EPROM_SERIAL_ID_TEXT     :UINT  := 389;   (* (STR16) FB EPROM: Serial-ID *)
    ACP10PAR_UDC_NOMINAL              :UINT  := 390;   (* (REAL) CTRL DC bus: Nominal voltage [V] *)
    ACP10PAR_TPRED_MODE               :UINT  := 391;   (* (USINT) Temperature prediction: Mode *)
    ACP10PAR_TPRED_TRIG_PARID         :UINT  := 392;   (* (UINT) Temperature prediction: Trigger Parameter-ID *)
    ACP10PAR_TEMP_MOTOR_MODELL        :UINT  := 393;   (* (REAL) Motor: Temperature model: Temperature [°C] *)
    ACP10PAR_TEMP_MOTOR_MODELL_MAX    :UINT  := 394;   (* (REAL) Motor: Temperature model: Maximum temperature [°C] *)
    ACP10PAR_STAT_LOAD_RELAY          :UINT  := 395;   (* (UDINT) Power mains: Status main relay *)
    ACP10PAR_BLEEDER_SELECTOR_EXT     :UINT  := 398;   (* (USINT) Bleeder: Selector *)
    ACP10PAR_CMD_ABS_MOVE_VAX1        :UINT  := 400;   (* (BASIS_MOVE_S_ABS_VAX1) VAX Basis movements: Start movement with absolute target position *)
    ACP10PAR_CMD_REL_MOVE_VAX1        :UINT  := 401;   (* (BASIS_MOVE_S_REL_VAX1) VAX Basis movements: Start movement with relative move distance *)
    ACP10PAR_CMD_POS_MOVE_VAX1        :UINT  := 402;   (* (BASIS_MOVE_V_POS_VAX1) VAX Basis movements: Start movement in positive direction *)
    ACP10PAR_CMD_NEG_MOVE_VAX1        :UINT  := 403;   (* (BASIS_MOVE_V_NEG_VAX1) VAX Basis movements: Start movement in negative direction *)
    ACP10PAR_BASIS_MOVE_V_POS_VAX1    :UINT  := 404;   (* (REAL) VAX Basis movements: Speed in positive direction [Units/s] *)
    ACP10PAR_BASIS_MOVE_V_NEG_VAX1    :UINT  := 405;   (* (REAL) VAX Basis movements: Speed in negative direction [Units/s] *)
    ACP10PAR_BASIS_MOVE_A1_POS_VAX1   :UINT  := 406;   (* (REAL) VAX Basis movements: Acceleration in positive direction [Units/s²] *)
    ACP10PAR_BASIS_MOVE_A2_POS_VAX1   :UINT  := 407;   (* (REAL) VAX Basis movements: Deceleration in positive direction [Units/s²] *)
    ACP10PAR_BASIS_MOVE_A1_NEG_VAX1   :UINT  := 408;   (* (REAL) VAX Basis movements: Acceleration in negative direction [Units/s²] *)
    ACP10PAR_BASIS_MOVE_A2_NEG_VAX1   :UINT  := 409;   (* (REAL) VAX Basis movements: Deceleration in negative direction [Units/s²] *)
    ACP10PAR_BASIS_MOVE_S_ABS_VAX1    :UINT  := 410;   (* (DINT) VAX Basis movements: Target position [Units] *)
    ACP10PAR_BASIS_MOVE_S_REL_VAX1    :UINT  := 411;   (* (DINT) VAX Basis movements: Relative move distance [Units] *)
    ACP10PAR_S_SET_VAX1               :UINT  := 412;   (* (DINT) VAX: Position [Units] *)
    ACP10PAR_V_SET_VAX1               :UINT  := 413;   (* (REAL) VAX: Speed [Units/s] *)
    ACP10PAR_AXLIM_T_JOLT_VAX1        :UINT  := 415;   (* (REAL) VAX Limit values: Jolt time [s] *)
    ACP10PAR_BASIS_TRG_STOP           :UINT  := 416;   (* (BASIS_TRG_STOP_S_REST, BASIS_TRG_STOP_EVENT) Basis movements: Mode 'stop after trigger' *)
    ACP10PAR_BASIS_TRG_STOP_S_REST    :UINT  := 417;   (* (DINT) Basis movements: Remaining distance for mode 'stop after trigger' [Units] *)
    ACP10PAR_BASIS_TRG_STOP_EVENT     :UINT  := 418;   (* (USINT) Basis movements: Trigger event for mode 'stop after trigger' *)
    ACP10PAR_BASIS_MOVE_MODE          :UINT  := 419;   (* (USINT) Basis movements: Mode *)
    ACP10PAR_SCALE_ENCOD2_UNITS       :UINT  := 420;   (* (UDINT) Encoder2: Load scaling: Units per load revolution [Units] *)
    ACP10PAR_SCALE_ENCOD2_REV         :UINT  := 421;   (* (UDINT) Encoder2: Load scaling: Encoder revolutions *)
    ACP10PAR_ENCOD2_COUNT_DIR         :UINT  := 422;   (* (USINT) Encoder2: Load scaling: Count direction *)
    ACP10PAR_ENCOD2_S_ACT             :UINT  := 423;   (* (DINT) Encoder2: Actual position [Units] *)
    ACP10PAR_ENCOD2_HOMING_S          :UINT  := 424;   (* (DINT) Encoder2: Reference position [Units] *)
    ACP10PAR_ENCOD2_HOMING_MODE_BITS  :UINT  := 425;   (* (USINT) Encoder2: Control bits for homing mode *)
    ACP10PAR_CMD_ENCOD2_HOMING        :UINT  := 426;   (* (ENCOD2_HOMING_S, ENCOD2_HOMING_MODE_BITS) Encoder2: Command start homing procedure *)
    ACP10PAR_STAT_ENC2_HOMING_OK      :UINT  := 427;   (* (UDINT) Encoder2: Status home position valid *)
    ACP10PAR_SGEN_S_SET               :UINT  := 428;   (* (DINT) CTRL Position controller: Input set position [Units] *)
    ACP10PAR_ENCOD2_S_FILTER_T10      :UINT  := 429;   (* (REAL) Encoder2: Time constant for actual position filter [s] *)
    ACP10PAR_CMD_CAM_START            :UINT  := 430;   (* (UINT) Command: Start cam profile linkage *)
    ACP10PAR_CAM_MA_AXIS              :UINT  := 431;   (* (UINT) Cam profile: Master axis *)
    ACP10PAR_AUT_INDEX_DATA           :UINT  := 432;   (* (AUT_DATA_INDEX, AUT_POLY_DATA) Cam automat: Index and data of polynomial cam profile *)
    ACP10PAR_CAM_MA_V_MAX             :UINT  := 433;   (* (REAL) Cam profile: Maximum speed of master axis [Units/s] *)
    ACP10PAR_CAM_MA_S_START           :UINT  := 434;   (* (DINT) Cam profile: Start position of the master axis [Units] *)
    ACP10PAR_CAM_MA_S_SYNC            :UINT  := 435;   (* (DINT) Cam profile: Synchronous distance of master axis [Units] *)
    ACP10PAR_CAM_MA_S_COMP            :UINT  := 436;   (* (DINT) Cam profile: Compensation distance of master axis [Units] *)
    ACP10PAR_CAM_MA_TRIG_MODE         :UINT  := 437;   (* (USINT) Cam profile: Trigger mode of master axis *)
    ACP10PAR_CAM_MA_S_TRIG            :UINT  := 438;   (* (DINT) Cam profile: Trigger distance of master axis [Units] *)
    ACP10PAR_CAM_SL_S_SYNC            :UINT  := 439;   (* (DINT) Cam profile: Synchronous distance of slave axis [Units] *)
    ACP10PAR_CAM_SL_S_COMP            :UINT  := 440;   (* (DINT) Cam profile: Compensation distance of slave axis [Units] *)
    ACP10PAR_CAM_SL_S_TRIG            :UINT  := 441;   (* (DINT) Cam profile: Trigger distance of slave axis [Units] *)
    ACP10PAR_CAM_SL_TRIG_MODE         :UINT  := 442;   (* (USINT) Cam profile: Trigger mode of slave axis *)
    ACP10PAR_CAM_SL_S_COMP_MIN        :UINT  := 443;   (* (DINT) Cam profile: Minimum compensation distance of slave axis [Units] *)
    ACP10PAR_CAM_SL_S_COMP_MAX        :UINT  := 444;   (* (DINT) Cam profile: Maximum compensation distance of slave axis [Units] *)
    ACP10PAR_CAM_COMP_GEAR_TYPE       :UINT  := 445;   (* (USINT) Cam profile: Compensation gears type *)
    ACP10PAR_CAM_SL_TRIG_WINDOW       :UINT  := 446;   (* (DINT) Cam profile: Trigger window of slave axis [Units] *)
    ACP10PAR_CAM_DRUMSEQ_ENABLE       :UINT  := 447;   (* (BOOL) Cam profile: Status for drumsequencer enable *)
    ACP10PAR_CAM_MA_COMP_TRIG_MODE    :UINT  := 448;   (* (USINT) Cam profile: Compensation trigger mode of master axis *)
    ACP10PAR_CAM_MA_S_COMP_TRIG       :UINT  := 449;   (* (DINT) Cam profile: Distance compensation trigger of master axis [Units] *)
    ACP10PAR_PCTRL_MODE_SWITCH        :UINT  := 450;   (* (DINT) CTRL Position controller: Mode switch *)
    ACP10PAR_TRACE_TEST_ADDR          :UINT  := 451;   (* (DINT) Trace: Address for test date *)
    ACP10PAR_TRIG1_RISE_EDGE_S_ACT    :UINT  := 452;   (* (DINT) Actual position rising edge trigger1 [Units] *)
    ACP10PAR_TRIG1_FALL_EDGE_S_ACT    :UINT  := 453;   (* (DINT) Actual position falling edge trigger1 [Units] *)
    ACP10PAR_TRIG2_RISE_EDGE_S_ACT    :UINT  := 454;   (* (DINT) Actual position rising edge trigger2 [Units] *)
    ACP10PAR_TRIG2_FALL_EDGE_S_ACT    :UINT  := 455;   (* (DINT) Actual position falling edge trigger2 [Units] *)
    ACP10PAR_CAM_MA_COMP_TRIG_WINDOW  :UINT  := 456;   (* (DINT) Cam profile: Compensation trigger window of master axis [Units] *)
    ACP10PAR_CYCLIC_TOFRDRV_MODE      :UINT  := 457;   (* (USINT) Cyclic communication: Mode *)
    ACP10PAR_TRACE_TRIGGER_ADDR       :UINT  := 458;   (* (DINT) Trace: Address for trigger event *)
    ACP10PAR_LIMIT_SWITCH_IGNORE      :UINT  := 459;   (* (BOOL) Digital inputs: Ignore limit switch *)
    ACP10PAR_STAT_REFERENCE_SWITCH    :UINT  := 460;   (* (UDINT) Digital inputs: Status reference switch *)
    ACP10PAR_STAT_POS_LIMIT_SWITCH    :UINT  := 461;   (* (UDINT) Digital inputs: Status positive end switch *)
    ACP10PAR_STAT_NEG_LIMIT_SWITCH    :UINT  := 462;   (* (UDINT) Digital inputs: Status negative end switch *)
    ACP10PAR_STAT_TRIGGER1            :UINT  := 463;   (* (UDINT) Digital inputs: Status trigger1 *)
    ACP10PAR_STAT_TRIGGER2            :UINT  := 464;   (* (UDINT) Digital inputs: Status trigger2 *)
    ACP10PAR_STAT_CONTROLLER          :UINT  := 465;   (* (UDINT) Status: Controller *)
    ACP10PAR_STAT_HOMING_OK           :UINT  := 466;   (* (UDINT) Homing: Status home position valid *)
    ACP10PAR_STAT_TARGET_POS_REACHED  :UINT  := 467;   (* (UDINT) Basis movements: Status 'target position reached' *)
    ACP10PAR_STAT_MOVE_ACTIVE         :UINT  := 468;   (* (UDINT) Status: Movement active *)
    ACP10PAR_STAT_ERROR_NOT_READ      :UINT  := 469;   (* (UDINT) Messages: Status error record available *)
    ACP10PAR_STAT_WARNING_NOT_READ    :UINT  := 470;   (* (UDINT) Messages: Status warning record available *)
    ACP10PAR_STAT_DRIVE_READY         :UINT  := 471;   (* (UDINT) Status: Drive ready *)
    ACP10PAR_CMD_DRUMSEQ              :UINT  := 472;   (* (UINT) Command: Start/stop drumsequencer *)
    ACP10PAR_DRUMSEQ_MA_AXIS          :UINT  := 473;   (* (UINT) Drumsequencer: Master axis *)
    ACP10PAR_DRUMSEQ_S_START_ID       :UINT  := 474;   (* (UINT) Drumsequencer: ID for online change of start position [Units] *)
    ACP10PAR_DRUMSEQ_S_START          :UINT  := 475;   (* (DINT) Drumsequencer: Start position [Units] *)
    ACP10PAR_DRUMSEQ_S_IV             :UINT  := 476;   (* (DINT) Drumsequencer: Interval [Units] *)
    ACP10PAR_DRUMSEQ_TRACK_INDEX      :UINT  := 477;   (* (UINT) Drumsequencer: Index of parameter record for one track *)
    ACP10PAR_DRUMSEQ_DO_CHAN          :UINT  := 478;   (* (UINT) Drumsequencer: Number of digital output *)
    ACP10PAR_DRUMSEQ_TRACK_ENABLE_ID  :UINT  := 479;   (* (UINT) Drumsequencer: Enable ID *)
    ACP10PAR_DRUMSEQ_DO_DELAY         :UINT  := 480;   (* (REAL) Drumsequencer: Delay time to switch [s] *)
    ACP10PAR_DRUMSEQ_CAM_INDEX        :UINT  := 481;   (* (UINT) Drumsequencer: Index of parameter record for one cam *)
    ACP10PAR_DRUMSEQ_S_DO_ON          :UINT  := 482;   (* (DINT) Drumsequencer: Position within interval for output ON [Units] *)
    ACP10PAR_DRUMSEQ_S_DO_OFF         :UINT  := 483;   (* (DINT) Drumsequencer: Position within interval for output OFF [Units] *)
    ACP10PAR_MA1_CYCLIC_SEND          :UINT  := 484;   (* (UINT) Network coupling: Parameter ID of send data master1 *)
    ACP10PAR_MA2_CYCLIC_SEND          :UINT  := 485;   (* (UINT) Network coupling: Parameter ID of send data master2 *)
    ACP10PAR_CAM_MA_COMP_TRIG_IV_MIN  :UINT  := 486;   (* (DINT) Cam profile: Min. compensation trigger interval of master axis [Units] *)
    ACP10PAR_CAM_MA_COMP_TRIG_IV_MAX  :UINT  := 487;   (* (DINT) Cam profile: Max. compensation trigger interval of master axis [Units] *)
    ACP10PAR_CAM_SL_TRIG_IV_MIN       :UINT  := 488;   (* (DINT) Cam profile: Min. trigger interval of slave axis [Units] *)
    ACP10PAR_CAM_SL_TRIG_IV_MAX       :UINT  := 489;   (* (DINT) Cam profile: Max. trigger interval of slave axis [Units] *)
    ACP10PAR_CAM_SL_TRIG_T_DELAY      :UINT  := 490;   (* (DINT) Cam profile: Trigger delay time slave axis [us] *)
    ACP10PAR_CMD_CAM_CONTROLLER       :UINT  := 491;   (* (UINT) Command: Switch controller on/off with active cam profile *)
    ACP10PAR_CAM_MA_ADD_EL            :UINT  := 492;   (* (DINT) Cam profile: Additive element of master axis [Units] *)
    ACP10PAR_CAM_MA_TRIG_WINDOW       :UINT  := 493;   (* (DINT) Cam profile: Trigger window of master axis [Units] *)
    ACP10PAR_MA3_CYCLIC_SEND          :UINT  := 494;   (* (UINT) Network coupling: Parameter ID of send data master3 *)
    ACP10PAR_AUT_START_ST_INDEX       :UINT  := 495;   (* (USINT) Cam automat: Index for start state *)
    ACP10PAR_AUT_START_ST_INDEX_VAX1  :UINT  := 496;   (* (USINT) VAX Cam automat: Index for start state *)
    ACP10PAR_CYCL_MON_REQU1           :UINT  := 497;   (* (UINT) Parameter1 for cyclic status *)
    ACP10PAR_CYCL_MON_REQU2           :UINT  := 498;   (* (UINT) Parameter2 for cyclic status *)
    ACP10PAR_AUT_POLY_DATA            :UINT  := 500;   (* (DATA) Cam automat: Cam profile polynomial data *)
    ACP10PAR_AUT_DATA_INDEX           :UINT  := 501;   (* (UINT) Cam automat: Index of cam profile data for Upload/Download *)
    ACP10PAR_CMD_AUT_START            :UINT  := 502;   (* (UINT) Cam automat: Command *)
    ACP10PAR_AUT_MA_AXIS              :UINT  := 503;   (* (UINT) Cam automat: Master axis *)
    ACP10PAR_AUT_MA_S_START           :UINT  := 504;   (* (DINT) Cam automat: Start position of the master axis [Units] *)
    ACP10PAR_AUT_MA_IVSTART           :UINT  := 505;   (* (UDINT) Cam automat: Start interval of the master axis [Units] *)
    ACP10PAR_AUT_MA_V_MAX             :UINT  := 506;   (* (REAL) Cam automat: Maximum speed of master axis [Units/s] *)
    ACP10PAR_AUT_ST_INDEX             :UINT  := 507;   (* (USINT) Cam automat: Index of parameter record for one state *)
    ACP10PAR_AUT_EV_INDEX             :UINT  := 508;   (* (USINT) Cam automat: Index of parameter record for one event *)
    ACP10PAR_AUT_ST_DATA_INDEX        :UINT  := 509;   (* (UINT) Cam automat: Index of cam profile data for one state *)
    ACP10PAR_AUT_COMP_MODE            :UINT  := 510;   (* (USINT) Cam automat: Compensation gears mode *)
    ACP10PAR_AUT_COMP_MA_S            :UINT  := 511;   (* (DINT) Cam automat: Compensation distance of master axis [Units] *)
    ACP10PAR_AUT_COMP_SL_S            :UINT  := 512;   (* (DINT) Cam automat: Compensation distance of slave axis [Units] *)
    ACP10PAR_AUT_EVENT_TYPE           :UINT  := 513;   (* (USINT) Cam automat: Event type *)
    ACP10PAR_AUT_EVENT_ATTR           :UINT  := 514;   (* (USINT) Cam automat: Event attribute *)
    ACP10PAR_AUT_EVENT_ST_INDEX       :UINT  := 515;   (* (USINT) Cam automat: Index next state *)
    ACP10PAR_AUT_SIGNAL_SET           :UINT  := 516;   (* (USINT) Cam automat: Set signal *)
    ACP10PAR_AUT_ACT_ST_INDEX         :UINT  := 517;   (* (USINT) Cam automat: Index of the actual state *)
    ACP10PAR_AUT_SIGNAL_RESET         :UINT  := 518;   (* (USINT) Cam automat: Reset signal *)
    ACP10PAR_AUT_MA_FACTOR            :UINT  := 519;   (* (DINT) Cam automat: Multiplication factor of master axis *)
    ACP10PAR_AUT_SL_FACTOR            :UINT  := 520;   (* (DINT) Cam automat: Multiplication factor of slave axis *)
    ACP10PAR_AUT_ST_COUNT_INIT        :UINT  := 521;   (* (UINT) Cam automat: Initial count of state repetitions for event ncCOUNT *)
    ACP10PAR_AUT_ST_COUNT_SET         :UINT  := 522;   (* (UINT) Cam automat: Count of state repetitions for event ncCOUNT *)
    ACP10PAR_AUT_COMP_MA_S_MIN        :UINT  := 523;   (* (DINT) Cam automat: Minimum compensation distance of master axis [Units] *)
    ACP10PAR_CMD_QUICKSTOP            :UINT  := 524;   (* (NIL) Movement stop: Command quickstop *)
    ACP10PAR_EXTSET_CYC_STAT_BITS     :UINT  := 525;   (* (UINT) Bits in cyclic status for external set value mode *)
    ACP10PAR_OFFSET_ACT_POS           :UINT  := 526;   (* (DINT) Homing: Offset for actual position [Units] *)
    ACP10PAR_AUT_ONL_PAR_LOCK         :UINT  := 527;   (* (USINT) Cam automat: Lock for consistent online parameter change *)
    ACP10PAR_AUT_EVENT_ACTION         :UINT  := 528;   (* (UDINT) Cam automat: Action at state transition *)
    ACP10PAR_AUT_ACT_CAM_TYPE         :UINT  := 529;   (* (USINT) Cam automat: Cam type of the actual state *)
    ACP10PAR_LATCH1_EVENT             :UINT  := 530;   (* (USINT) Latch1: Trigger event *)
    ACP10PAR_LATCH1_VALUE_PARID       :UINT  := 531;   (* (UINT) Latch1: Parameter ID of value to latch *)
    ACP10PAR_LATCH1_WINDOW            :UINT  := 532;   (* (DINT) Latch1: Window *)
    ACP10PAR_LATCH1_WINDOW_POS        :UINT  := 533;   (* (DINT) Latch1: Position of window and activation *)
    ACP10PAR_LATCH1_VALUE             :UINT  := 534;   (* (DINT) Latch1: Result value *)
    ACP10PAR_LATCH1_STATUS            :UINT  := 535;   (* (USINT) Latch1: Status *)
    ACP10PAR_LATCH2_EVENT             :UINT  := 536;   (* (USINT) Latch2: Trigger event *)
    ACP10PAR_LATCH2_VALUE_PARID       :UINT  := 537;   (* (UINT) Latch2: Parameter ID of value to latch *)
    ACP10PAR_LATCH2_WINDOW            :UINT  := 538;   (* (DINT) Latch2: Window *)
    ACP10PAR_LATCH2_WINDOW_POS        :UINT  := 539;   (* (DINT) Latch2: Position of window and activation *)
    ACP10PAR_LATCH2_VALUE             :UINT  := 540;   (* (DINT) Latch2: Result value *)
    ACP10PAR_LATCH2_STATUS            :UINT  := 541;   (* (USINT) Latch2: Status *)
    ACP10PAR_MA1_CYCLIC_POS           :UINT  := 542;   (* (DINT) Network coupling: Cyclic position master1 *)
    ACP10PAR_MA2_CYCLIC_POS           :UINT  := 543;   (* (DINT) Network coupling: Cyclic position master2 *)
    ACP10PAR_PAR_SEQU_INDEX_DATA      :UINT  := 544;   (* (PAR_SEQU_INDEX, PAR_SEQU) Parameter sequence: Index and data *)
    ACP10PAR_CAM_INHIBIT_OFF          :UINT  := 545;   (* (DINT) Cam profile: Enable movement [Units] *)
    ACP10PAR_CAM_INHIBIT_ON           :UINT  := 546;   (* (DINT) Cam profile: Transition to standstill and inhibit movement [Units] *)
    ACP10PAR_CAM_ACT_ST_INDEX         :UINT  := 547;   (* (USINT) Cam profile: Index of the actual state *)
    ACP10PAR_MA3_CYCLIC_POS           :UINT  := 548;   (* (DINT) Network coupling: Cyclic position master3 *)
    ACP10PAR_AUT_CAM_MA_S_REL         :UINT  := 549;   (* (DINT) Cam automat: Relative start distance of master axis within cam profile [Units] *)
    ACP10PAR_AUT_CAM_MA_S_REL_VAX1    :UINT  := 550;   (* (DINT) VAX Cam automat: Relative start distance of master axis within cam profile [Units] *)
    ACP10PAR_CMD_AUT_START_VAX1       :UINT  := 551;   (* (UINT) VAX Cam automat: Command *)
    ACP10PAR_AUT_MA_AXIS_VAX1         :UINT  := 552;   (* (UINT) VAX Cam automat: Master axis *)
    ACP10PAR_AUT_MA_S_START_VAX1      :UINT  := 553;   (* (DINT) VAX Cam automat: Start position of the master axis [Units] *)
    ACP10PAR_AUT_MA_IVSTART_VAX1      :UINT  := 554;   (* (UDINT) VAX Cam automat: Start interval of the master axis [Units] *)
    ACP10PAR_AUT_MA_V_MAX_VAX1        :UINT  := 555;   (* (REAL) VAX Cam automat: Maximum speed of master axis [Units/s] *)
    ACP10PAR_AUT_ST_INDEX_VAX1        :UINT  := 556;   (* (USINT) VAX Cam automat: Index of parameter record for one state *)
    ACP10PAR_AUT_EV_INDEX_VAX1        :UINT  := 557;   (* (USINT) VAX Cam automat: Index of parameter record for one event *)
    ACP10PAR_AUT_ST_DATA_INDEX_VAX1   :UINT  := 558;   (* (UINT) VAX Cam automat: Index of cam profile data for one state *)
    ACP10PAR_AUT_COMP_MODE_VAX1       :UINT  := 559;   (* (USINT) VAX Cam automat: Compensation gears mode *)
    ACP10PAR_AUT_COMP_MA_S_VAX1       :UINT  := 560;   (* (DINT) VAX Cam automat: Compensation distance of master axis [Units] *)
    ACP10PAR_AUT_COMP_SL_S_VAX1       :UINT  := 561;   (* (DINT) VAX Cam automat: Compensation distance of slave axis [Units] *)
    ACP10PAR_AUT_EVENT_TYPE_VAX1      :UINT  := 562;   (* (USINT) VAX Cam automat: Event type *)
    ACP10PAR_AUT_EVENT_ATTR_VAX1      :UINT  := 563;   (* (USINT) VAX Cam automat: Event attribute *)
    ACP10PAR_AUT_EVENT_ST_INDEX_VAX1  :UINT  := 564;   (* (USINT) VAX Cam automat: Index next state *)
    ACP10PAR_AUT_SIGNAL_SET_VAX1      :UINT  := 565;   (* (USINT) VAX Cam automat: Set signal *)
    ACP10PAR_AUT_ACT_ST_INDEX_VAX1    :UINT  := 566;   (* (USINT) VAX Cam automat: Index of the actual state *)
    ACP10PAR_AUT_SIGNAL_RESET_VAX1    :UINT  := 567;   (* (USINT) VAX Cam automat: Reset signal *)
    ACP10PAR_AUT_MA_FACTOR_VAX1       :UINT  := 568;   (* (DINT) VAX Cam automat: Multiplication factor of master axis *)
    ACP10PAR_AUT_SL_FACTOR_VAX1       :UINT  := 569;   (* (DINT) VAX Cam automat: Multiplication factor of slave axis *)
    ACP10PAR_AUT_ST_COUNT_INIT_VAX1   :UINT  := 570;   (* (UINT) VAX Cam automat: Initial count of state repetitions for event ncCOUNT *)
    ACP10PAR_AUT_ST_COUNT_SET_VAX1    :UINT  := 571;   (* (UINT) VAX Cam automat: Count of state repetitions for event ncCOUNT *)
    ACP10PAR_AUT_COMP_MA_S_MIN_VAX1   :UINT  := 572;   (* (DINT) VAX Cam automat: Minimum compensation distance of master axis [Units] *)
    ACP10PAR_AUT_ONL_PAR_LOCK_VAX1    :UINT  := 573;   (* (USINT) VAX Cam automat: Lock for consistent online parameter change *)
    ACP10PAR_AUT_EVENT_ACTION_VAX1    :UINT  := 574;   (* (UDINT) VAX Cam automat: Action at state transition *)
    ACP10PAR_AUT_ACT_CAM_TYPE_VAX1    :UINT  := 575;   (* (USINT) VAX Cam automat: Cam type of the actual state *)
    ACP10PAR_CMD_MOVEMENT_STOP_VAX1   :UINT  := 576;   (* (USINT) VAX Movement stop: Command stop movement *)
    ACP10PAR_CMD_HOMING_VAX1          :UINT  := 577;   (* (DINT) VAX: Command start homing procedure *)
    ACP10PAR_ENCOD2_S_ACT_FILTER      :UINT  := 578;   (* (DINT) Encoder2: Filtered actual position [Units] *)
    ACP10PAR_AUT_MA_ADD_AXIS          :UINT  := 579;   (* (UINT) Cam automat: Additive master axis *)
    ACP10PAR_AUT_MA_ADD_AXIS_VAX1     :UINT  := 580;   (* (UINT) VAX Cam automat: Additive master axis *)
    ACP10PAR_AUT_SL_ADD_AXIS          :UINT  := 581;   (* (UINT) Cam automat: Additive slave axis *)
    ACP10PAR_AUT_SL_ADD_AXIS_VAX1     :UINT  := 582;   (* (UINT) VAX Cam automat: Additive slave axis *)
    ACP10PAR_DIG_IN_QUICKSTOP_ENABLE  :UINT  := 583;   (* (USINT) Digital inputs: Quickstop enable bits *)
    ACP10PAR_USER_I4_VAR1             :UINT  := 584;   (* (DINT) Function block: User I4 variable1 *)
    ACP10PAR_USER_I4_VAR2             :UINT  := 585;   (* (DINT) Function block: User I4 variable2 *)
    ACP10PAR_USER_R4_VAR1             :UINT  := 586;   (* (REAL) Function block: User R4 variable1 *)
    ACP10PAR_USER_R4_VAR2             :UINT  := 587;   (* (REAL) Function block: User R4 variable2 *)
    ACP10PAR_AUT_TRIG1_T_DELAY        :UINT  := 588;   (* (DINT) Cam automat: Trigger1 delay time [us] *)
    ACP10PAR_AUT_TRIG2_T_DELAY        :UINT  := 589;   (* (DINT) Cam automat: Trigger2 delay time [us] *)
    ACP10PAR_CMD_AUT_CONTROLLER       :UINT  := 590;   (* (UINT) Cam automat: Switch controller on/off with active cam automat *)
    ACP10PAR_STATION_NUMBER_CYCLIC    :UINT  := 591;   (* (UINT) Network coupling: Station number of sender *)
    ACP10PAR_MA_PARID_CYCLIC_POS      :UINT  := 592;   (* (UINT) Network coupling: Master Parameter ID of sender station *)
    ACP10PAR_CONFIG_MA1_CYCLIC_POS    :UINT  := 593;   (* (STATION_NUMBER_CYCLIC, MA_PARID_CYCLIC_POS) Network coupling: Configure station to receive on MA1_CYCLIC_POS *)
    ACP10PAR_CONFIG_MA2_CYCLIC_POS    :UINT  := 594;   (* (STATION_NUMBER_CYCLIC, MA_PARID_CYCLIC_POS) Network coupling: Configure station to receive on MA2_CYCLIC_POS *)
    ACP10PAR_CONFIG_MA3_CYCLIC_POS    :UINT  := 595;   (* (STATION_NUMBER_CYCLIC, MA_PARID_CYCLIC_POS) Network coupling: Configure station to receive on MA3_CYCLIC_POS *)
    ACP10PAR_SCALE_R4_PARID           :UINT  := 596;   (* (UINT) Parameter scaling: Input parameter ID *)
    ACP10PAR_SCALE_R4_OFFSET          :UINT  := 597;   (* (REAL) Parameter scaling: Offset *)
    ACP10PAR_SCALE_R4_FACTOR          :UINT  := 598;   (* (REAL) Parameter scaling: Factor *)
    ACP10PAR_SCALE_R4_TO_I2           :UINT  := 599;   (* (INT) Parameter scaling: Output value (I2 format) *)
    ACP10PAR_SW_END_A2_POS            :UINT  := 600;   (* (REAL) Deceleration for positive SW end position [Units/s²] *)
    ACP10PAR_SW_END_A2_NEG            :UINT  := 601;   (* (REAL) Deceleration for negative SW end position [Units/s²] *)
    ACP10PAR_MA1_CYCLIC_IPL_MODE      :UINT  := 602;   (* (USINT) Network coupling: Interpolation mode for cyclic position master1 *)
    ACP10PAR_MA2_CYCLIC_IPL_MODE      :UINT  := 603;   (* (USINT) Network coupling: Interpolation mode for cyclic position master2 *)
    ACP10PAR_MA3_CYCLIC_IPL_MODE      :UINT  := 604;   (* (USINT) Network coupling: Interpolation mode for cyclic position master3 *)
    ACP10PAR_AUT_SL_LATCH_ID          :UINT  := 605;   (* (UINT) Cam automat: Parameter ID for latch value of slave axis *)
    ACP10PAR_AUT_SL_LATCH_ID_VAX1     :UINT  := 606;   (* (UINT) VAX Cam automat: Parameter ID for latch value of slave axis *)
    ACP10PAR_AUT_COMP_SL_S_MIN        :UINT  := 607;   (* (DINT) Cam automat: Minimum compensation distance of slave axis [Units] *)
    ACP10PAR_AUT_COMP_SL_S_MIN_VAX1   :UINT  := 608;   (* (DINT) VAX Cam automat: Minimum compensation distance of slave axis [Units] *)
    ACP10PAR_AUT_COMP_SL_S_MAX        :UINT  := 609;   (* (DINT) Cam automat: Maximum compensation distance of slave axis [Units] *)
    ACP10PAR_AUT_COMP_SL_S_MAX_VAX1   :UINT  := 610;   (* (DINT) VAX Cam automat: Maximum compensation distance of slave axis [Units] *)
    ACP10PAR_AUT_EVENT_ID             :UINT  := 611;   (* (UINT) Cam automat: Parameter ID for event *)
    ACP10PAR_AUT_EVENT_ID_VAX1        :UINT  := 612;   (* (UINT) VAX Cam automat: Parameter ID for event *)
    ACP10PAR_AUT_COMP_SL_V_MIN        :UINT  := 613;   (* (REAL) Cam automat: Minimum speed of slave axis within compensation gears [Units/s] *)
    ACP10PAR_AUT_COMP_SL_V_MIN_VAX1   :UINT  := 614;   (* (REAL) VAX Cam automat: Minimum speed of slave axis within compensation gears [Units/s] *)
    ACP10PAR_CYC_ADD_SET_PARID        :UINT  := 615;   (* (UINT) Cyclic external set values: Parameter ID additive set position *)
    ACP10PAR_POS_LIMIT_SWITCH_HW      :UINT  := 616;   (* (UDINT) Positive end switch *)
    ACP10PAR_NEG_LIMIT_SWITCH_HW      :UINT  := 617;   (* (UDINT) Negative end switch *)
    ACP10PAR_AUT_MA_CAM_OFFSET        :UINT  := 619;   (* (DINT) Cam automat: Cam offset of master axis [Units] *)
    ACP10PAR_AUT_SL_CAM_OFFSET        :UINT  := 620;   (* (DINT) Cam automat: Cam offset of slave axis [Units] *)
    ACP10PAR_AUT_MA_CAM_OFFSET_VAX1   :UINT  := 621;   (* (DINT) VAX Cam automat: Cam offset of master axis [Units] *)
    ACP10PAR_AUT_SL_CAM_OFFSET_VAX1   :UINT  := 622;   (* (DINT) VAX Cam automat: Cam offset of slave axis [Units] *)
    ACP10PAR_CMD_AUT_ABS_MOVE         :UINT  := 623;   (* (DINT) Cam automat: Start movement with absolute target position [Units] *)
    ACP10PAR_STOP_CONF_INDEX_VAX1     :UINT  := 624;   (* (USINT) VAX Movement stop: Index of parameter record for stop configuration *)
    ACP10PAR_STOP_CONF_RAMP_VAX1      :UINT  := 625;   (* (USINT) VAX Movement stop: Deceleration ramp *)
    ACP10PAR_MA_CYCLE_TIME_FACTOR     :UINT  := 626;   (* (UDINT) Network coupling: Multiplication factor of cycle time *)
    ACP10PAR_AUT_ST_EV_COUNT          :UINT  := 627;   (* (UDINT) Cam automat: State transition count *)
    ACP10PAR_AUT_ST_EV_COUNT_VAX1     :UINT  := 628;   (* (UDINT) VAX Cam automat: State transition count *)
    ACP10PAR_CONFIG_VAX1              :UINT  := 629;   (* (USINT) VAX: Configuration *)
    ACP10PAR_ERROR_NUMBER_VAX1        :UINT  := 630;   (* (UINT) VAX Messages: Error number *)
    ACP10PAR_ERROR_INFO_VAX1          :UINT  := 631;   (* (DINT) VAX Messages: Additional error info *)
    ACP10PAR_ERROR_REC_VAX1           :UINT  := 632;   (* (ERROR_NUMBER_VAX1, ERROR_INFO_VAX1) VAX Messages: Error record *)
    ACP10PAR_AUT_ACT_ST_DAT_IDX       :UINT  := 633;   (* (UINT) Cam automat: Index of cam profile data of the actual state *)
    ACP10PAR_AUT_ACT_ST_DAT_IDX_VAX1  :UINT  := 634;   (* (UINT) VAX Cam automat: Index of cam profile data of the actual state *)
    ACP10PAR_LIM_A_SET_STOP           :UINT  := 635;   (* (REAL) Limit values: Maximum acceleration for stop of a movement [Units/s²] *)
    ACP10PAR_CMD_PAR_SEQU_INIT_VAX1   :UINT  := 636;   (* (UINT) VAX: Initialize parameter sequence *)
    ACP10PAR_AUT_MA_ID                :UINT  := 637;   (* (UINT) Cam automat: Parameter ID of master axis *)
    ACP10PAR_AUT_MA_ID_VAX1           :UINT  := 638;   (* (UINT) VAX Cam automat: Parameter ID of master axis *)
    ACP10PAR_AUT_COMP_SL_T_JOLT       :UINT  := 639;   (* (REAL) Cam automat: Jolt time of slave axis within compensation gears [s] *)
    ACP10PAR_AUT_COMP_SL_T_JOLT_VAX1  :UINT  := 640;   (* (REAL) VAX Cam automat: Jolt time of slave axis within compensation gears [s] *)
    ACP10PAR_CMD_CYC_V_MOVE           :UINT  := 641;   (* (UINT) Basis movements: Start movement with cyclic speed set values *)
    ACP10PAR_CMD_CYC_V_MOVE_VAX1      :UINT  := 642;   (* (UINT) VAX Basis movements: Start movement with cyclic speed set values *)
    ACP10PAR_CYC_V_MOVE_PARID         :UINT  := 643;   (* (UINT) Basis movements: Parameter ID for cyclic set speed *)
    ACP10PAR_CYC_V_MOVE_PARID_VAX1    :UINT  := 644;   (* (UINT) VAX Basis movements: Parameter ID for cyclic set speed *)
    ACP10PAR_KSCTRL_TORQUE_LIM        :UINT  := 651;   (* (REAL) CTRL Torque limiter: Induction stop: Maximum torque [Nm] *)
    ACP10PAR_MOTOR_ENCOD_ATTR         :UINT  := 652;   (* (UINT) Motor: Encoder: Attribute *)
    ACP10PAR_UFCTRL_TYPE              :UINT  := 653;   (* (USINT) CTRL U/f: Type *)
    ACP10PAR_UFCTRL_AUTO_CONFIG       :UINT  := 654;   (* (USINT) CTRL U/f: Automatic configuration *)
    ACP10PAR_UFCTRL_VOLT_BOOST        :UINT  := 655;   (* (REAL) CTRL U/f: Boost voltage [V] *)
    ACP10PAR_UFCTRL_VOLT_RATED        :UINT  := 656;   (* (REAL) CTRL U/f: Rated voltage [V] *)
    ACP10PAR_UFCTRL_FREQ_RATED        :UINT  := 657;   (* (REAL) CTRL U/f: Rated frequency [Hz] *)
    ACP10PAR_MOTOR_DATA_IDX           :UINT  := 658;   (* (UINT) Motor: Dataset index *)
    ACP10PAR_ENCOD_ADC2               :UINT  := 659;   (* (REAL) Encoder1: ADC2 value *)
    ACP10PAR_SIM_MODE                 :UINT  := 660;   (* (UINT) Simulation mode: Model *)
    ACP10PAR_SIM_INERTIA1             :UINT  := 661;   (* (REAL) Simulation mode: Mass inertia1 [kgm²] *)
    ACP10PAR_SIM_STATIC_FRICTION1     :UINT  := 662;   (* (REAL) Simulation mode: Static friction1 [Nm] *)
    ACP10PAR_SIM_VISCOUS_FRICTION1    :UINT  := 663;   (* (REAL) Simulation mode: Viscous friction1 [Nms] *)
    ACP10PAR_SIM_ADD_LOAD_PARID       :UINT  := 664;   (* (UINT) Simulation mode:: Parameter for additive load *)
    ACP10PAR_ENCOD_REF_CHK_DELTA      :UINT  := 665;   (* (DINT) Encoder1: INC Reference pulse interval error [Incr] *)
    ACP10PAR_ENCOD2_REF_CHK_DELTA     :UINT  := 666;   (* (DINT) Encoder2: INC Reference pulse interval error [Incr] *)
    ACP10PAR_ENCOD3_REF_CHK_DELTA     :UINT  := 667;   (* (DINT) Encoder3: INC Reference pulse interval error [Incr] *)
    ACP10PAR_TEMP_MOTOR_AMB           :UINT  := 668;   (* (REAL) Motor: Ambient temperature [°C] *)
    ACP10PAR_LOAD_POWER               :UINT  := 670;   (* (REAL) Power stage: Continuous power: Load [%] *)
    ACP10PAR_LOAD_POWER_MAX           :UINT  := 671;   (* (REAL) Power stage: Continuous power: Maximum load [%] *)
    ACP10PAR_VCTRL_ENCOD_COUNT_DIR    :UINT  := 672;   (* (USINT) Motor encoder: Load scaling: Count direction *)
    ACP10PAR_VCTRL_SCALE_LOAD_UNITS   :UINT  := 673;   (* (UDINT) Motor encoder: Load scaling: Units per load revolutions [Units] *)
    ACP10PAR_VCTRL_SCALE_LOAD_MOTREV  :UINT  := 674;   (* (UDINT) Motor encoder: Load scaling: Encoder revolutions per load revolution *)
    ACP10PAR_ENCOD_REF_CHK_MODE       :UINT  := 675;   (* (UINT) Encoder1: INC Reference pulse check mode *)
    ACP10PAR_ENCOD2_REF_CHK_MODE      :UINT  := 676;   (* (UINT) Encoder2: INC Reference pulse check mode *)
    ACP10PAR_ENCOD3_REF_CHK_MODE      :UINT  := 677;   (* (UINT) Encoder3: INC Reference pulse check mode *)
    ACP10PAR_ENCOD_REF_CHK_WINDOW     :UINT  := 678;   (* (UDINT) Encoder1: INC Reference pulse check window [Incr] *)
    ACP10PAR_ENCOD2_REF_CHK_WINDOW    :UINT  := 679;   (* (UDINT) Encoder2: INC Reference pulse check window [Incr] *)
    ACP10PAR_ENCOD3_REF_CHK_WINDOW    :UINT  := 680;   (* (UDINT) Encoder3: INC Reference pulse check window [Incr] *)
    ACP10PAR_ENCOD_REF_WIDTH          :UINT  := 681;   (* (UDINT) Encoder1: INC Reference pulse width [Incr] *)
    ACP10PAR_ENCOD2_REF_WIDTH         :UINT  := 682;   (* (UDINT) Encoder2: INC Reference pulse width [Incr] *)
    ACP10PAR_ENCOD3_REF_WIDTH         :UINT  := 683;   (* (UDINT) Encoder3: INC Reference pulse width [Incr] *)
    ACP10PAR_ENCOD_REF_INTERVAL       :UINT  := 684;   (* (UDINT) Encoder1: INC Reference pulse interval [Incr] *)
    ACP10PAR_ENCOD2_REF_INTERVAL      :UINT  := 685;   (* (UDINT) Encoder2: INC Reference pulse interval [Incr] *)
    ACP10PAR_ENCOD3_REF_INTERVAL      :UINT  := 686;   (* (UDINT) Encoder3: INC Reference pulse interval [Incr] *)
    ACP10PAR_SCTRL_LIM_V_POS          :UINT  := 687;   (* (REAL) CTRL Speed controller: Speed limit positive direction [1/s] *)
    ACP10PAR_SCTRL_LIM_V_NEG          :UINT  := 688;   (* (REAL) CTRL Speed controller: Speed limit negative direction [1/s] *)
    ACP10PAR_PCTRL_SPEED_REF_I        :UINT  := 692;   (* (REAL) CTRL Position controller: Manipulated variable of integrator [Units/s] *)
    ACP10PAR_ENCOD3_POS_ACT           :UINT  := 693;   (* (DINT) Encoder3: Actual position per revolution [Incr] *)
    ACP10PAR_SCALE_ENCOD3_UNITS       :UINT  := 694;   (* (UDINT) Encoder3: Load scaling: Units per load revolution [Units] *)
    ACP10PAR_SCALE_ENCOD3_REV         :UINT  := 695;   (* (UDINT) Encoder3: Load scaling: Encoder revolutions *)
    ACP10PAR_ENCOD3_COUNT_DIR         :UINT  := 696;   (* (USINT) Encoder3: Load scaling: Count direction *)
    ACP10PAR_ENCOD3_S_ACT             :UINT  := 697;   (* (DINT) Encoder3: Actual position [Units] *)
    ACP10PAR_ENCOD3_STATUS            :UINT  := 698;   (* (UDINT) Encoder3: Status *)
    ACP10PAR_ENCOD3_SSI_ZERO_BITS     :UINT  := 699;   (* (USINT) Encoder3: SSI Number of leading zeros *)
    ACP10PAR_ENCOD3_SSI_BITS          :UINT  := 700;   (* (USINT) Encoder3: SSI Number of data bits *)
    ACP10PAR_ENCOD3_SSI_CODE          :UINT  := 701;   (* (USINT) Encoder3: SSI Data code *)
    ACP10PAR_ENCOD3_SSI_PARITY_CHK    :UINT  := 702;   (* (USINT) Encoder3: SSI Parity check *)
    ACP10PAR_SCALE_ENCOD3_INCR        :UINT  := 703;   (* (UDINT) Encoder3: Encoder scaling: Increments per encoder revolution *)
    ACP10PAR_ENCOD3_TYPE              :UINT  := 704;   (* (USINT) Encoder3: Type *)
    ACP10PAR_ENCOD3_HOMING_S          :UINT  := 705;   (* (DINT) Encoder3: Reference position [Units] *)
    ACP10PAR_ENCOD3_HOMING_MODE_BITS  :UINT  := 706;   (* (USINT) Encoder3: Control bits for homing mode *)
    ACP10PAR_CMD_ENCOD3_HOMING        :UINT  := 707;   (* (ENCOD3_HOMING_S, ENCOD3_HOMING_MODE_BITS) Encoder3: Command start homing procedure *)
    ACP10PAR_ENCOD3_S_FILTER_T10      :UINT  := 708;   (* (REAL) Encoder3: Time constant for actual position filter [s] *)
    ACP10PAR_STAT_ENC3_HOMING_OK      :UINT  := 709;   (* (UDINT) Encoder3: Status home position valid *)
    ACP10PAR_ENCOD3_S_ACT_FILTER      :UINT  := 710;   (* (DINT) Encoder3: Filtered actual position [Units] *)
    ACP10PAR_ENCOD3_OUT_PARID         :UINT  := 711;   (* (UINT) Encoder3: Emulation: Output parameter ID *)
    ACP10PAR_ENCOD2_OUT_PARID         :UINT  := 712;   (* (UINT) Encoder2: Emulation: Output parameter ID *)
    ACP10PAR_ICTRL_SET_PARID          :UINT  := 713;   (* (UINT) CTRL Current controller: Set value parameter ID of stator current quadrature component  *)
    ACP10PAR_MA1_CYCLIC_ERROR_STATUS  :UINT  := 714;   (* (USINT) Network coupling: Error status for cyclic position master1 *)
    ACP10PAR_MA2_CYCLIC_ERROR_STATUS  :UINT  := 715;   (* (USINT) Network coupling: Error status for cyclic position master2 *)
    ACP10PAR_MA3_CYCLIC_ERROR_STATUS  :UINT  := 716;   (* (USINT) Network coupling: Error status for cyclic position master3 *)
    ACP10PAR_CMD_CTRL_OFF_BRAKE_ON    :UINT  := 717;   (* (NIL) CTRL Controller: Power off *)
    ACP10PAR_ENCOD_ERROR_MODE         :UINT  := 718;   (* (UINT) Encoder1: Error Mode *)
    ACP10PAR_ENCOD_CMD                :UINT  := 719;   (* (UDINT) Encoder1: Encoder command *)
    ACP10PAR_VCTRL_S_ACT_PARID        :UINT  := 722;   (* (UINT) CTRL Vector controller: Actual position parameter ID *)
    ACP10PAR_ENCOD2_SSI_LINE_RES      :UINT  := 723;   (* (DINT) Encoder2: Serial resolution per sinus period *)
    ACP10PAR_ENCOD3_SSI_LINE_RES      :UINT  := 724;   (* (DINT) Encoder3: Serial resolution per sinus period *)
    ACP10PAR_ICTRL_ISD_SET_PARID      :UINT  := 725;   (* (UINT) CTRL Current controller: Set value parameter ID of stator current direct component  *)
    ACP10PAR_SCTRL_ENABLE_PARID       :UINT  := 726;   (* (UINT) CTRL Speed controller: Parameter ID enable input *)
    ACP10PAR_ENCOD_LINE_CHK_IGNORE    :UINT  := 727;   (* (UINT) Encoder1: Ignore check *)
    ACP10PAR_ENCOD2_LINE_CHK_IGNORE   :UINT  := 728;   (* (UINT) Encoder2: Ignore check *)
    ACP10PAR_ENCOD3_LINE_CHK_IGNORE   :UINT  := 729;   (* (UINT) Encoder3: Ignore check *)
    ACP10PAR_ENCOD_INC_MODE           :UINT  := 730;   (* (UINT) Encoder1: INC mode *)
    ACP10PAR_ENCOD2_INC_MODE          :UINT  := 731;   (* (UINT) Encoder2: INC mode *)
    ACP10PAR_ENCOD3_INC_MODE          :UINT  := 732;   (* (UINT) Encoder3: INC mode *)
    ACP10PAR_ENCOD_INC_SIN_AMP        :UINT  := 733;   (* (REAL) Encoder1: INC square of the standardized signal amplitude *)
    ACP10PAR_ENCOD2_INC_SIN_AMP       :UINT  := 734;   (* (REAL) Encoder2: INC square of the standardized signal amplitude *)
    ACP10PAR_ENCOD3_INC_SIN_AMP       :UINT  := 735;   (* (REAL) Encoder3: INC square of the standardized signal amplitude *)
    ACP10PAR_ENCOD_INC_SIN_KV         :UINT  := 736;   (* (DINT) Encoder1: EnDat Amplitude amplification *)
    ACP10PAR_ENCOD2_INC_SIN_KV        :UINT  := 737;   (* (DINT) Encoder2: EnDat Amplitude amplification *)
    ACP10PAR_ENCOD3_INC_SIN_KV        :UINT  := 738;   (* (DINT) Encoder3: EnDat Amplitude amplification *)
    ACP10PAR_ENCOD_REF_DCM_DISTANCE   :UINT  := 739;   (* (UDINT) Encoder1: DCM Basic distance [Lines] *)
    ACP10PAR_ENCOD2_REF_DCM_DISTANCE  :UINT  := 740;   (* (UDINT) Encoder2: DCM Basic distance [Lines] *)
    ACP10PAR_ENCOD3_REF_DCM_DISTANCE  :UINT  := 741;   (* (UDINT) Encoder3: DCM Basic distance [Lines] *)
    ACP10PAR_SLOT1_MODULE_ID          :UINT  := 742;   (* (UINT) System administration: Plug-in module: ID from slot 1 *)
    ACP10PAR_SLOT2_MODULE_ID          :UINT  := 743;   (* (UINT) System administration: Plug-in module: ID from slot 2 *)
    ACP10PAR_SLOT3_MODULE_ID          :UINT  := 744;   (* (UINT) System administration: Plug-in module: ID from slot 3 *)
    ACP10PAR_SLOT4_MODULE_ID          :UINT  := 745;   (* (UINT) System administration: Plug-in module: ID from slot 4 *)
    ACP10PAR_FFCTRL_TORQUE_LOAD       :UINT  := 746;   (* (REAL) CTRL Feed forward: Load torque [Nm] *)
    ACP10PAR_FFCTRL_T_FILTER_A        :UINT  := 747;   (* (REAL) CTRL Feed forward: Acceleration filter time constant [s] *)
    ACP10PAR_UDC_ISQ_LIM_MAX          :UINT  := 748;   (* (REAL) CTRL DC bus: Limiter: Upper current limit *)
    ACP10PAR_UDC_ISQ_LIM_MIN          :UINT  := 749;   (* (REAL) CTRL DC bus: Limiter: Lower current limit *)
    ACP10PAR_PAR_SEQU                 :UINT  := 750;   (* (DATA) Parameter sequence: Data *)
    ACP10PAR_PAR_SEQU_INDEX           :UINT  := 751;   (* (UINT) Parameter sequence: Index for Upload/Download *)
    ACP10PAR_CMD_PAR_SEQU_INIT        :UINT  := 752;   (* (UINT) Parameter sequence: Initialize parameter *)
    ACP10PAR_CAM_CLEAR_TRIG_FIFO      :UINT  := 753;   (* (USINT) Cam profile: Clear trigger FIFO values at restart *)
    ACP10PAR_CAM_S_SET                :UINT  := 754;   (* (DINT) Cam profile: Set position [Units] *)
    ACP10PAR_ENCOD1_S_FILTER_T10      :UINT  := 755;   (* (REAL) Encoder1: Time constant for actual position filter [s] *)
    ACP10PAR_ENCOD1_S_ACT_FILTER      :UINT  := 756;   (* (DINT) Encoder1: Filtered actual position [Units] *)
    ACP10PAR_PCTRL_SYS_TIME           :UINT  := 757;   (* (UDINT) Drive synchronisation: Total time within the position controller cycle [us] *)
    ACP10PAR_DRUMSEQ_ONL_PAR_LOCK     :UINT  := 758;   (* (USINT) Drumsequencer: Lock for consistent online parameter change *)
    ACP10PAR_ONL_PAR_LOCK             :UINT  := 759;   (* (DRUMSEQ_ONL_PAR_LOCK, AUT_ONL_PAR_LOCK, AUT_ONL_PAR_LOCK_VAX1) Lock for consistent online parameter change *)
    ACP10PAR_AUT_EV_STATUS_BITS       :UINT  := 760;   (* (UDINT) Cam automat: Event status bits *)
    ACP10PAR_AUT_EV_STATUS_BITS_VAX1  :UINT  := 761;   (* (UDINT) VAX Cam automat: Event status bits *)
    ACP10PAR_MSG_CONF_ERROR_NUMBER    :UINT  := 762;   (* (UINT) Messages: Error number for configuration *)
    ACP10PAR_MSG_CONF_ACTIVATE_ERROR  :UINT  := 763;   (* (USINT) Messages: Activate configuration error number *)
    ACP10PAR_AUT_COMP_SL_V_MAX        :UINT  := 764;   (* (REAL) Cam automat: Maximum speed of slave axis within compensation gears [Units/s] *)
    ACP10PAR_AUT_COMP_SL_V_MAX_VAX1   :UINT  := 765;   (* (REAL) VAX Cam automat: Maximum speed of slave axis within compensation gears [Units/s] *)
    ACP10PAR_AUT_COMP_SL_A1_MAX       :UINT  := 766;   (* (REAL) Cam automat: Maximum acceleration of slave axis within compensation phase1 [Units/s²] *)
    ACP10PAR_AUT_COMP_SL_A1_MAX_VAX1  :UINT  := 767;   (* (REAL) VAX Cam automat: Maximum acceleration of slave axis within compensation phase1 [Units/s²] *)
    ACP10PAR_AUT_COMP_SL_A2_MAX       :UINT  := 768;   (* (REAL) Cam automat: Maximum acceleration of slave axis within compensation phase2 [Units/s²] *)
    ACP10PAR_AUT_COMP_SL_A2_MAX_VAX1  :UINT  := 769;   (* (REAL) VAX Cam automat: Maximum acceleration of slave axis within compensation phase2 [Units/s²] *)
    ACP10PAR_AUT_POLY_CHECK           :UINT  := 770;   (* (UINT) Cam automat: Check cam profile polynomial data *)
    ACP10PAR_AUT_S_SET                :UINT  := 771;   (* (DINT) Cam automat: Set position [Units] *)
    ACP10PAR_CMD_AUT_ST_CHECK         :UINT  := 772;   (* (USINT) Cam automat: Check parameter record for one state *)
    ACP10PAR_CMD_AUT_ST_CHECK_VAX1    :UINT  := 773;   (* (USINT) VAX Cam automat: Check parameter record for one state *)
    ACP10PAR_ENCOD1_S_FILTER_TE       :UINT  := 774;   (* (REAL) Encoder1: Extrapolation time for actual position filter [s] *)
    ACP10PAR_ENCOD2_S_FILTER_TE       :UINT  := 775;   (* (REAL) Encoder2: Extrapolation time for actual position filter [s] *)
    ACP10PAR_ENCOD3_S_FILTER_TE       :UINT  := 776;   (* (REAL) Encoder3: Extrapolation time for actual position filter [s] *)
    ACP10PAR_FUNCTION_BLOCK_CREATE    :UINT  := 777;   (* (UINT) Function block: Create a FB instance *)
    ACP10PAR_CMD_CYC_ABS_MOVE         :UINT  := 778;   (* (UINT) Basis movements: Start movement with cyclic position set values *)
    ACP10PAR_CMD_CYC_ABS_MOVE_VAX1    :UINT  := 779;   (* (UINT) VAX Basis movements: Start movement with cyclic position set values *)
    ACP10PAR_CYC_ABS_MOVE_PARID       :UINT  := 780;   (* (UINT) Basis movements: Parameter ID for cyclic set position *)
    ACP10PAR_CYC_ABS_MOVE_PARID_VAX1  :UINT  := 781;   (* (UINT) VAX Basis movements: Parameter ID for cyclic set position *)
    ACP10PAR_OVERRIDE_VAX1            :UINT  := 782;   (* (V_OVERRIDE_VAX1, A_OVERRIDE_VAX1) VAX Basis movements: Override *)
    ACP10PAR_V_OVERRIDE_VAX1          :UINT  := 783;   (* (INT) VAX Basis movements: Speed override *)
    ACP10PAR_A_OVERRIDE_VAX1          :UINT  := 784;   (* (INT) VAX Basis movements: Acceleration override *)
    ACP10PAR_DRUMSEQ_DO_DELAY_ON      :UINT  := 785;   (* (REAL) Drumsequencer: Delay time to switch output ON [s] *)
    ACP10PAR_DRUMSEQ_DO_DELAY_OFF     :UINT  := 786;   (* (REAL) Drumsequencer: Delay time to switch output OFF [s] *)
    ACP10PAR_CYCLIC_MON_PAR_INDEX     :UINT  := 787;   (* (USINT) Cyclic communication: Parameter index of monitor data from drive *)
    ACP10PAR_CYCLIC_MON_PARID         :UINT  := 788;   (* (UINT) Cyclic communication: Parameter ID of monitor data from drive *)
    ACP10PAR_TRIG1_RISE_EDGE_TIME     :UINT  := 789;   (* (UDINT) Time of rising edge trigger1 [us] *)
    ACP10PAR_TRIG1_FALL_EDGE_TIME     :UINT  := 790;   (* (UDINT) Time of falling edge trigger1 [us] *)
    ACP10PAR_TRIG2_RISE_EDGE_TIME     :UINT  := 791;   (* (UDINT) Time of rising edge trigger2 [us] *)
    ACP10PAR_TRIG2_FALL_EDGE_TIME     :UINT  := 792;   (* (UDINT) Time of falling edge trigger2 [us] *)
    ACP10PAR_STAT_ENABLE              :UINT  := 794;   (* (UDINT) Digital inputs: Status enable *)
    ACP10PAR_AUT_SL_FACTOR_ID         :UINT  := 795;   (* (UINT) Cam automat: Parameter ID for multiplication factor of slave axis *)
    ACP10PAR_AUT_SL_FACTOR_ID_VAX1    :UINT  := 796;   (* (UINT) VAX Cam automat: Parameter ID for multiplication factor of slave axis *)
    ACP10PAR_CYC_EXTSET_IPL_MODE      :UINT  := 797;   (* (USINT) Interpolation mode for cyclic external set value mode *)
    ACP10PAR_AUT_MSG_MODE_BITS        :UINT  := 798;   (* (UDINT) Cam automat: Control bits for message mode *)
    ACP10PAR_SGEN_SW_END_IGNORE_VAX1  :UINT  := 799;   (* (USINT) VAX Limit values: Ignore SW end positions *)
    ACP10PAR_AXLIM_T_CTRL_STOP_END    :UINT  := 800;   (* (REAL) Limit values: Minimum time for 'controller active' after movement stop [s] *)
    ACP10PAR_OBS_POS2_PARA_A0         :UINT  := 801;   (* (REAL) Position observer 2: Parameter A0 *)
    ACP10PAR_OBS_POS2_PARA_A1         :UINT  := 802;   (* (REAL) Position observer 2: Parameter A1 *)
    ACP10PAR_OBS_POS2_PARA_A2         :UINT  := 803;   (* (REAL) Position observer 2: Parameter A2 *)
    ACP10PAR_ELC_TRANSFER_LEVEL       :UINT  := 805;   (* (REAL) Encoderless control: Transition level [1/s] *)
    ACP10PAR_ELC_TRANSFER_ZONE        :UINT  := 806;   (* (REAL) Encoderless control: Transition zone [1/s] *)
    ACP10PAR_INVCL_A1                 :UINT  := 817;   (* (REAL) Inverter adjustment: Amplification factor *)
    ACP10PAR_INVCL_A2                 :UINT  := 818;   (* (REAL) Inverter adjustment: Exponent [1/A] *)
    ACP10PAR_ENCOD2_ADC1              :UINT  := 819;   (* (REAL) Encoder2: ADC1 value *)
    ACP10PAR_ENCOD2_ADC2              :UINT  := 820;   (* (REAL) Encoder2: ADC2 value *)
    ACP10PAR_ENCOD3_ADC1              :UINT  := 821;   (* (REAL) Encoder3: ADC1 value *)
    ACP10PAR_ENCOD3_ADC2              :UINT  := 822;   (* (REAL) Encoder3: ADC2 value *)
    ACP10PAR_ENCOD2_DIAG1             :UINT  := 823;   (* (REAL) Encoder2: Diagnosis 1 *)
    ACP10PAR_ISQ_FILTER1_C0_PARID     :UINT  := 824;   (* (UINT) CTRL Speed controller: Set current filter1 parameter ID for coefficient C0 *)
    ACP10PAR_ISQ_FILTER2_C0_PARID     :UINT  := 825;   (* (UINT) CTRL Speed controller: Set current filter2 parameter ID for coefficient C0 *)
    ACP10PAR_ISQ_FILTER3_C0_PARID     :UINT  := 826;   (* (UINT) CTRL Speed controller: Set current filter3 parameter ID for coefficient C0 *)
    ACP10PAR_ISQ_FILTER1_C1_PARID     :UINT  := 827;   (* (UINT) CTRL Speed controller: Set current filter1 parameter ID for coefficient C1 *)
    ACP10PAR_ISQ_FILTER2_C1_PARID     :UINT  := 828;   (* (UINT) CTRL Speed controller: Set current filter2 parameter ID for coefficient C1 *)
    ACP10PAR_ISQ_FILTER3_C1_PARID     :UINT  := 829;   (* (UINT) CTRL Speed controller: Set current filter3 parameter ID for coefficient C1 *)
    ACP10PAR_TPRED_TIME               :UINT  := 830;   (* (DINT) Temperature prediction: Observation time [us] *)
    ACP10PAR_TPRED_TIME_IV            :UINT  := 831;   (* (DINT) Temperature prediction: Observation period [us] *)
    ACP10PAR_TPRED_CNT                :UINT  := 832;   (* (DINT) Temperature prediction: Counter *)
    ACP10PAR_TEMP_HEATSINK_PRED       :UINT  := 833;   (* (REAL) Power stage: Heatsink temperature sensor: Predicted temperature [°C] *)
    ACP10PAR_TEMP_JUNCTION_PRED       :UINT  := 834;   (* (REAL) Power stage: Junction temperature model: Predicted temperature [°C] *)
    ACP10PAR_TEMP_BLEEDER_PRED        :UINT  := 835;   (* (REAL) Bleeder: Temperature model: Predicted temperature [°C] *)
    ACP10PAR_LOAD_MOTOR_MODEL_PRED    :UINT  := 836;   (* (REAL) Motor: Temperature model: Predicted load [%] *)
    ACP10PAR_TEMP_MOTOR_MODEL_PRED    :UINT  := 837;   (* (REAL) Motor: Temperature model: Predicted temperature [°C] *)
    ACP10PAR_LOAD_CONT_CURR_PRED      :UINT  := 838;   (* (REAL) Power stage: Continuous current: Predicted load [%] *)
    ACP10PAR_LOAD_PEAK_CURR_PRED      :UINT  := 839;   (* (REAL) Power stage: Peak current: Predicted load [%] *)
    ACP10PAR_LOAD_POWER_PRED          :UINT  := 840;   (* (REAL) Power stage: Continuous power: Predicted load [%] *)
    ACP10PAR_TEMP_HEATSINK_LIM        :UINT  := 841;   (* (REAL) Power stage: Heatsink temperature sensor: Limit temperature [°C] *)
    ACP10PAR_TEMP_JUNCTION_LIM        :UINT  := 842;   (* (REAL) Power stage: Junction temperature model: Limit temperature [°C] *)
    ACP10PAR_TEMP_BLEEDER_LIM         :UINT  := 843;   (* (REAL) Bleeder: Temperature model: Limit temperature [°C] *)
    ACP10PAR_MOTOR_TERMINAL_POWER     :UINT  := 844;   (* (REAL) Power stage: Connection X5 (Motor/Choke): Power [W] *)
    ACP10PAR_VCTRL_USD_REF_PARID      :UINT  := 845;   (* (UINT) CTRL Voltage controller: Parameter ID of set value stator voltage direct component  *)
    ACP10PAR_VCTRL_USQ_REF_PARID      :UINT  := 846;   (* (UINT) CTRL Voltage controller: Parameter ID of set value stator voltage quadrature component  *)
    ACP10PAR_VCTRL_RHO_REF_PARID      :UINT  := 847;   (* (UINT) CTRL Vector controller: Parameter-ID of commutation angle *)
    ACP10PAR_FWCTRL_TN                :UINT  := 848;   (* (REAL) CTRL Flux weakening: Integral action time [s] *)
    ACP10PAR_MOTOR_TAU_THERM          :UINT  := 849;   (* (REAL) Motor: Thermal time constant [s] *)
    ACP10PAR_UCTRL_KV                 :UINT  := 850;   (* (REAL) CTRL DC bus: Proportional amplification factor [A/V] *)
    ACP10PAR_UCTRL_UDC_REF            :UINT  := 851;   (* (REAL) CTRL DC bus: Set value voltage [V] *)
    ACP10PAR_UCTRL_UDC_REF_PARID      :UINT  := 853;   (* (UINT) CTRL DC bus: Parameter ID set value voltage *)
    ACP10PAR_TEMP_MODUL3              :UINT  := 859;   (* (REAL) Power stage: Temperature sensor 3: Temperature [°C] *)
    ACP10PAR_TEMP_MODUL4              :UINT  := 860;   (* (REAL) Power stage: Temperature sensor 4: Temperature [°C] *)
    ACP10PAR_TEMP_AIRIN               :UINT  := 861;   (* (REAL) Power stage: Temperature sensor 1: Temperature [°C] *)
    ACP10PAR_TEMP_AIROUT              :UINT  := 862;   (* (REAL) Power stage: Temperature sensor 2: Temperature [°C] *)
    ACP10PAR_VCTRL_I3                 :UINT  := 863;   (* (REAL) Power stage: Phase 3: Current [A] *)
    ACP10PAR_VCTRL_I0                 :UINT  := 864;   (* (REAL) Power stage: Summation current [A] *)
    ACP10PAR_MOTOR_AMB_TEMP_RATED     :UINT  := 865;   (* (REAL) Motor: Nominal ambient temperature [°C] *)
    ACP10PAR_MOTOR_TEST_MODE          :UINT  := 866;   (* (UDINT) Motor: Test mode *)
    ACP10PAR_MAINS_SWITCH_PARID       :UINT  := 867;   (* (UINT) Power mains: Parameter ID external main relay status *)
    ACP10PAR_POWERSTAGE_STAT          :UINT  := 868;   (* (UDINT) Power stage: Status *)
    ACP10PAR_ICTRL_MODE               :UINT  := 869;   (* (UDINT) CTRL Current: Mode *)
    ACP10PAR_FCTRL_MODE               :UINT  := 870;   (* (UDINT) CTRL Flux: Mode *)
    ACP10PAR_FCTRL_IM_LIM_MIN         :UINT  := 871;   (* (REAL) CTRL Flux:  Magnetizing current limiter: Lower limit [A] *)
    ACP10PAR_MOTOR_CURR_ROT_DIR       :UINT  := 872;   (* (USINT) Motor: Rotational direction of current *)
    ACP10PAR_UCTRL_TN                 :UINT  := 873;   (* (REAL) CTRL DC bus: Integral action time [s] *)
    ACP10PAR_PHASING_TIME             :UINT  := 874;   (* (REAL) Motor: Phasing: Time [s] *)
    ACP10PAR_BLEEDER_POWER_LOSS       :UINT  := 876;   (* (REAL) Bleeder: Power loss [W] *)
    ACP10PAR_ISQ_RIPPLE_MODE          :UINT  := 877;   (* (UDINT) ISQ-Ripple compensation: Mode    *)
    ACP10PAR_PIDENT_SPEED             :UINT  := 878;   (* (REAL) Parameter identification: Speed [Units/s] *)
    ACP10PAR_COMMUT_CURR_FFTIME       :UINT  := 880;   (* (REAL) CTRL vector: Current feed forward time [s] *)
    ACP10PAR_ISQ_RIPPLE               :UINT  := 881;   (* (REAL) ISQ-Ripple compensation: Current [A] *)
    ACP10PAR_ISQ_RIPPLE_DAT_IDX       :UINT  := 882;   (* (DINT) ISQ-Ripple compensation: Data: Index *)
    ACP10PAR_ISQ_RIPPLE_DAT_F         :UINT  := 883;   (* (REAL) ISQ-Ripple compensation: Data: Frequency [cps] *)
    ACP10PAR_ISQ_RIPPLE_DAT_A         :UINT  := 884;   (* (REAL) ISQ-Ripple compensation: Data: Parameter A *)
    ACP10PAR_ISQ_RIPPLE_DAT_PHI       :UINT  := 885;   (* (REAL) ISQ-Ripple compensation: Data: Angle [rad] *)
    ACP10PAR_ISQ_RIPPLE_SPEC_IDX      :UINT  := 886;   (* (DINT) ISQ-Ripple compensation: Data: Index of spectrum   *)
    ACP10PAR_ENCOD_RANGE_REV          :UINT  := 887;   (* (UDINT) Encoder1: Absolute measuring range [Rev.] *)
    ACP10PAR_ENCOD2_RANGE_REV         :UINT  := 888;   (* (UDINT) Encoder2: Absolute measuring range [Rev.] *)
    ACP10PAR_ENCOD3_RANGE_REV         :UINT  := 889;   (* (UDINT) Encoder3: Absolute measuring range [Rev.] *)
    ACP10PAR_SCTRL_SPEED_REF_SUM      :UINT  := 890;   (* (REAL) CTRL Speed controller: Sum of the set speeds [1/s] *)
    ACP10PAR_ENCOD_OUTPUT_FREQUENCY   :UINT  := 891;   (* (UDINT) Encoder1: Maximal expected output frequency [1/s] *)
    ACP10PAR_ENCOD_OUTPUT_STAGE       :UINT  := 892;   (* (USINT) Encoder1: Output stage *)
    ACP10PAR_ENCOD_DIAG2              :UINT  := 893;   (* (REAL) Encoder1: Diagnosis 2 *)
    ACP10PAR_ENCOD_DIAG3              :UINT  := 894;   (* (REAL) Encoder1: Diagnosis 3 *)
    ACP10PAR_ENCOD_TEMP               :UINT  := 895;   (* (REAL) Encoder1: Temperature [°C] *)
    ACP10PAR_ENCOD_CRC_POLYNOMIAL     :UINT  := 896;   (* (UDINT) Encoder1: CRC Polynomial *)
    ACP10PAR_ENCOD2_CRC_POLYNOMIAL    :UINT  := 897;   (* (UDINT) Encoder2: CRC Polynomial *)
    ACP10PAR_ENCOD_ERR_CNT            :UINT  := 898;   (* (UDINT) Encoder1: Error count *)
    ACP10PAR_ENCOD3_CRC_POLYNOMIAL    :UINT  := 899;   (* (UDINT) Encoder3: CRC Polynomial *)
    ACP10PAR_AUT_STATUS               :UINT  := 900;   (* (USINT) Cam automat: Status *)
    ACP10PAR_AUT_STATUS_VAX1          :UINT  := 901;   (* (USINT) VAX Cam automat: Status *)
    ACP10PAR_MA4_CYCLIC_POS           :UINT  := 902;   (* (DINT) Network coupling: Cyclic position master4 *)
    ACP10PAR_MA5_CYCLIC_POS           :UINT  := 903;   (* (DINT) Network coupling: Cyclic position master5 *)
    ACP10PAR_CONFIG_MA4_CYCLIC_POS    :UINT  := 904;   (* (STATION_NUMBER_CYCLIC, MA_PARID_CYCLIC_POS) Network coupling: Configure station to receive on MA4_CYCLIC_POS *)
    ACP10PAR_CONFIG_MA5_CYCLIC_POS    :UINT  := 905;   (* (STATION_NUMBER_CYCLIC, MA_PARID_CYCLIC_POS) Network coupling: Configure station to receive on MA5_CYCLIC_POS *)
    ACP10PAR_MA4_CYCLIC_IPL_MODE      :UINT  := 906;   (* (USINT) Network coupling: Interpolation mode for cyclic position master4 *)
    ACP10PAR_MA5_CYCLIC_IPL_MODE      :UINT  := 907;   (* (USINT) Network coupling: Interpolation mode for cyclic position master5 *)
    ACP10PAR_AXLIM_T_STOP_END         :UINT  := 908;   (* (REAL) Limit values: Minimum time induction stop [s] *)
    ACP10PAR_CYCLIC_TODRV_COUNT       :UINT  := 909;   (* (UDINT) Cyclic communication: Count of data to drive *)
    ACP10PAR_MOVE_CONF_IDX            :UINT  := 910;   (* (USINT) Move configuration: Index of parameter record *)
    ACP10PAR_MOVE_CONF_V_POS          :UINT  := 911;   (* (REAL) Move configuration: Maximum speed in positive direction [Units/s] *)
    ACP10PAR_MOVE_CONF_V_NEG          :UINT  := 912;   (* (REAL) Move configuration: Maximum speed in negative direction [Units/s] *)
    ACP10PAR_MOVE_CONF_A1_POS         :UINT  := 913;   (* (REAL) Move configuration: Maximum acceleration in positive direction [Units/s²] *)
    ACP10PAR_MOVE_CONF_A2_POS         :UINT  := 914;   (* (REAL) Move configuration: Maximum deceleration in positive direction [Units/s²] *)
    ACP10PAR_MOVE_CONF_A1_NEG         :UINT  := 915;   (* (REAL) Move configuration: Maximum acceleration in negative direction [Units/s²] *)
    ACP10PAR_MOVE_CONF_A2_NEG         :UINT  := 916;   (* (REAL) Move configuration: Maximum deceleration in negative direction [Units/s²] *)
    ACP10PAR_AUT_MOVE_CONF_IDX        :UINT  := 917;   (* (USINT) Cam automat: Index of parameter record of move configuration *)
    ACP10PAR_AUT_TRIG1_T_DELAY_VAX1   :UINT  := 918;   (* (DINT) VAX Cam automat: Trigger1 delay time [us] *)
    ACP10PAR_AUT_TRIG2_T_DELAY_VAX1   :UINT  := 919;   (* (DINT) VAX Cam automat: Trigger2 delay time [us] *)
    ACP10PAR_AUT_MODE_BITS            :UINT  := 920;   (* (UDINT) Cam automat: Control bits for function mode *)
    ACP10PAR_AUT_MODE_BITS_VAX1       :UINT  := 921;   (* (UDINT) VAX Cam automat: Control bits for function mode *)
    ACP10PAR_CYCLIC_DP_DATA_OFFSET    :UINT  := 922;   (* (UINT) Network coupling: Receive data point: Bit offset within the data field of the frame *)
    ACP10PAR_CYCLIC_DP_DATA_TYPE      :UINT  := 923;   (* (UINT) Network coupling: Receive data point: Data type *)
    ACP10PAR_AUT_S_SHIFT_START        :UINT  := 924;   (* (DINT) Cam automat: Position shift at the start [Units] *)
    ACP10PAR_CMD_MOVE_CONF_IDX        :UINT  := 925;   (* (USINT) Basis movements: Index of parameter record of move configuration *)
    ACP10PAR_AUT_S_START_MODE         :UINT  := 926;   (* (USINT) Cam automat: Mode for event type ncS_START *)
    ACP10PAR_AUT_S_START_MODE_VAX1    :UINT  := 927;   (* (USINT) VAX Cam automat: Mode for event type ncS_START *)
    ACP10PAR_MODULO_PERIOD            :UINT  := 928;   (* (DINT) Basis movements: Position period [Units] *)
    ACP10PAR_MODULO_OFFSET            :UINT  := 929;   (* (DINT) Basis movements: Offset of actual period [Units] *)
    ACP10PAR_MODULO_DIRECTION         :UINT  := 930;   (* (USINT) Basis movements: Movement direction in relation to the position period *)
    ACP10PAR_CMD_MODULO_MOVE          :UINT  := 931;   (* (BASIS_MOVE_S_ABS, BASIS_MOVE_MODE) Basis movements: Start movement with target position of a period *)
    ACP10PAR_MODULO_PERIOD_VAX1       :UINT  := 932;   (* (DINT) VAX Basis movements: Position period [Units] *)
    ACP10PAR_MODULO_OFFSET_VAX1       :UINT  := 933;   (* (DINT) VAX Basis movements: Offset of actual period [Units] *)
    ACP10PAR_MODULO_DIRECTION_VAX1    :UINT  := 934;   (* (USINT) VAX Basis movements: Movement direction in relation to the position period *)
    ACP10PAR_CMD_MODULO_MOVE_VAX1     :UINT  := 935;   (* (BASIS_MOVE_S_ABS_VAX1) VAX Basis movements: Start movement with target position of a period *)
    ACP10PAR_AUT_EVENT_ID1            :UINT  := 936;   (* (UINT) Cam automat: Parameter ID1 for event *)
    ACP10PAR_AUT_EVENT_ID2            :UINT  := 937;   (* (UINT) Cam automat: Parameter ID2 for event *)
    ACP10PAR_AUT_EVENT_ID3            :UINT  := 938;   (* (UINT) Cam automat: Parameter ID3 for event *)
    ACP10PAR_AUT_EVENT_ID4            :UINT  := 939;   (* (UINT) Cam automat: Parameter ID4 for event *)
    ACP10PAR_AUT_EVENT_ID1_VAX1       :UINT  := 940;   (* (UINT) VAX Cam automat: Parameter ID1 for event *)
    ACP10PAR_AUT_EVENT_ID2_VAX1       :UINT  := 941;   (* (UINT) VAX Cam automat: Parameter ID2 for event *)
    ACP10PAR_AUT_EVENT_ID3_VAX1       :UINT  := 942;   (* (UINT) VAX Cam automat: Parameter ID3 for event *)
    ACP10PAR_AUT_EVENT_ID4_VAX1       :UINT  := 943;   (* (UINT) VAX Cam automat: Parameter ID4 for event *)
    ACP10PAR_REFERENCE_SWITCH_PARID   :UINT  := 944;   (* (UINT) Digital inputs: Parameter ID for reference switch *)
    ACP10PAR_POS_LIMIT_SWITCH_PARID   :UINT  := 945;   (* (UINT) Digital inputs: Parameter ID for positive end switch *)
    ACP10PAR_NEG_LIMIT_SWITCH_PARID   :UINT  := 946;   (* (UINT) Digital inputs: Parameter ID for negative end switch *)
    ACP10PAR_MA1_SEND_DATA_OFFSET     :UINT  := 947;   (* (UINT) Network coupling: Send data master1: Bit offset within the data field of the frame *)
    ACP10PAR_MA4_CYCLIC_ERROR_STATUS  :UINT  := 948;   (* (USINT) Network coupling: Error status for cyclic position master4 *)
    ACP10PAR_MA5_CYCLIC_ERROR_STATUS  :UINT  := 949;   (* (USINT) Network coupling: Error status for cyclic position master5 *)
    ACP10PAR_KSCTRL_I                 :UINT  := 950;   (* (REAL) Induction stop: Short circuit current (synchronous motor) [A] *)
    ACP10PAR_ENCOD2_TRANS_RATIO       :UINT  := 951;   (* (REAL) Encoder2: Resolver transmission ratio *)
    ACP10PAR_ENCOD3_TRANS_RATIO       :UINT  := 952;   (* (REAL) Encoder3: Resolver transmission ratio *)
    ACP10PAR_ENCOD3_DIAG1             :UINT  := 953;   (* (REAL) Encoder3: Diagnosis 1 *)
    ACP10PAR_FWCTRL_ISD0              :UINT  := 954;   (* (REAL) CTRL Flux weakening: Demagnetizing current [A] *)
    ACP10PAR_UFCTRL_SLIP_COMP_K       :UINT  := 957;   (* (REAL) CTRL U/f: Slip compensation: Multiplication factor of compensated frequency *)
    ACP10PAR_FWCTRL_SPEED0            :UINT  := 959;   (* (REAL) CTRL Flux weakening: Start speed flux weakening [1/s] *)
    ACP10PAR_PIDENT_WIND_CROSS_SECT   :UINT  := 974;   (* (REAL) Parameter identification: Motor: Line cross section [mm²] *)
    ACP10PAR_PIDENT_MOTOR_TYPE        :UINT  := 975;   (* (UINT) Parameter identification: Motor: Type *)
    ACP10PAR_PIDENT_POLEPAIRS         :UINT  := 976;   (* (USINT) Parameter identification: Motor: Number of polepairs *)
    ACP10PAR_PIDENT_VOLTAGE_RATED     :UINT  := 977;   (* (REAL) Parameter identification: Motor: Rated voltage [V] *)
    ACP10PAR_PIDENT_VOLTAGE_CONST     :UINT  := 978;   (* (REAL) Parameter identification: Motor: Voltage constant [mVmin] *)
    ACP10PAR_PIDENT_SPEED_RATED       :UINT  := 979;   (* (REAL) Parameter identification: Motor: Rated speed [1/min] *)
    ACP10PAR_PIDENT_SPEED_MAX         :UINT  := 980;   (* (REAL) Parameter identification: Motor: Maximum speed [1/min] *)
    ACP10PAR_PIDENT_TORQ_STALL        :UINT  := 981;   (* (REAL) Parameter identification: Motor: Stall torque [Nm] *)
    ACP10PAR_PIDENT_TORQ_RATED        :UINT  := 982;   (* (REAL) Parameter identification: Motor: Rated torque [Nm] *)
    ACP10PAR_PIDENT_TORQ_MAX          :UINT  := 983;   (* (REAL) Parameter identification: Motor: Peak torque [Nm] *)
    ACP10PAR_PIDENT_TORQ_CONST        :UINT  := 984;   (* (REAL) Parameter identification: Motor: Torque constant [Nm/A] *)
    ACP10PAR_PIDENT_CURR_STALL        :UINT  := 985;   (* (REAL) Parameter identification: Motor: Stall current [A] *)
    ACP10PAR_PIDENT_CURR_RATED        :UINT  := 986;   (* (REAL) Parameter identification: Motor: Rated current [A] *)
    ACP10PAR_PIDENT_CURR_MAX          :UINT  := 987;   (* (REAL) Parameter identification: Motor: Peak current [A] *)
    ACP10PAR_PIDENT_MAGNETIZING_CURR  :UINT  := 988;   (* (REAL) Parameter identification: Motor: Magnetizing current [A] *)
    ACP10PAR_PIDENT_COS_PHI           :UINT  := 989;   (* (REAL) Parameter identification: Motor: Active power factor *)
    ACP10PAR_PIDENT_FREQ_RATED        :UINT  := 990;   (* (REAL) Parameter identification: Motor: Rated frequency [Hz] *)
    ACP10PAR_PIDENT_PHASE             :UINT  := 991;   (* (USINT) Parameter identification: Motor: Phase *)
    ACP10PAR_PIDENT_INVCL_A1          :UINT  := 992;   (* (REAL) Parameter identification: Inverter: Amplification factor *)
    ACP10PAR_PIDENT_INVCL_A2          :UINT  := 993;   (* (REAL) Parameter identification: Inverter: Exponent [1/A] *)
    ACP10PAR_PIDENT_MODE              :UINT  := 995;   (* (USINT) Parameter identification: Mode *)
    ACP10PAR_PIDENT_STATE             :UINT  := 996;   (* (USINT) Parameter identification: State *)
    ACP10PAR_CMD_PIDENT               :UINT  := 997;   (* (UINT) Parameter identification: Command *)
    ACP10PAR_PIDENT_FIT               :UINT  := 998;   (* (REAL) Parameter identification: Quality [%] *)
    ACP10PAR_ENCOD_POS_DATA           :UINT  := 999;   (* (DATA) Encoder: Position data block *)
    ACP10PAR_BRMOD_BSL                :UINT  := 1001;  (* (BRMOD) System administration: Module: BsLoader *)
    ACP10PAR_BRMOD_NCSYS              :UINT  := 1002;  (* (BRMOD) System administration: Module: NC operating System *)
    ACP10PAR_PAR_REQU_DATA_OFFSET     :UINT  := 1004;  (* (UINT) System administration: Parameter Request: Bit offset within the data field of the frame *)
    ACP10PAR_PAR_RESP_DATA_OFFSET     :UINT  := 1005;  (* (UINT) System administration: Parameter Response: Bit offset within the data field of the frame *)
    ACP10PAR_CYC_TODRV_DATA_OFFSET    :UINT  := 1006;  (* (UINT) Cyclic communication: Data to drive: Bit offset within the data field of the frame *)
    ACP10PAR_CYC_FRDRV_DATA_OFFSET    :UINT  := 1007;  (* (UINT) Cyclic communication: Data from drive: Bit offset within the data field of the frame *)
    ACP10PAR_CYC_MON_DATA_OFFSET      :UINT  := 1008;  (* (UINT) Cyclic communication: Monitor data from drive: Bit offset within the data field of the frame *)
    ACP10PAR_CMD_MOVE_HALT_A2         :UINT  := 1009;  (* (REAL) Basis movements: Halt [Units/s²] *)
    ACP10PAR_BRMOD_VERSION            :UINT  := 1010;  (* (UINT) System administration: Module: Version *)
    ACP10PAR_BRMOD_DATE_TIME          :UINT  := 1011;  (* (T5) System administration: Module: Date and time *)
    ACP10PAR_BRMOD_RD_SECTION         :UINT  := 1013;  (* (DINT) System administration: Module: Section for read access *)
    ACP10PAR_EVMOVE_MODE              :UINT  := 1015;  (* (UINT) Basis movements: Event start: Mode *)
    ACP10PAR_EVMOVE_EV_PARID          :UINT  := 1016;  (* (UINT) Basis movements: Event start: Parameter ID for event *)
    ACP10PAR_EVMOVE_S_IN_PARID        :UINT  := 1017;  (* (UINT) Basis movements: event start: Parameter ID for target position *)
    ACP10PAR_EVMOVE_V_IN_PARID        :UINT  := 1018;  (* (UINT) Basis movements: event start: Parameter ID for target speed *)
    ACP10PAR_EVMOVE_WR_CMD            :UINT  := 1019;  (* (UINT) Basis movements: Event start: Command parameter ID *)
    ACP10PAR_EVMOVE_STATUS            :UINT  := 1020;  (* (USINT) Basis movements: Event start: Status *)
    ACP10PAR_EVMOVE_MODE_VAX1         :UINT  := 1021;  (* (UINT) VAX Basis movements: Event start: Mode *)
    ACP10PAR_EVMOVE_EV_PARID_VAX1     :UINT  := 1022;  (* (UINT) VAX Basis movements: Event start: Parameter ID for event *)
    ACP10PAR_EVMOVE_S_IN_PARID_VAX1   :UINT  := 1023;  (* (UINT) VAX Basis movements: Event start: Parameter ID for target position *)
    ACP10PAR_EVMOVE_V_IN_PARID_VAX1   :UINT  := 1024;  (* (UINT) VAX Basis movements: Event start: Parameter ID for target speed *)
    ACP10PAR_EVMOVE_WR_CMD_VAX1       :UINT  := 1025;  (* (UINT) VAX Basis movements: Event start: Command parameter ID *)
    ACP10PAR_EVMOVE_STATUS_VAX1       :UINT  := 1026;  (* (USINT) VAX Basis movements: Event start: Status *)
    ACP10PAR_CMD_MOVE_HALT_A2_VAX1    :UINT  := 1027;  (* (REAL) VAX Basis movements: Halt [Units/s²] *)
    ACP10PAR_CMD_V_SET_MOVE           :UINT  := 1028;  (* (NIL) Basis movements: Start movement with current speed *)
    ACP10PAR_CMD_V_SET_MOVE_VAX1      :UINT  := 1029;  (* (NIL) VAX Basis movements: Start movement with current speed *)
    ACP10PAR_ISQ_FILTER1_TYPE         :UINT  := 1030;  (* (UINT) CTRL Speed controller: Set current filter1 type *)
    ACP10PAR_ISQ_FILTER2_TYPE         :UINT  := 1031;  (* (UINT) CTRL Speed controller: Set current filter2 type *)
    ACP10PAR_ISQ_FILTER3_TYPE         :UINT  := 1032;  (* (UINT) CTRL Speed controller: Set current filter3 type *)
    ACP10PAR_ISQ_FILTER1_A0           :UINT  := 1033;  (* (REAL) CTRL Speed controller: Set current filter1 coefficient A0 *)
    ACP10PAR_ISQ_FILTER2_A0           :UINT  := 1034;  (* (REAL) CTRL Speed controller: Set current filter2 coefficient A0 *)
    ACP10PAR_ISQ_FILTER3_A0           :UINT  := 1035;  (* (REAL) CTRL Speed controller: Set current filter3 coefficient A0 *)
    ACP10PAR_ISQ_FILTER1_A1           :UINT  := 1036;  (* (REAL) CTRL Speed controller: Set current filter1 coefficient A1 *)
    ACP10PAR_ISQ_FILTER2_A1           :UINT  := 1037;  (* (REAL) CTRL Speed controller: Set current filter2 coefficient A1 *)
    ACP10PAR_ISQ_FILTER3_A1           :UINT  := 1038;  (* (REAL) CTRL Speed controller: Set current filter3 coefficient A1 *)
    ACP10PAR_ISQ_FILTER1_B0           :UINT  := 1039;  (* (REAL) CTRL Speed controller: Set current filter1 coefficient B0 *)
    ACP10PAR_ISQ_FILTER2_B0           :UINT  := 1040;  (* (REAL) CTRL Speed controller: Set current filter2 coefficient B0 *)
    ACP10PAR_ISQ_FILTER3_B0           :UINT  := 1041;  (* (REAL) CTRL Speed controller: Set current filter3 coefficient B0 *)
    ACP10PAR_ISQ_FILTER1_B1           :UINT  := 1042;  (* (REAL) CTRL Speed controller: Set current filter1 coefficient B1 *)
    ACP10PAR_ISQ_FILTER2_B1           :UINT  := 1043;  (* (REAL) CTRL Speed controller: Set current filter2 coefficient B1 *)
    ACP10PAR_ISQ_FILTER3_B1           :UINT  := 1044;  (* (REAL) CTRL Speed controller: Set current filter3 coefficient B1 *)
    ACP10PAR_ISQ_FILTER1_B2           :UINT  := 1045;  (* (REAL) CTRL Speed controller: Set current filter1 coefficient B2 *)
    ACP10PAR_ISQ_FILTER2_B2           :UINT  := 1046;  (* (REAL) CTRL Speed controller: Set current filter2 coefficient B2 *)
    ACP10PAR_ISQ_FILTER3_B2           :UINT  := 1047;  (* (REAL) CTRL Speed controller: Set current filter3 coefficient B2 *)
    ACP10PAR_ENCOD_TRANS_RATIO        :UINT  := 1048;  (* (REAL) Encoder1: Resolver transmission ratio *)
    ACP10PAR_SGEN_S_SET_FRAC          :UINT  := 1049;  (* (REAL) CTRL Position controller: Input set position fractional part [Units] *)
    ACP10PAR_CMD_SW_RESET             :UINT  := 1050;  (* (NIL) System administration: SW Reset *)
    ACP10PAR_CMD_BOOT_STATE           :UINT  := 1051;  (* (UINT) System administration: Change Boot State *)
    ACP10PAR_BOOT_STATE               :UINT  := 1052;  (* (UINT) System administration: Boot State *)
    ACP10PAR_CMD_BURN_SYSMOD          :UINT  := 1053;  (* (NIL) System administration: Module: Burn *)
    ACP10PAR_STAT_BURN_SYSMOD         :UINT  := 1054;  (* (USINT) System administration: Module: Burn status *)
    ACP10PAR_BSL_TEST_CMD             :UINT  := 1055;  (* (UINT) System administration: Test command *)
    ACP10PAR_BSL_TEST_STATUS          :UINT  := 1056;  (* (UINT) System administration: Test status *)
    ACP10PAR_BSL_TEST_PAR             :UINT  := 1057;  (* (UDINT) System administration: Test parameter *)
    ACP10PAR_ENCOD2_HOMING_OFFSET     :UINT  := 1058;  (* (DINT) Encoder2: Homing offset [Units] *)
    ACP10PAR_ENCOD3_HOMING_OFFSET     :UINT  := 1059;  (* (DINT) Encoder3: Homing offset [Units] *)
    ACP10PAR_RD_BLOCK_SEGM            :UINT  := 1060;  (* (BYTES6) Data block transfer: Read data block segment *)
    ACP10PAR_RD_BLOCK_LAST_SEGM       :UINT  := 1061;  (* (BYTES6) Data block transfer: Read last data block segment *)
    ACP10PAR_CMD_RD_BLOCK_ABORT       :UINT  := 1062;  (* (NIL) Data block transfer: Abort data block read access *)
    ACP10PAR_RD_BLOCK_OFFSET          :UINT  := 1063;  (* (UDINT) Data block transfer: Offset for data block read access *)
    ACP10PAR_RD_BLOCK_BYTES           :UINT  := 1064;  (* (UDINT) Data block transfer: Remaining bytes for data block read access *)
    ACP10PAR_CMD_MOVE_STOP_A2         :UINT  := 1065;  (* (REAL) Movement stop: Command stop movement [Units/s²] *)
    ACP10PAR_CMD_MOVE_STOP_A2_VAX1    :UINT  := 1066;  (* (REAL) VAX Movement stop: Command stop movement [Units/s²] *)
    ACP10PAR_AUT_SL_S                 :UINT  := 1067;  (* (DINT) Cam automat: Position of slave axis [Units] *)
    ACP10PAR_AUT_SL_S_VAX1            :UINT  := 1068;  (* (DINT) VAX Cam automat: Position of slave axis [Units] *)
    ACP10PAR_WR_BLOCK_SEGM            :UINT  := 1070;  (* (BYTES6) Data block transfer: Write data block segment *)
    ACP10PAR_WR_BLOCK_LAST_SEGM       :UINT  := 1071;  (* (BYTES6) Data block transfer: Write last data block segment *)
    ACP10PAR_CMD_WR_BLOCK_ABORT       :UINT  := 1072;  (* (NIL) Data block transfer: Abort data block write access *)
    ACP10PAR_ENCOD2_CMD_HOMING        :UINT  := 1073;  (* (HOMING_S, HOMING_MODE, HOMING_MODE_BITS) Encoder2: Command start homing procedure *)
    ACP10PAR_ENCOD3_CMD_HOMING        :UINT  := 1074;  (* (HOMING_S, HOMING_MODE, HOMING_MODE_BITS) Encoder3: Command start homing procedure *)
    ACP10PAR_AUT_MA_CAM_REL           :UINT  := 1075;  (* (REAL) Cam automat: Relative distance of master axis within cam [Units] *)
    ACP10PAR_AUT_MA_CAM_REL_VAX1      :UINT  := 1076;  (* (REAL) VAX Cam automat: Relative distance of master axis within cam [Units] *)
    ACP10PAR_AUT_MA_CAM_LEADIN        :UINT  := 1077;  (* (DINT) Cam automat: Relative entry distance of master axis within cam profile [Units] *)
    ACP10PAR_AUT_MA_CAM_LEADIN_VAX1   :UINT  := 1078;  (* (DINT) VAX Cam automat: Relative entry distance of master axis within cam profile [Units] *)
    ACP10PAR_AUT_MSG_MODE_BITS_VAX1   :UINT  := 1079;  (* (UDINT) VAX Cam automat: Control bits for message mode *)
    ACP10PAR_TRACE_DATA               :UINT  := 1100;  (* (DATA) Trace: Data *)
    ACP10PAR_TUNE_I_MAX_PERCENT       :UINT  := 1101;  (* (REAL) Autotuning: Maximum percentage for rated current [%] *)
    ACP10PAR_TUNE_V_MAX_PERCENT       :UINT  := 1102;  (* (REAL) Autotuning: Maximum percentage for speed [%] *)
    ACP10PAR_TUNE_S_MAX               :UINT  := 1103;  (* (REAL) Autotuning: Maximum movement distance [Units] *)
    ACP10PAR_TUNE_DS_MAX              :UINT  := 1104;  (* (REAL) Autotuning: Maximum lag error [Units] *)
    ACP10PAR_TUNE_SIGNAL_PERIODS      :UINT  := 1106;  (* (UDINT) Autotuning: Number of excitation periods *)
    ACP10PAR_TUNE_DRIVE_INERTIA       :UINT  := 1109;  (* (REAL) Autotuning: Estimated drive inertia [kgm^2] *)
    ACP10PAR_TUNE_SIGNAL_ORDER        :UINT  := 1110;  (* (UDINT) Autotuning: Order of excitation signal *)
    ACP10PAR_TUNE_OPTION_BITS         :UINT  := 1111;  (* (UDINT) Autotuning: Option control bits *)
    ACP10PAR_TUNE_KV_PERCENT          :UINT  := 1112;  (* (REAL) Autotuning: Percentage for proportional amplification [%] *)
    ACP10PAR_TUNE_RESONANCE_FACTOR    :UINT  := 1113;  (* (REAL) Autotuning: Factor for detection of a resonance *)
    ACP10PAR_TUNE_INERTIA_F_LOWER     :UINT  := 1114;  (* (REAL) Autotuning: Lower frequency for estimation of drive inertia [Hz] *)
    ACP10PAR_TUNE_INERTIA_F_UPPER     :UINT  := 1115;  (* (REAL) Autotuning: Upper frequency for estimation of drive inertia [Hz] *)
    ACP10PAR_TUNE_DELAY_TIME          :UINT  := 1116;  (* (REAL) Autotuning: Delay time during transients [s] *)
    ACP10PAR_SIGEN_CHIRP_START_FREQ   :UINT  := 1117;  (* (REAL) Signal generator: Start frequency of chirp signal [Hz] *)
    ACP10PAR_SIGEN_CHIRP_STOP_FREQ    :UINT  := 1118;  (* (REAL) Signal generator: Stop frequency of chirp signal [Hz] *)
    ACP10PAR_PIDENT_SUB_MODE          :UINT  := 1125;  (* (UDINT) Parameter identification: Sub-mode *)
    ACP10PAR_PIDENT_STATE_BITS        :UINT  := 1126;  (* (UDINT) Parameter identification: State bits *)
    ACP10PAR_ISQ_RIPPLE_DAT_A_POS     :UINT  := 1127;  (* (REAL) ISQ-Ripple compensation: Data: Amplitude for quadrant I [A] *)
    ACP10PAR_ISQ_RIPPLE_DAT_PHI_POS   :UINT  := 1128;  (* (REAL) ISQ-Ripple compensation: Data: Angle for quadrant I *)
    ACP10PAR_ISQ_RIPPLE_DAT_A_NEG     :UINT  := 1129;  (* (REAL) ISQ-Ripple compensation: Data: Amplitude for quadrant III [A] *)
    ACP10PAR_ISQ_RIPPLE_DAT_PHI_NEG   :UINT  := 1130;  (* (REAL) ISQ-Ripple compensation: Data: Angle for quadrant III *)
    ACP10PAR_ISQ_RIPPLE_REFSYSTEM     :UINT  := 1131;  (* (USINT) ISQ-Ripple compensation: Reference system *)
    ACP10PAR_ISQ_RIPPLE_DAT_B         :UINT  := 1132;  (* (REAL) ISQ-Ripple compensation: Data:  Parameter B *)
    ACP10PAR_ISQ_RIPPLE_POS_OFFSET    :UINT  := 1134;  (* (REAL) ISQ-Ripple compensation: Position offset [rad] *)
    ACP10PAR_ENCOD_MODE               :UINT  := 1135;  (* (UDINT) Encoder: Mode *)
    ACP10PAR_ENCOD2_MODE              :UINT  := 1136;  (* (UDINT) Encoder2: Mode *)
    ACP10PAR_ENCOD3_MODE              :UINT  := 1137;  (* (UDINT) Encoder3: Mode *)
    ACP10PAR_PIDENT_ITER_CNT          :UINT  := 1138;  (* (UDINT) Parameter identification: Iteration counter *)
    ACP10PAR_PMET_MODE                :UINT  := 1139;  (* (USINT) PowerMeter: Mode *)
    ACP10PAR_PMET_TIME_IV             :UINT  := 1140;  (* (DINT) PowerMeter: Observation period [us] *)
    ACP10PAR_PMET_TRIG_PARID          :UINT  := 1141;  (* (UINT) PowerMeter: Trigger parameter-ID *)
    ACP10PAR_PMET_CYCLE_TIME          :UINT  := 1142;  (* (DINT) PowerMeter: Actual cycle time [us] *)
    ACP10PAR_PMET_CNT                 :UINT  := 1143;  (* (UINT) PowerMeter: Cycle counter *)
    ACP10PAR_PMET_P_MEAN              :UINT  := 1144;  (* (REAL) PowerMeter: Mean active power  [W] *)
    ACP10PAR_PMET_P_MIN               :UINT  := 1145;  (* (REAL) PowerMeter: Minimum active power [W] *)
    ACP10PAR_PMET_P_MAX               :UINT  := 1146;  (* (REAL) PowerMeter: Maximum active power  [W] *)
    ACP10PAR_PMET_Q_MEAN              :UINT  := 1147;  (* (REAL) PowerMeter: Mean reactive power [var] *)
    ACP10PAR_PMET_E_CONS              :UINT  := 1148;  (* (REAL) PowerMeter: Consumed energy [Ws] *)
    ACP10PAR_PMET_E_PROD              :UINT  := 1149;  (* (REAL) PowerMeter: Produced energy [Ws] *)
    ACP10PAR_AXLIM_DV_STOP            :UINT  := 1150;  (* (REAL) Limit values: Speed error for stop of a movement [1/s] *)
    ACP10PAR_MAINS_U1                 :UINT  := 1151;  (* (REAL) Power mains: Phase 1: Voltage [V] *)
    ACP10PAR_MAINS_U2                 :UINT  := 1152;  (* (REAL) Power mains: Phase 2: Voltage [V] *)
    ACP10PAR_MAINS_U3                 :UINT  := 1153;  (* (REAL) Power mains: Phase 3: Voltage [V] *)
    ACP10PAR_UDC_RECT_CURR            :UINT  := 1154;  (* (REAL) CTRL DC bus: Rectifier: DC-: Current [A] *)
    ACP10PAR_UDC_CHOP_CURR            :UINT  := 1155;  (* (REAL) CTRL Chopper: Current [A] *)
    ACP10PAR_FCTRL_IM_REF_PARID       :UINT  := 1156;  (* (UINT) CTRL Flux: Parameter-ID Set magnetizing current *)
    ACP10PAR_TEMPSENS_RESISTANCE      :UINT  := 1157;  (* (REAL) Temperature sensor: Resistance [Ohm] *)
    ACP10PAR_TEMPSENS_PARID           :UINT  := 1158;  (* (UINT) Temperature sensor: Parameter-ID Resistance *)
    ACP10PAR_SCTRL_SPEED_ERROR        :UINT  := 1159;  (* (REAL) CTRL Speed controller: Speed error [1/s] *)
    ACP10PAR_POWER_STAGE_NO           :UINT  := 1162;  (* (USINT) Power stage: Number of power stages *)
    ACP10PAR_AXLIM_DV_STOP_MODE       :UINT  := 1163;  (* (UDINT) Limit values: Speed error monitoring: Mode *)
    ACP10PAR_PLIM_POWER_LIM           :UINT  := 1165;  (* (REAL) Power limiter: Limit value [W] *)
    ACP10PAR_ICTRL_AUTO_CONFIG        :UINT  := 1166;  (* (UINT) CTRL Current: Automatic configuration *)
    ACP10PAR_ENCOD_DIAG_ID            :UINT  := 1167;  (* (USINT) Encoder1: Diagnosis ID *)
    ACP10PAR_ENCOD_DIAG               :UINT  := 1168;  (* (USINT) Encoder1: Diagnosis *)
    ACP10PAR_POWERFAIL_DETECT_RATIO   :UINT  := 1169;  (* (REAL) CTRL DC bus: Minimum-to-nominal voltage ratio *)
    ACP10PAR_SLOT_NO                  :UINT  := 1170;  (* (USINT) Number of modul slots *)
    ACP10PAR_EPROM_ORDERTEXT          :UINT  := 1171;  (* (STR32) Order text *)
    ACP10PAR_TEMP_MOTOR_MODEL_LIM     :UINT  := 1172;  (* (REAL) Motor: Temperature model: Limit temperature [°C] *)
    ACP10PAR_ENCOD_COMP_MODE          :UINT  := 1173;  (* (UINT) Encoder1: Compensation: Mode *)
    ACP10PAR_ENCOD_DAT_IDX            :UINT  := 1174;  (* (DINT) Encoder: Data: Index *)
    ACP10PAR_ENCOD_DAT_A0             :UINT  := 1175;  (* (REAL) Encoder: Data: Parameter A0 *)
    ACP10PAR_ENCOD_DAT_A1             :UINT  := 1176;  (* (REAL) Encoder: Data: Parameter A1 *)
    ACP10PAR_ENCOD_DAT_A2             :UINT  := 1177;  (* (REAL) Encoder: Data: Parameter A2 *)
    ACP10PAR_T_STOP_EVENT_BIT         :UINT  := 1179;  (* (DINT) Movement stop: Minimum time for cyclic bit 'stop after drive event' [us] *)
    ACP10PAR_PCTRL_ENABLE_A2_POS      :UINT  := 1180;  (* (REAL) CTRL Position controller: Deceleration in positive direction at activating the enable input [Units/s²] *)
    ACP10PAR_PCTRL_ENABLE_A2_NEG      :UINT  := 1181;  (* (REAL) CTRL Position controller: Deceleration in negative direction at activating the enable input [Units/s²] *)
    ACP10PAR_HOMING_DS_STOP           :UINT  := 1182;  (* (REAL) Homing: Lag error for stop of a movement [Units] *)
    ACP10PAR_CYCLIC_DP_CYCLE_TIME     :UINT  := 1183;  (* (UDINT) Network coupling: Receive data point: Cycle time [us] *)
    ACP10PAR_HOMING_RESTORE_MODE      :UINT  := 1184;  (* (UINT) Homing: Mode for saving and restoring position data *)
    ACP10PAR_SGEN_PROF_S_SET          :UINT  := 1186;  (* (DINT) Basis movements: Profile generator set position [Units] *)
    ACP10PAR_HOMING_DS_BLOCK          :UINT  := 1188;  (* (REAL) Homing: Lag error for block detection [Units] *)
    ACP10PAR_HOMING_TORQUE_LIM        :UINT  := 1189;  (* (REAL) Homing: Torque limit [Nm] *)
    ACP10PAR_ENCOD_SSI_TRAIL_BITS     :UINT  := 1190;  (* (USINT) Encoder1: SSI Number of trailing bits *)
    ACP10PAR_ENCOD2_SSI_TRAIL_BITS    :UINT  := 1191;  (* (USINT) Encoder2: SSI Number of trailing bits *)
    ACP10PAR_ENCOD3_SSI_TRAIL_BITS    :UINT  := 1192;  (* (USINT) Encoder3: SSI Number of trailing bits *)
    ACP10PAR_QUICKSTOP_DECEL_RAMP     :UINT  := 1193;  (* (USINT) Digital inputs: Quickstop deceleration ramp *)
    ACP10PAR_NETWORK_SYS_TIME         :UINT  := 1194;  (* (UDINT) Drive synchronisation: Total time within the network cycle [us] *)
    ACP10PAR_ACYCLIC_MAX_DATLEN       :UINT  := 1195;  (* (UINT) System administration: Maximum length of acyclic data [Byte] *)
    ACP10PAR_PCTRL_MODE_BITS          :UINT  := 1196;  (* (UDINT) CTRL Position controller: Mode bits *)
    ACP10PAR_CROSSLINK_AXIS           :UINT  := 1197;  (* (UINT) Axis crosslink: Axis number *)
    ACP10PAR_CROSSLINK_PARID          :UINT  := 1198;  (* (UINT) Axis crosslink: Parameter ID *)
    ACP10PAR_STOP_T_JOLT              :UINT  := 1199;  (* (REAL) Movement stop: Jolt time [s] *)
    ACP10PAR_BRC_REQU_CYCLIC_STATUS   :UINT  := 1200;  (* (UINT) Broadcast request for cyclic status *)
    ACP10PAR_DRIVE_SYNC_CMD_LATCH     :UINT  := 1201;  (* (NIL) Latch command drive synchronization *)
    ACP10PAR_DRIVE_SYNC_TIMESTAMP     :UINT  := 1202;  (* (BYTES6) Time stamp for drive synchronization *)
    ACP10PAR_AUT_MA_S_START_IDX       :UINT  := 1204;  (* (USINT) Cam automat: Index for relative start position of the master axis within interval *)
    ACP10PAR_AUT_MA_S_START_IV        :UINT  := 1205;  (* (DINT) Cam automat: Relative start position of the master axis within interval [Units] *)
    ACP10PAR_AUT_MA_S_START_IDX_VAX1  :UINT  := 1206;  (* (USINT) VAX Cam automat: Index for relative start position of the master axis within interval *)
    ACP10PAR_AUT_MA_S_START_IV_VAX1   :UINT  := 1207;  (* (DINT) VAX Cam automat: Relative start position of the master axis within interval [Units] *)
    ACP10PAR_MOTOR_NUM_PHASES         :UINT  := 1208;  (* (USINT) Motor: Number of motor phases *)
    ACP10PAR_MOTOR_ENCOD_TEMP_LIM     :UINT  := 1209;  (* (UINT) Motor: Encoder: Limit temperature [°C] *)
    ACP10PAR_MOTOR_TEMPMODEL_REFSENS  :UINT  := 1210;  (* (UINT) Motor: Temperature model: Reference sensor: Parameter ID *)
    ACP10PAR_MOTOR_TEMPMODEL_RES1     :UINT  := 1211;  (* (REAL) Motor: Temperature model: Thermal resistance 1 [K/W] *)
    ACP10PAR_MOTOR_TEMPMODEL_CAP1     :UINT  := 1212;  (* (REAL) Motor: Temperature model: Thermal capacity 1 [Ws/K] *)
    ACP10PAR_MOTOR_TEMPMODEL_RES2     :UINT  := 1213;  (* (REAL) Motor: Temperature model: Thermal resistance 2 [K/W] *)
    ACP10PAR_MOTOR_TEMPMODEL_CAP2     :UINT  := 1214;  (* (REAL) Motor: Temperature model: Thermal capacity 2 [Ws/K] *)
    ACP10PAR_MOTOR_TEMPSENS_TYPE      :UINT  := 1215;  (* (UINT) Temperature sensor: Type *)
    ACP10PAR_MOTOR_TEMPSENS_LIM       :UINT  := 1216;  (* (UINT) Temperature sensor: Limit temperature [°C] *)
    ACP10PAR_ENCOD_POS_DATA_IDX       :UINT  := 1219;  (* (UINT) Encoder: Index of position data block *)
    ACP10PAR_UDC_OVMON_CTRL_OFF_LIM   :UINT  := 1220;  (* (REAL) CTRL DC bus: Overvoltage monitoring: Threshold for torque off [V] *)
    ACP10PAR_UDC_OVMON_STOP_LIM       :UINT  := 1221;  (* (REAL) CTRL DC bus: Overvoltage monitoring: Threshold for stop on [V] *)
    ACP10PAR_TEMP_POWERSTAGE          :UINT  := 1222;  (* (REAL) Power stage: Temperature model: Temperature [°C] *)
    ACP10PAR_MAINS_FREQ_TOL           :UINT  := 1223;  (* (REAL) Power mains: Frequency tolerance [%] *)
    ACP10PAR_MOTOR_VENDOR_ID          :UINT  := 1224;  (* (UINT) Motor: Vendor ID *)
    ACP10PAR_ENCOD_SSI_LINE_OFF       :UINT  := 1225;  (* (DINT) Encoder1: Serial position phase shift *)
    ACP10PAR_ENCOD2_SSI_LINE_OFF      :UINT  := 1226;  (* (DINT) Encoder2: Serial position phase shift *)
    ACP10PAR_ENCOD3_SSI_LINE_OFF      :UINT  := 1227;  (* (DINT) Encoder3: Serial position phase shift *)
    ACP10PAR_ENCOD_SSI_LINE_RES       :UINT  := 1228;  (* (DINT) Encoder1: Serial resolution per sinus period *)
    ACP10PAR_ENCOD_COMP_B0            :UINT  := 1230;  (* (REAL) Encoder1: Compensation: Parameter 1 *)
    ACP10PAR_ENCOD_COMP_B1            :UINT  := 1231;  (* (REAL) Encoder1: Compensation: Parameter 2 *)
    ACP10PAR_ENCOD_COMP_B2            :UINT  := 1232;  (* (REAL) Encoder1: Compensation: Parameter 3 *)
    ACP10PAR_ENCOD_COMP_B3            :UINT  := 1233;  (* (REAL) Encoder1: Compensation: Parameter 4 *)
    ACP10PAR_ENCOD_COMP_ID_CURR_MAX   :UINT  := 1234;  (* (REAL) Encoder1: Compensation: Maximal current for identification [A] *)
    ACP10PAR_CMD_SCTRL_RC             :UINT  := 1237;  (* (UINT) CTRL Speed controller: Repetitive Control: Command *)
    ACP10PAR_SCTRL_RC_T_PREDICT       :UINT  := 1238;  (* (REAL) CTRL Speed controller: Repetitive Control: Prediction time [s] *)
    ACP10PAR_SCTRL_RC_SPEED_MIN       :UINT  := 1239;  (* (REAL) CTRL Speed controller: Repetitive Control: Minimal speed [1/s] *)
    ACP10PAR_SCTRL_RC_FILT_CUTOFF     :UINT  := 1240;  (* (REAL) CTRL Speed controller: Repetitive Control: Cutoff frequency of filter [Hz] *)
    ACP10PAR_SCTRL_RC_FILT_ORDER      :UINT  := 1241;  (* (USINT) CTRL Speed controller: Repetitive Control: Order of filter *)
    ACP10PAR_SCTRL_RC_STATUS          :UINT  := 1242;  (* (USINT) CTRL Speed controller: Repetitive Control: State *)
    ACP10PAR_SCTRL_RC_FILT_TYPE       :UINT  := 1243;  (* (USINT) CTRL Speed controller: Repetitive Control: Type of filter *)
    ACP10PAR_SCTRL_RC_RES             :UINT  := 1244;  (* (UINT) CTRL Speed controller: Repetitive Control: Resolution *)
    ACP10PAR_SCTRL_RC_VALUE           :UINT  := 1245;  (* (REAL) CTRL Speed controller: Repetitive Control: Output value [A] *)
    ACP10PAR_SCTRL_RC_PAR0            :UINT  := 1246;  (* (UDINT) CTRL Speed: Repetitive Control: Parameter 1 *)
    ACP10PAR_SCTRL_RC_PAR1            :UINT  := 1247;  (* (UDINT) CTRL Speed: Repetitive Control: Parameter 2 *)
    ACP10PAR_SCTRL_RC_MODE            :UINT  := 1248;  (* (UDINT) CTRL Speed: Repetitive Control: Mode *)
    ACP10PAR_FWCTRL_ULIM_SCALE        :UINT  := 1250;  (* (REAL) CTRL Flux weakening: Voltage limit reserve *)
    ACP10PAR_MOTOR_BRAKE_TYPE         :UINT  := 1260;  (* (UINT) Motor holding brake: Type *)
    ACP10PAR_MOTOR_BRAKE_RESISTANCE   :UINT  := 1261;  (* (REAL) Motor holding brake: Resistance [Ohm] *)
    ACP10PAR_MOTOR_BRAKE_INDUCTANCE   :UINT  := 1262;  (* (REAL) Motor holding brake: Inductance [Henry] *)
    ACP10PAR_BRAKE_TEST_DURATION      :UINT  := 1266;  (* (REAL) Motor holding brake: Test duration [s] *)
    ACP10PAR_TLIM_ISQ_POS             :UINT  := 1270;  (* (REAL) CTRL Torque limiter: Absolute value of positive current limit [A] *)
    ACP10PAR_TLIM_ISQ_NEG             :UINT  := 1271;  (* (REAL) CTRL Torque limiter: Absolute value of negative current limit [A] *)
    ACP10PAR_UDC_OFFSET               :UINT  := 1278;  (* (REAL) CTRL DC bus: Voltage offset [V] *)
    ACP10PAR_VCTRL_I0_LIM             :UINT  := 1279;  (* (REAL) Power stage: Summation current: Limit [A] *)
    ACP10PAR_PIDENT_THERM_TRIP_TIME   :UINT  := 1283;  (* (REAL) Parameter identification: Tripping time at thermal overload  [s] *)
    ACP10PAR_VCTRL_RHO_ADD_PARID      :UINT  := 1293;  (* (UINT) CTRL Vector controller: Parameter ID of the additive commutation angle *)
    ACP10PAR_VCTRL_RHO_ADD            :UINT  := 1294;  (* (REAL) CTRL Vector controller: Additive commutation angle [rad] *)
    ACP10PAR_OBS_VOLT_US1             :UINT  := 1295;  (* (REAL) Voltage observer: Phase voltage U [V] *)
    ACP10PAR_OBS_VOLT_US2             :UINT  := 1296;  (* (REAL) Voltage observer: Phase voltage V [V] *)
    ACP10PAR_OBS_VOLT_US3             :UINT  := 1297;  (* (REAL) Voltage observer: Phase voltage W [V] *)
    ACP10PAR_OBS_VOLT_INVCL_A1        :UINT  := 1298;  (* (REAL) Voltage observer: Inverter adjustment amplification factor *)
    ACP10PAR_OBS_VOLT_INVCL_A2        :UINT  := 1299;  (* (REAL) Voltage observer: Inverter adjustment exponent [1/A] *)
    ACP10PAR_ENCOD_OUT_OFFSET         :UINT  := 1300;  (* (DINT) Encoder1: Emulation: Offset *)
    ACP10PAR_ENCOD2_OUT_OFFSET        :UINT  := 1301;  (* (DINT) Encoder2: Emulation: Offset *)
    ACP10PAR_ENCOD3_OUT_OFFSET        :UINT  := 1302;  (* (DINT) Encoder3: Emulation: Offset *)
    ACP10PAR_ENCOD_ADC1_OFFSET        :UINT  := 1303;  (* (DINT) Encoder: ADC1: Offset *)
    ACP10PAR_ENCOD_ADC2_OFFSET        :UINT  := 1304;  (* (DINT) Encoder: ADC2: Offset *)
    ACP10PAR_ENCOD_ADC1_GAIN          :UINT  := 1305;  (* (REAL) Encoder: ADC1: Gain *)
    ACP10PAR_PIDENT_S                 :UINT  := 1306;  (* (DINT) Parameter identification: Move distance [Units] *)
    ACP10PAR_ENCOD0_POS_RANGE_LW      :UINT  := 1308;  (* (UDINT) Virtual Encoder: Range of encoder position low word [Incr] *)
    ACP10PAR_ENCOD0_POS_RANGE_HW      :UINT  := 1309;  (* (UDINT) Virtual Encoder: Range of encoder position high word [Incr] *)
    ACP10PAR_ENCOD0_CMD_HOMING        :UINT  := 1310;  (* (HOMING_S, HOMING_MODE, HOMING_MODE_BITS) Virtual Encoder: Command start homing procedure *)
    ACP10PAR_ENCOD0_MAX_CYCLE_TIME    :UINT  := 1311;  (* (DINT) Virtual Encoder: Maximum cycle time *)
    ACP10PAR_ENCOD0_POS1_IN_PARID     :UINT  := 1312;  (* (UINT) Virtual Encoder: Parameter ID of input value position 1 *)
    ACP10PAR_ENCOD0_POS2_IN_PARID     :UINT  := 1313;  (* (UINT) Virtual Encoder: Parameter ID of input value position 1 *)
    ACP10PAR_ENCOD0_TIME_IN_PARID     :UINT  := 1314;  (* (UINT) Virtual Encoder: Parameter ID of input value time *)
    ACP10PAR_ENCOD0_S_FILTER_T10      :UINT  := 1315;  (* (REAL) Virtual Encoder: Time constant for actual position filter [s] *)
    ACP10PAR_ENCOD0_S_FILTER_TE       :UINT  := 1316;  (* (REAL) Virtual Encoder: Extrapolation time for actual position filter [s] *)
    ACP10PAR_ELC_TRANSFER_PARID       :UINT  := 1318;  (* (UINT) Encoderless control: Parameter-ID Transition  *)
    ACP10PAR_ENCOD0_MODE              :UINT  := 1320;  (* (UDINT) Virtual Encoder: Mode *)
    ACP10PAR_ENCOD0_POS_ACT           :UINT  := 1321;  (* (DINT) Virtual Encoder: Actual position per revolution [Incr] *)
    ACP10PAR_ENCOD0_S_ACT             :UINT  := 1322;  (* (DINT) Virtual Encoder: Actual position [Units] *)
    ACP10PAR_SCALE_ENCOD0_UNITS       :UINT  := 1323;  (* (UDINT) Virtual Encoder: Encoder scaling: Units per SCALE_ENCOD0_REV encoder revolutions [Units] *)
    ACP10PAR_SCALE_ENCOD0_REV         :UINT  := 1324;  (* (UDINT) Virtual Encoder: Encoder scaling: encoder revolutions *)
    ACP10PAR_ENCOD0_COUNT_DIR         :UINT  := 1325;  (* (USINT) Virtual Encoder: Encoder scaling: Count direction *)
    ACP10PAR_STAT_ENC0_HOMING_OK      :UINT  := 1326;  (* (UDINT) Virtual Encoder: Status home position valid *)
    ACP10PAR_ENCOD0_IN_PARID          :UINT  := 1327;  (* (UINT) Virtual Encoder: Parameter ID of input value *)
    ACP10PAR_ENCOD0_STATUS_PARID      :UINT  := 1328;  (* (UINT) Virtual Encoder: Parameter ID of status *)
    ACP10PAR_ENCOD0_STATUS            :UINT  := 1329;  (* (UDINT) Virtual Encoder: Status *)
    ACP10PAR_SCALE_ENCOD0_INCR        :UINT  := 1330;  (* (UDINT) Virtual Encoder: Encoder scaling: increments per motor revolution *)
    ACP10PAR_ELC_STALL_DETECT_TIME    :UINT  := 1333;  (* (REAL) Encoderless control: Stop monitoring: Triggering time [s] *)
    ACP10PAR_ELC_TRANSFER             :UINT  := 1334;  (* (REAL) Encoderless control: Transition  *)
    ACP10PAR_ELC_TRANSFER_TIME        :UINT  := 1335;  (* (REAL) Encoderless control: Transition time   [s] *)
    ACP10PAR_OBS_POS_PSI_REF          :UINT  := 1336;  (* (REAL) Position observer: Reference flux *)
    ACP10PAR_ELC_ISD_REF_PARID        :UINT  := 1337;  (* (UINT) Encoderless control: Parameter-ID Set current direct component *)
    ACP10PAR_ELC_ISD_REF              :UINT  := 1338;  (* (REAL) Encoderless control: Set current direct component [A] *)
    ACP10PAR_OBS_POS_PSI_ACT          :UINT  := 1339;  (* (REAL) Position observer: Actual flux *)
    ACP10PAR_FWCTRL_ULIM_OFFS         :UINT  := 1340;  (* (REAL) CTRL Flux weakening: Offset voltage limitation [V] *)
    ACP10PAR_PIDENT_TRACE_VAR1        :UINT  := 1343;  (* (REAL) Parameter identification: Trace variable 1 *)
    ACP10PAR_PIDENT_TRACE_VAR2        :UINT  := 1344;  (* (REAL) Parameter identification: Trace variable 2 *)
    ACP10PAR_OBS_POS1_MODE            :UINT  := 1345;  (* (UINT) Position observer 1: Mode *)
    ACP10PAR_OBS_POS2_MODE            :UINT  := 1346;  (* (UINT) Position observer 2: Mode *)
    ACP10PAR_OBS_POS1_RHO             :UINT  := 1347;  (* (REAL) Position observer 1: Estimated electrical flux angle [rad] *)
    ACP10PAR_OBS_POS2_RHO             :UINT  := 1348;  (* (REAL) Position observer 2: Estimated electrical flux angle [rad] *)
    ACP10PAR_OBS_POS1_PARA_A0         :UINT  := 1351;  (* (REAL) Position observer 1: Parameter A0 *)
    ACP10PAR_OBS_POS1_PARA_A1         :UINT  := 1352;  (* (REAL) Position observer 1: Parameter A1 *)
    ACP10PAR_OBS_POS1_PARA_A2         :UINT  := 1353;  (* (REAL) Position observer 1: Parameter A2 *)
    ACP10PAR_OBS_MODE_BITS            :UINT  := 1354;  (* (UDINT) Observer: Mode bits *)
    ACP10PAR_OBS_POS2_PARA_B0_PARID   :UINT  := 1357;  (* (UINT) Position observer 2: Parameter B0 Parameter-ID *)
    ACP10PAR_OBS_POS2_PARA_B1_PARID   :UINT  := 1358;  (* (UINT) Position observer 2: Parameter B1 Parameter-ID *)
    ACP10PAR_ENCOD2_DIAG_ID           :UINT  := 1360;  (* (USINT) Encoder2: Diagnosis ID *)
    ACP10PAR_ENCOD2_DIAG              :UINT  := 1361;  (* (USINT) Encoder2: Diagnosis *)
    ACP10PAR_ENCOD3_DIAG_ID           :UINT  := 1362;  (* (USINT) Encoder3: Diagnosis ID *)
    ACP10PAR_ENCOD3_DIAG              :UINT  := 1363;  (* (USINT) Encoder3: Diagnosis *)
    ACP10PAR_ENCOD2_CMD               :UINT  := 1364;  (* (UDINT) Encoder2: Encoder command *)
    ACP10PAR_ENCOD3_CMD               :UINT  := 1365;  (* (UDINT) Encoder3: Encoder command *)
    ACP10PAR_ENCOD2_TEMP              :UINT  := 1366;  (* (REAL) Encoder2: Temperature [°C] *)
    ACP10PAR_ENCOD3_TEMP              :UINT  := 1367;  (* (REAL) Encoder3: Temperature [°C] *)
    ACP10PAR_ENCOD2_ERR_CNT           :UINT  := 1368;  (* (UDINT) Encoder2: Error count *)
    ACP10PAR_ENCOD3_ERR_CNT           :UINT  := 1369;  (* (UDINT) Encoder3: Error count *)
    ACP10PAR_ENCOD_SSI_CONTENT_IDX    :UINT  := 1370;  (* (USINT) Encoder1: SSI content index *)
    ACP10PAR_ENCOD_SSI_CONTENT_TYPE   :UINT  := 1371;  (* (USINT) Encoder1: SSI content type *)
    ACP10PAR_ENCOD2_SSI_CONTENT_IDX   :UINT  := 1372;  (* (USINT) Encoder2: SSI content index *)
    ACP10PAR_ENCOD2_SSI_CONTENT_TYPE  :UINT  := 1373;  (* (USINT) Encoder2: SSI content type *)
    ACP10PAR_ENCOD3_SSI_CONTENT_IDX   :UINT  := 1374;  (* (USINT) Encoder3: SSI content index *)
    ACP10PAR_ENCOD3_SSI_CONTENT_TYPE  :UINT  := 1375;  (* (USINT) Encoder3: SSI content type *)
    ACP10PAR_ENCOD0_S_ACT_FILTER      :UINT  := 1379;  (* (DINT) Virtual Encoder: Filtered actual position [Units] *)
    ACP10PAR_UCTRL_T_RAMP             :UINT  := 1389;  (* (REAL) CTRL DC bus: Set value rise time [s] *)
    ACP10PAR_ENCOD_BAUDRATE           :UINT  := 1390;  (* (DINT) Encoder1: Baud rate [kBaud] *)
    ACP10PAR_ENCOD2_BAUDRATE          :UINT  := 1391;  (* (DINT) Encoder2: Baud rate [kBaud] *)
    ACP10PAR_ENCOD3_BAUDRATE          :UINT  := 1392;  (* (DINT) Encoder3: Baud rate [kBaud] *)
    ACP10PAR_ENCOD_REF_DCM_MODE       :UINT  := 1400;  (* (UINT) Encoder1: DCM Mode *)
    ACP10PAR_ENCOD_ABS_RES            :UINT  := 1401;  (* (DINT) Encoder1: Absolute resolution of an encoder revolution *)
    ACP10PAR_ENCOD2_ABS_RES           :UINT  := 1402;  (* (DINT) Encoder2: Absolute resolution of an encoder revolution *)
    ACP10PAR_ENCOD3_ABS_RES           :UINT  := 1403;  (* (DINT) Encoder3: Absolute resolution of an encoder revolution *)
    ACP10PAR_ENCOD_SINAMP_LIMIT_MAX   :UINT  := 1404;  (* (REAL) Encoder1: Signal amplitude upper limit [%] *)
    ACP10PAR_ENCOD_SINAMP_LIMIT_MIN   :UINT  := 1405;  (* (REAL) Encoder1: Signal amplitude lower limit [%] *)
    ACP10PAR_ENCOD2_SINAMP_LIMIT_MAX  :UINT  := 1406;  (* (REAL) Encoder2: Signal amplitude upper limit [%] *)
    ACP10PAR_ENCOD2_SINAMP_LIMIT_MIN  :UINT  := 1407;  (* (REAL) Encoder2: Signal amplitude lower limit [%] *)
    ACP10PAR_ENCOD3_SINAMP_LIMIT_MAX  :UINT  := 1408;  (* (REAL) Encoder3: Signal amplitude upper limit [%] *)
    ACP10PAR_ENCOD3_SINAMP_LIMIT_MIN  :UINT  := 1409;  (* (REAL) Encoder3: Signal amplitude lower limit [%] *)
    ACP10PAR_ENCOD1_CMD_HOMING        :UINT  := 1414;  (* (HOMING_S, HOMING_MODE, HOMING_MODE_BITS) Encoder1: Command start homing procedure *)
    ACP10PAR_STAT_ENC1_HOMING_OK      :UINT  := 1415;  (* (UDINT) Encoder1: Status home position valid *)
    ACP10PAR_ENCOD1_HOMING_OFFSET     :UINT  := 1416;  (* (DINT) Encoder1: Homing offset [Units] *)
    ACP10PAR_TARGET_S_ABS             :UINT  := 1417;  (* (DINT) Basis movements: Absolute target position [Units] *)
    ACP10PAR_TARGET_S_ABS_VAX1        :UINT  := 1418;  (* (DINT) VAX Basis movements: Absolute target position [Units] *)
    ACP10PAR_OPTIONAL_CTRL_CMD        :UINT  := 1440;  (* (UDINT) Optional IO: Control command *)
    ACP10PAR_OPTIONAL_IN1             :UINT  := 1441;  (* (DINT) Optional IO: Input1 *)
    ACP10PAR_OPTIONAL_IN2             :UINT  := 1442;  (* (DINT) Optional IO: Input2 *)
    ACP10PAR_OPTIONAL_IN3             :UINT  := 1443;  (* (DINT) Optional IO: Input3 *)
    ACP10PAR_OPTIONAL_IN4             :UINT  := 1444;  (* (DINT) Optional IO: Input4 *)
    ACP10PAR_OPTIONAL_IN5             :UINT  := 1445;  (* (DINT) Optional IO: Input5 *)
    ACP10PAR_OPTIONAL_IN6             :UINT  := 1446;  (* (DINT) Optional IO: Input6 *)
    ACP10PAR_OPTIONAL_IN7             :UINT  := 1447;  (* (DINT) Optional IO: Input7 *)
    ACP10PAR_OPTIONAL_IN8             :UINT  := 1448;  (* (DINT) Optional IO: Input8 *)
    ACP10PAR_OPTIONAL_IN9             :UINT  := 1449;  (* (DINT) Optional IO: Input9 *)
    ACP10PAR_OPTIONAL_IN10            :UINT  := 1450;  (* (DINT) Optional IO: Input10 *)
    ACP10PAR_OPTIONAL_OUT1            :UINT  := 1451;  (* (DINT) Optional IO: Output1 *)
    ACP10PAR_OPTIONAL_OUT2            :UINT  := 1452;  (* (DINT) Optional IO: Output2 *)
    ACP10PAR_OPTIONAL_OUT3            :UINT  := 1453;  (* (DINT) Optional IO: Output3 *)
    ACP10PAR_OPTIONAL_OUT4            :UINT  := 1454;  (* (DINT) Optional IO: Output4 *)
    ACP10PAR_OPTIONAL_OUT5            :UINT  := 1455;  (* (DINT) Optional IO: Output5 *)
    ACP10PAR_OPTIONAL_OUT6            :UINT  := 1456;  (* (DINT) Optional IO: Output6 *)
    ACP10PAR_OPTIONAL_OUT7            :UINT  := 1457;  (* (DINT) Optional IO: Output7 *)
    ACP10PAR_OPTIONAL_OUT8            :UINT  := 1458;  (* (DINT) Optional IO: Output8 *)
    ACP10PAR_OPTIONAL_OUT9            :UINT  := 1459;  (* (DINT) Optional IO: Output9 *)
    ACP10PAR_OPTIONAL_OUT10           :UINT  := 1460;  (* (DINT) Optional IO: Output10 *)
    ACP10PAR_OPTIONAL_OUT1_PARID      :UINT  := 1461;  (* (DINT) Optional IO: Parameter ID output1 *)
    ACP10PAR_OPTIONAL_OUT2_PARID      :UINT  := 1462;  (* (DINT) Optional IO: Parameter ID output2 *)
    ACP10PAR_OPTIONAL_OUT3_PARID      :UINT  := 1463;  (* (DINT) Optional IO: Parameter ID output3 *)
    ACP10PAR_OPTIONAL_OUT4_PARID      :UINT  := 1464;  (* (DINT) Optional IO: Parameter ID output4 *)
    ACP10PAR_OPTIONAL_OUT5_PARID      :UINT  := 1465;  (* (DINT) Optional IO: Parameter ID output5 *)
    ACP10PAR_OPTIONAL_OUT6_PARID      :UINT  := 1466;  (* (DINT) Optional IO: Parameter ID output6 *)
    ACP10PAR_OPTIONAL_OUT7_PARID      :UINT  := 1467;  (* (DINT) Optional IO: Parameter ID output7 *)
    ACP10PAR_OPTIONAL_OUT8_PARID      :UINT  := 1468;  (* (DINT) Optional IO: Parameter ID output8 *)
    ACP10PAR_OPTIONAL_OUT9_PARID      :UINT  := 1469;  (* (DINT) Optional IO: Parameter ID output9 *)
    ACP10PAR_OPTIONAL_OUT10_PARID     :UINT  := 1470;  (* (DINT) Optional IO: Parameter ID output10 *)
    ACP10PAR_TLIM_MODE                :UINT  := 1480;  (* (UINT) CTRL Torque limiter: Mode *)
    ACP10PAR_TLIM_STAT                :UINT  := 1481;  (* (UINT) CTRL Torque limiter: Status *)
    ACP10PAR_TLIM_ISQ_REF             :UINT  := 1482;  (* (REAL) CTRL Torque limiter: Output current [A] *)
    ACP10PAR_TLIM_ISQ_ADD_PARID       :UINT  := 1483;  (* (UINT) CTRL Torque limiter: Parameter ID additiv output current *)
    ACP10PAR_LIM_T1_POS_PARID         :UINT  := 1484;  (* (UINT) CTRL Torque limiter: Parameter ID LIM_T1_POS *)
    ACP10PAR_LIM_T1_NEG_PARID         :UINT  := 1485;  (* (UINT) CTRL Torque limiter: Parameter ID LIM_T1_NEG *)
    ACP10PAR_LIM_T2_POS_PARID         :UINT  := 1486;  (* (UINT) CTRL Torque limiter: Parameter ID LIM_T2_POS *)
    ACP10PAR_LIM_T2_NEG_PARID         :UINT  := 1487;  (* (UINT) CTRL Torque limiter: Parameter ID LIM_T2_NEG *)
    ACP10PAR_MOTOR_TEMPMODEL_LOSS1    :UINT  := 1489;  (* (REAL) Motor: Speed-dependent power loss: Linear coefficient [Ws] *)
    ACP10PAR_MOTOR_TEMPMODEL_LOSS2    :UINT  := 1490;  (* (REAL) Motor: Speed-dependent power loss: Quadratic coefficient [Ws²] *)
    ACP10PAR_UDC_PRECHARGE_THRESHOLD  :UINT  := 1491;  (* (REAL) CTRL DC bus: Pre-charge: Enable voltage [V] *)
    ACP10PAR_SIM_INERTIA2             :UINT  := 1492;  (* (REAL) Simulation mode: Mass inertia2 [kgm²] *)
    ACP10PAR_SIM_STATIC_FRICTION2     :UINT  := 1493;  (* (REAL) Simulation mode: Static friction2 [Nm] *)
    ACP10PAR_SIM_VISCOUS_FRICTION2    :UINT  := 1494;  (* (REAL) Simulation mode: Viscous friction2 [Nms] *)
    ACP10PAR_SIM_STIFFNESS            :UINT  := 1495;  (* (REAL) Simulation mode: Stiffness of coupling [Nm/rad] *)
    ACP10PAR_SIM_DAMPING              :UINT  := 1496;  (* (REAL) Simulation mode: Damping parameter of coupling [Nms/rad] *)
    ACP10PAR_SIM_TORSION              :UINT  := 1497;  (* (REAL) Simulation mode: Torsion of coupling [Units] *)
    ACP10PAR_SIM_SPEED2               :UINT  := 1498;  (* (REAL) Simulation mode: Speed of mass 2 [1/s] *)
    ACP10PAR_CMD_ERROR                :UINT  := 1501;  (* (UINT) Messages: Command execute error reaction  *)
    ACP10PAR_CMD_ERROR_VAX1           :UINT  := 1502;  (* (UINT) VAX Messages: Command execute error reaction  *)
    ACP10PAR_MOTOR_TEMPMODEL_MODE     :UINT  := 1503;  (* (UINT) Motor: Temperature model: Mode *)
    ACP10PAR_MOTOR_BRAKE_VOLT_REL     :UINT  := 1504;  (* (REAL) Motor holding brake: Release voltage [V] *)
    ACP10PAR_MOTOR_BRAKE_VOLT_HOLD    :UINT  := 1505;  (* (REAL) Motor holding brake: Hold voltage [V] *)
    ACP10PAR_MOTOR_BRAKE_VOLT_MAX     :UINT  := 1506;  (* (REAL) Motor holding brake: Overvoltage limit [V] *)
    ACP10PAR_UCTRL_ENABLE_THR_LO      :UINT  := 1518;  (* (REAL) CTRL DC bus: Controller: Lower enable threshold *)
    ACP10PAR_UCTRL_ENABLE_THR_UP      :UINT  := 1519;  (* (REAL) CTRL DC bus: Controller: Upper enable threshold *)
    ACP10PAR_ENCOD_MAX_SYNC_SPEED     :UINT  := 1521;  (* (REAL) Encoder1: Maximum speed vor serial position [1/s] *)
    ACP10PAR_ENCOD2_DIAG2             :UINT  := 1528;  (* (REAL) Encoder2: Diagnosis 2 *)
    ACP10PAR_ENCOD2_DIAG3             :UINT  := 1529;  (* (REAL) Encoder2: Diagnosis 3 *)
    ACP10PAR_ENCOD3_DIAG2             :UINT  := 1530;  (* (REAL) Encoder3: Diagnosis 2 *)
    ACP10PAR_ENCOD3_DIAG3             :UINT  := 1531;  (* (REAL) Encoder3: Diagnosis 3 *)
    ACP10PAR_ENCOD2_MAX_SYNC_SPEED    :UINT  := 1532;  (* (REAL) Encoder2: Maximum speed vor serial position [1/s] *)
    ACP10PAR_ENCOD3_MAX_SYNC_SPEED    :UINT  := 1533;  (* (REAL) Encoder3: Maximum speed vor serial position [1/s] *)
    ACP10PAR_LOGIC_MODE               :UINT  := 3072;  (* (UINT) FB LOGIC: Mode *)
    ACP10PAR_LOGIC_IN1_PARID          :UINT  := 3080;  (* (UINT) FB LOGIC: Parameter ID of input1 *)
    ACP10PAR_LOGIC_IN2_PARID          :UINT  := 3088;  (* (UINT) FB LOGIC: Parameter ID of input2 *)
    ACP10PAR_LOGIC_VALUE              :UINT  := 3096;  (* (USINT) FB LOGIC: Result value *)
    ACP10PAR_LOGIC_IN3_PARID          :UINT  := 3104;  (* (UINT) FB LOGIC: Parameter ID of input3 *)
    ACP10PAR_LOGIC_IN4_PARID          :UINT  := 3112;  (* (UINT) FB LOGIC: Parameter ID of input4 *)
    ACP10PAR_ARITH_MODE               :UINT  := 3584;  (* (UINT) FB ARITH: Mode *)
    ACP10PAR_ARITH_IN1_PARID          :UINT  := 3592;  (* (UINT) FB ARITH: Parameter ID of input1 *)
    ACP10PAR_ARITH_IN2_PARID          :UINT  := 3600;  (* (UINT) FB ARITH: Parameter ID of input2 *)
    ACP10PAR_ARITH_VALUE_I4           :UINT  := 3608;  (* (DINT) FB ARITH: Result value I4 *)
    ACP10PAR_ARITH_VALUE_FRAC         :UINT  := 3616;  (* (REAL) FB ARITH: Result value I4 fractional part *)
    ACP10PAR_ARITH_VALUE_R4           :UINT  := 3624;  (* (REAL) FB ARITH: Result value R4 *)
    ACP10PAR_ARITH_K1                 :UINT  := 3632;  (* (REAL) FB ARITH: Multiplication factor1 *)
    ACP10PAR_ARITH_K2                 :UINT  := 3640;  (* (REAL) FB ARITH: Multiplication factor2 *)
    ACP10PAR_VAR_I4_0                 :UINT  := 4096;  (* (DINT) FB VAR: Variable0 I4 *)
    ACP10PAR_VAR_I4_1                 :UINT  := 4104;  (* (DINT) FB VAR: Variable1 I4 *)
    ACP10PAR_VAR_I4_2                 :UINT  := 4112;  (* (DINT) FB VAR: Variable2 I4 *)
    ACP10PAR_VAR_I4_3                 :UINT  := 4120;  (* (DINT) FB VAR: Variable3 I4 *)
    ACP10PAR_VAR_R4_0                 :UINT  := 4128;  (* (REAL) FB VAR: Variable0 R4 *)
    ACP10PAR_VAR_R4_1                 :UINT  := 4136;  (* (REAL) FB VAR: Variable1 R4 *)
    ACP10PAR_VAR_R4_2                 :UINT  := 4144;  (* (REAL) FB VAR: Variable2 R4 *)
    ACP10PAR_VAR_R4_3                 :UINT  := 4152;  (* (REAL) FB VAR: Variable3 R4 *)
    ACP10PAR_VAR_I2_0                 :UINT  := 4160;  (* (INT) FB VAR: Variable0 I2 *)
    ACP10PAR_VAR_I2_1                 :UINT  := 4168;  (* (INT) FB VAR: Variable1 I2 *)
    ACP10PAR_VAR_I2_2                 :UINT  := 4176;  (* (INT) FB VAR: Variable2 I2 *)
    ACP10PAR_VAR_I2_3                 :UINT  := 4184;  (* (INT) FB VAR: Variable3 I2 *)
    ACP10PAR_VAR_UI1_0                :UINT  := 4192;  (* (USINT) FB VAR: Variable0 UI1 *)
    ACP10PAR_VAR_UI1_1                :UINT  := 4200;  (* (USINT) FB VAR: Variable1 UI1 *)
    ACP10PAR_VAR_UI1_2                :UINT  := 4208;  (* (USINT) FB VAR: Variable2 UI1 *)
    ACP10PAR_VAR_UI1_3                :UINT  := 4216;  (* (USINT) FB VAR: Variable3 UI1 *)
    ACP10PAR_EVWR_EVENT_PARID         :UINT  := 4608;  (* (UINT) FB EVWR: Parameter ID of event input *)
    ACP10PAR_EVWR_IN_PARID            :UINT  := 4616;  (* (UINT) FB EVWR: Parameter ID of input *)
    ACP10PAR_EVWR_EVENT_LEVEL         :UINT  := 4624;  (* (DINT) FB EVWR: Event level *)
    ACP10PAR_EVWR_WR_PARID            :UINT  := 4632;  (* (UINT) FB EVWR: Parameter ID of output value *)
    ACP10PAR_EVWR_MODE                :UINT  := 4640;  (* (UINT) FB EVWR: Mode *)
    ACP10PAR_MPGEN_MODE               :UINT  := 5120;  (* (UINT) FB MPGEN: Mode *)
    ACP10PAR_MPGEN_SET_VALUE          :UINT  := 5128;  (* (DINT) FB MPGEN: Target position [Units] *)
    ACP10PAR_MPGEN_VALUE_I4           :UINT  := 5136;  (* (DINT) FB MPGEN: Output value I4 [Units] *)
    ACP10PAR_MPGEN_VALUE_FRAC         :UINT  := 5144;  (* (REAL) FB MPGEN: Output value I4 fractional part *)
    ACP10PAR_MPGEN_VALUE_R4           :UINT  := 5152;  (* (REAL) FB MPGEN: Output value R4 *)
    ACP10PAR_MPGEN_STATUS             :UINT  := 5160;  (* (USINT) FB MPGEN: Status *)
    ACP10PAR_MPGEN_MA_PARID           :UINT  := 5168;  (* (UINT) FB MPGEN: Parameter ID of master position *)
    ACP10PAR_MPGEN_MA_V_MAX           :UINT  := 5176;  (* (REAL) FB MPGEN: Maximum master speed [Units/s] *)
    ACP10PAR_MPGEN_V_MAX              :UINT  := 5184;  (* (REAL) FB MPGEN: Maximum speed [Units/s] *)
    ACP10PAR_MPGEN_A_MAX              :UINT  := 5192;  (* (REAL) FB MPGEN: Maximum acceleration [Units/s²] *)
    ACP10PAR_MPGEN_MA_S_COMP          :UINT  := 5200;  (* (DINT) FB MPGEN: Master compensation distance [Units] *)
    ACP10PAR_MPGEN_SET_VALUE_PARID    :UINT  := 5208;  (* (UINT) FB MPGEN: Parameter ID of target position *)
    ACP10PAR_MPGEN_V_SET_VALUE        :UINT  := 5216;  (* (REAL) FB MPGEN: Target speed [Units/s] *)
    ACP10PAR_MPGEN_V_SET_VALUE_PARID  :UINT  := 5224;  (* (UINT) FB MPGEN: Parameter ID of target speed *)
    ACP10PAR_MPGEN_ERROR_COUNT        :UINT  := 5232;  (* (USINT) FB MPGEN: Error counter *)
    ACP10PAR_MPGEN_MA_S_START         :UINT  := 5240;  (* (DINT) FB MPGEN: Master start position [Units] *)
    ACP10PAR_MPGEN_MA_S_IV            :UINT  := 5248;  (* (DINT) FB MPGEN: Master interval [Units] *)
    ACP10PAR_MPGEN_MA_S1              :UINT  := 5256;  (* (REAL) FB MPGEN: Master start position within interval [Units] *)
    ACP10PAR_MPGEN_MA_S2              :UINT  := 5264;  (* (REAL) FB MPGEN: Master end position within interval [Units] *)
    ACP10PAR_DIO_IN                   :UINT  := 5632;  (* (UINT) FB DIO: input values *)
    ACP10PAR_DIO_OUT                  :UINT  := 5640;  (* (UINT) FB DIO: output values *)
    ACP10PAR_DIO_IN1                  :UINT  := 5648;  (* (USINT) FB DIO: input value 1 *)
    ACP10PAR_DIO_IN2                  :UINT  := 5656;  (* (USINT) FB DIO: input value 2 *)
    ACP10PAR_DIO_IN3                  :UINT  := 5664;  (* (USINT) FB DIO: input value 3 *)
    ACP10PAR_DIO_IN4                  :UINT  := 5672;  (* (USINT) FB DIO: input value 4 *)
    ACP10PAR_DIO_IN5                  :UINT  := 5680;  (* (USINT) FB DIO: input value 5 *)
    ACP10PAR_DIO_IN6                  :UINT  := 5688;  (* (USINT) FB DIO: input value 6 *)
    ACP10PAR_DIO_IN7                  :UINT  := 5696;  (* (USINT) FB DIO: input value 7 *)
    ACP10PAR_DIO_IN8                  :UINT  := 5704;  (* (USINT) FB DIO: input value 8 *)
    ACP10PAR_DIO_IN9                  :UINT  := 5712;  (* (USINT) FB DIO: input value 9 *)
    ACP10PAR_DIO_IN10                 :UINT  := 5720;  (* (USINT) FB DIO: input value 10 *)
    ACP10PAR_DIO_IN11                 :UINT  := 5728;  (* (USINT) FB DIO: input value 11 *)
    ACP10PAR_DIO_IN12                 :UINT  := 5736;  (* (USINT) FB DIO: input value 12 *)
    ACP10PAR_DIO_IN13                 :UINT  := 5744;  (* (USINT) FB DIO: input value 13 *)
    ACP10PAR_DIO_IN14                 :UINT  := 5752;  (* (USINT) FB DIO: input value 14 *)
    ACP10PAR_DIO_IN15                 :UINT  := 5760;  (* (USINT) FB DIO: input value 15 *)
    ACP10PAR_DIO_IN16                 :UINT  := 5768;  (* (USINT) FB DIO: input value 16 *)
    ACP10PAR_DIO_OUT1_PARID           :UINT  := 5776;  (* (UINT) FB DIO: parameter ID of output 1 *)
    ACP10PAR_DIO_OUT2_PARID           :UINT  := 5784;  (* (UINT) FB DIO: parameter ID of output 2 *)
    ACP10PAR_DIO_OUT3_PARID           :UINT  := 5792;  (* (UINT) FB DIO: parameter ID of output 3 *)
    ACP10PAR_DIO_OUT4_PARID           :UINT  := 5800;  (* (UINT) FB DIO: parameter ID of output 4 *)
    ACP10PAR_DIO_OUT5_PARID           :UINT  := 5808;  (* (UINT) FB DIO: parameter ID of output 5 *)
    ACP10PAR_DIO_OUT6_PARID           :UINT  := 5816;  (* (UINT) FB DIO: parameter ID of output 6 *)
    ACP10PAR_DIO_OUT7_PARID           :UINT  := 5824;  (* (UINT) FB DIO: parameter ID of output 7 *)
    ACP10PAR_DIO_OUT8_PARID           :UINT  := 5832;  (* (UINT) FB DIO: parameter ID of output 8 *)
    ACP10PAR_DIO_OUT9_PARID           :UINT  := 5840;  (* (UINT) FB DIO: parameter ID of output 9 *)
    ACP10PAR_DIO_OUT10_PARID          :UINT  := 5848;  (* (UINT) FB DIO: parameter ID of output 10 *)
    ACP10PAR_DIO_OUT11_PARID          :UINT  := 5856;  (* (UINT) FB DIO: parameter ID of output 11 *)
    ACP10PAR_DIO_OUT12_PARID          :UINT  := 5864;  (* (UINT) FB DIO: parameter ID of output 12 *)
    ACP10PAR_DIO_OUT13_PARID          :UINT  := 5872;  (* (UINT) FB DIO: Parameter ID of output 13 *)
    ACP10PAR_DIO_OUT14_PARID          :UINT  := 5880;  (* (UINT) FB DIO: parameter ID of output 14 *)
    ACP10PAR_DIO_OUT15_PARID          :UINT  := 5888;  (* (UINT) FB DIO: parameter ID of output 15 *)
    ACP10PAR_DIO_OUT16_PARID          :UINT  := 5896;  (* (UINT) FB DIO: parameter ID of output 16 *)
    ACP10PAR_DIO_CMD_SET_OUT          :UINT  := 5904;  (* (UINT) FB DIO: command set outputs *)
    ACP10PAR_DIO_CMD_CLR_OUT          :UINT  := 5912;  (* (UINT) FB DIO: command clear outputs *)
    ACP10PAR_DIO_DIR                  :UINT  := 5920;  (* (UINT) FB DIO: IO configuration *)
    ACP10PAR_DIO_CNT1                 :UINT  := 5928;  (* (UDINT) FB DIO: Counter input 1 *)
    ACP10PAR_DIO_CNT2                 :UINT  := 5936;  (* (UDINT) FB DIO: Counter input 2 *)
    ACP10PAR_DIO_CHK                  :UINT  := 5944;  (* (UINT) FB DIO: Checks *)
    ACP10PAR_DIO_OUT_MASK             :UINT  := 5952;  (* (UINT) FB DIO: output mask *)
    ACP10PAR_DIO_IN_FILTER_TIME       :UINT  := 5960;  (* (REAL) FB DIO: input filter: filter time [s		] *)
    ACP10PAR_DIO_IN7_RISE_EDGE_TIME   :UINT  := 5968;  (* (UDINT) FB DIO: input 7: Time of the rising edge [us] *)
    ACP10PAR_DIO_IN7_FALL_EDGE_TIME   :UINT  := 5976;  (* (UDINT) FB DIO: input 7: Time of the falling edge [us] *)
    ACP10PAR_DIO_IN8_RISE_EDGE_TIME   :UINT  := 5984;  (* (UDINT) FB DIO: input 8: Time of the rising edge [us] *)
    ACP10PAR_DIO_IN8_FALL_EDGE_TIME   :UINT  := 5992;  (* (UDINT) FB DIO: input 8: Time of the falling edge [us] *)
    ACP10PAR_AIO_IN1                  :UINT  := 6144;  (* (INT) FB AIO: channel 1: Analog value *)
    ACP10PAR_AIO_IN2                  :UINT  := 6152;  (* (INT) FB AIO: channel 2: Analog value *)
    ACP10PAR_AIO_CMP1_THRESH_PARID    :UINT  := 6160;  (* (UINT) FB AIO: channel 1: Comparator threshold pointer parameter *)
    ACP10PAR_AIO_CMP2_THRESH_PARID    :UINT  := 6168;  (* (UINT) FB AIO: channel 2: Comparator threshold pointer parameter *)
    ACP10PAR_AIO_CMP1_FILTER          :UINT  := 6176;  (* (REAL) FB AIO: channel 1: Comparator filter time [s] *)
    ACP10PAR_AIO_CMP2_FILTER          :UINT  := 6184;  (* (REAL) FB AIO: channel 2: Comparator filter time [s] *)
    ACP10PAR_AIO_CMP1_RISE_EDGE_TIME  :UINT  := 6192;  (* (UDINT) FB AIO: channel 1: Time of the rising edge of the comparator output [us] *)
    ACP10PAR_AIO_CMP2_RISE_EDGE_TIME  :UINT  := 6200;  (* (UDINT) FB AIO: channel 2: Time of the rising edge of the comparator output [us] *)
    ACP10PAR_AIO_CMP1_FALL_EDGE_TIME  :UINT  := 6208;  (* (UDINT) FB AIO: channel 1: Time of the falling edge of the comparator output [us] *)
    ACP10PAR_AIO_CMP2_FALL_EDGE_TIME  :UINT  := 6216;  (* (UDINT) FB AIO: channel 2: Time of the falling edge of the comparator output [us] *)
    ACP10PAR_AIO_CMP1_MODE            :UINT  := 6224;  (* (UINT) FB AIO: channel 1: Comparator mode *)
    ACP10PAR_AIO_CMP2_MODE            :UINT  := 6232;  (* (UINT) FB AIO: channel 2: Comparator mode *)
    ACP10PAR_AIO_CMP1_MINMAX          :UINT  := 6240;  (* (INT) FB AIO: channel 1: Comparator extremum (minimum, maximum) *)
    ACP10PAR_AIO_CMP2_MINMAX          :UINT  := 6248;  (* (INT) FB AIO: channel 2: Comparator extremum (minimum, maximum) *)
    ACP10PAR_AIO_CMP1_VALUE           :UINT  := 6256;  (* (USINT) FB AIO: channel 1: Comparator output *)
    ACP10PAR_AIO_CMP2_VALUE           :UINT  := 6264;  (* (USINT) FB AIO: channel 2: Comparator output *)
    ACP10PAR_AIO_STATUS               :UINT  := 6272;  (* (UINT) FB AIO: state *)
    ACP10PAR_AIO_IN1_FILTER           :UINT  := 6280;  (* (REAL) FB AIO: channel 1: Filter [s] *)
    ACP10PAR_AIO_IN2_FILTER           :UINT  := 6288;  (* (REAL) FB AIO: channel 2: Filter [s] *)
    ACP10PAR_AIO_IN3                  :UINT  := 6296;  (* (INT) FB AIO: channel 3: Analog value *)
    ACP10PAR_AIO_IN4                  :UINT  := 6304;  (* (INT) FB AIO: channel 4: Analog value *)
    ACP10PAR_CMP_IN_PARID             :UINT  := 6656;  (* (UINT) FB CMP: parameter ID of input *)
    ACP10PAR_CMP_THRESHOLD            :UINT  := 6664;  (* (REAL) FB CMP: threshold *)
    ACP10PAR_CMP_WINDOW               :UINT  := 6672;  (* (REAL) FB CMP: window *)
    ACP10PAR_CMP_HYSTERESIS           :UINT  := 6680;  (* (REAL) FB CMP: hysteresis window *)
    ACP10PAR_CMP_MODE                 :UINT  := 6688;  (* (UINT) FB CMP: mode *)
    ACP10PAR_CMP_VALUE                :UINT  := 6696;  (* (USINT) FB CMP: result value *)
    ACP10PAR_DELAY_IN_PARID           :UINT  := 7168;  (* (UINT) FB DELAY: parameter ID of input *)
    ACP10PAR_DELAY_TIME               :UINT  := 7176;  (* (REAL) FB DELAY: time [s] *)
    ACP10PAR_DELAY_VALUE_I4           :UINT  := 7184;  (* (DINT) FB DELAY: I4 result value *)
    ACP10PAR_DELAY_VALUE_FRAC         :UINT  := 7192;  (* (REAL) FB DELAY: I4 result value fractional part *)
    ACP10PAR_DELAY_VALUE_R4           :UINT  := 7200;  (* (REAL) FB DELAY: R4 result value *)
    ACP10PAR_PID_IN_PARID             :UINT  := 7680;  (* (UINT) FB PID: parameter ID of input *)
    ACP10PAR_PID_KP                   :UINT  := 7688;  (* (REAL) FB PID: proportional amplification factor *)
    ACP10PAR_PID_TI                   :UINT  := 7696;  (* (REAL) FB PID: integral action time [s] *)
    ACP10PAR_PID_I_MAX                :UINT  := 7704;  (* (REAL) FB PID: maximum integral action *)
    ACP10PAR_PID_TD                   :UINT  := 7712;  (* (REAL) FB PID: derivative action time [s] *)
    ACP10PAR_PID_T1                   :UINT  := 7720;  (* (REAL) FB PID: time delay constant [s] *)
    ACP10PAR_PID_VALUE                :UINT  := 7728;  (* (REAL) FB PID: result value *)
    ACP10PAR_PID_ENABLE_PARID         :UINT  := 7736;  (* (UINT) FB PID: parameter ID of enable input *)
    ACP10PAR_PID_P_VALUE              :UINT  := 7744;  (* (REAL) FB PID: result of P part *)
    ACP10PAR_PID_I_VALUE              :UINT  := 7752;  (* (REAL) FB PID: result of I part *)
    ACP10PAR_PID_DT1_VALUE            :UINT  := 7760;  (* (REAL) FB PID: result of DT1 part *)
    ACP10PAR_CURVE_MODE               :UINT  := 8192;  (* (UINT) FB CURVE: Mode *)
    ACP10PAR_CURVE_IN_PARID           :UINT  := 8200;  (* (UINT) FB CURVE: Parameter ID of input *)
    ACP10PAR_CURVE_AUT_DATA_INDEX     :UINT  := 8208;  (* (UINT) FB CURVE: Index of cam profile data *)
    ACP10PAR_CURVE_VALUE_I4           :UINT  := 8216;  (* (DINT) FB CURVE: Result value I4 *)
    ACP10PAR_CURVE_VALUE_FRAC         :UINT  := 8224;  (* (REAL) FB CURVE: Result value I4 fractional part *)
    ACP10PAR_CURVE_VALUE_R4           :UINT  := 8232;  (* (REAL) FB CURVE: Result value R4 *)
    ACP10PAR_CURVE_VALUE_REL_I4       :UINT  := 8240;  (* (DINT) FB CURVE: Result value I4 relative within interval *)
    ACP10PAR_CURVE_VALUE_REL_FRAC     :UINT  := 8248;  (* (REAL) FB CURVE: Result value I4 relative fractional part *)
    ACP10PAR_CURVE_VALUE_REL_R4       :UINT  := 8256;  (* (REAL) FB CURVE: Result value R4 relative within interval *)
    ACP10PAR_CURVE_VALUE_OFFSET       :UINT  := 8264;  (* (DINT) FB CURVE: Result value interval offset *)
    ACP10PAR_CURVE_X_FACTOR           :UINT  := 8272;  (* (DINT) FB CURVE: Multiplication factor for input interval *)
    ACP10PAR_CURVE_Y_FACTOR           :UINT  := 8280;  (* (DINT) FB CURVE: Multiplication factor for output interval *)
    ACP10PAR_CURVE_COMP_CMD           :UINT  := 8288;  (* (UINT) FB CURVE: Compensation gears command *)
    ACP10PAR_CURVE_COMP_MA_S          :UINT  := 8296;  (* (DINT) FB CURVE: Compensation distance of master axis, input interval [Units] *)
    ACP10PAR_CURVE_COMP_SL_S          :UINT  := 8304;  (* (DINT) FB CURVE: Compensation distance of slave axis, output interval [Units] *)
    ACP10PAR_CURVE_COMP_K1            :UINT  := 8312;  (* (REAL) FB CURVE: Entrance gradient in the compensation gears *)
    ACP10PAR_CURVE_COMP_K2            :UINT  := 8320;  (* (REAL) FB CURVE: Exit gradient from the compensation gears *)
    ACP10PAR_CURVE_COMP_MA_V_MAX      :UINT  := 8328;  (* (REAL) FB CURVE: Maximum speed of master axis [Units/s] *)
    ACP10PAR_CURVE_COMP_SL_V_MAX      :UINT  := 8336;  (* (REAL) FB CURVE: Maximum speed of slave axis within compensation gears [Units/s] *)
    ACP10PAR_CURVE_COMP_SL_V_MIN      :UINT  := 8344;  (* (REAL) FB CURVE: Minimum speed of slave axis within compensation gears [Units/s] *)
    ACP10PAR_CURVE_COMP_SL_A1_MAX     :UINT  := 8352;  (* (REAL) FB CURVE: Maximum acceleration of slave axis within compensation phase1 [Units/s²] *)
    ACP10PAR_CURVE_COMP_SL_A2_MAX     :UINT  := 8360;  (* (REAL) FB CURVE: Maximum acceleration of slave axis within compensation phase2 [Units/s²] *)
    ACP10PAR_CURVE_COMP_CMD_STATUS    :UINT  := 8368;  (* (USINT) FB CURVE: Compensation gears command status *)
    ACP10PAR_CURVE_COMP_RESULT        :UINT  := 8376;  (* (REAL) FB CURVE: Compensation gears command result *)
    ACP10PAR_IPL_MODE                 :UINT  := 8704;  (* (UINT) FB IPL: Mode *)
    ACP10PAR_IPL_IN_PARID             :UINT  := 8712;  (* (UINT) FB IPL: Parameter ID of input *)
    ACP10PAR_IPL_CYCLE_TIME           :UINT  := 8720;  (* (UDINT) FB IPL: Cycle time [us] *)
    ACP10PAR_IPL_EXTRAPOLATION_TIME   :UINT  := 8728;  (* (UDINT) FB IPL: Extrapolation time [us] *)
    ACP10PAR_IPL_VALUE_I4             :UINT  := 8736;  (* (DINT) FB IPL: Result value I4 *)
    ACP10PAR_IPL_VALUE_FRAC           :UINT  := 8744;  (* (REAL) FB IPL: Result value I4 fractional part *)
    ACP10PAR_IPL_VALUE_R4             :UINT  := 8752;  (* (REAL) FB IPL: Result value R4 *)
    ACP10PAR_IPL_EV_PARID             :UINT  := 8760;  (* (UINT) FB IPL: Parameter ID of event input *)
    ACP10PAR_VARITH_MODE              :UINT  := 9216;  (* (UINT) FB VARITH: Mode *)
    ACP10PAR_VARITH_DIMENSION         :UINT  := 9224;  (* (UINT) FB VARITH: Dimension *)
    ACP10PAR_VARITH_IN_A1_PARID       :UINT  := 9232;  (* (UINT) FB VARITH: Parameter ID of input, element a1 *)
    ACP10PAR_VARITH_IN_A2_PARID       :UINT  := 9240;  (* (UINT) FB VARITH: Parameter ID of input, element a2 *)
    ACP10PAR_VARITH_IN_A3_PARID       :UINT  := 9248;  (* (UINT) FB VARITH: Parameter ID of input, element a3 *)
    ACP10PAR_VARITH_IN_A4_PARID       :UINT  := 9256;  (* (UINT) FB VARITH: Parameter ID of input, element a4 *)
    ACP10PAR_VARITH_IN_A5_PARID       :UINT  := 9264;  (* (UINT) FB VARITH: Parameter ID of input, element a5 *)
    ACP10PAR_VARITH_IN_B1_PARID       :UINT  := 9272;  (* (UINT) FB VARITH: Parameter ID of input, element b1 *)
    ACP10PAR_VARITH_IN_B2_PARID       :UINT  := 9280;  (* (UINT) FB VARITH: Parameter ID of input, element b2 *)
    ACP10PAR_VARITH_IN_B3_PARID       :UINT  := 9288;  (* (UINT) FB VARITH: Parameter ID of input, element b3 *)
    ACP10PAR_VARITH_IN_B4_PARID       :UINT  := 9296;  (* (UINT) FB VARITH: Parameter ID of input, element b4 *)
    ACP10PAR_VARITH_IN_B5_PARID       :UINT  := 9304;  (* (UINT) FB VARITH: Parameter ID of input, element b5 *)
    ACP10PAR_VARITH_VALUE1            :UINT  := 9312;  (* (REAL) FB VARITH: Result value1 *)
    ACP10PAR_VARITH_VALUE2            :UINT  := 9320;  (* (REAL) FB VARITH: Result value2 *)
    ACP10PAR_VARITH_VALUE3            :UINT  := 9328;  (* (REAL) FB VARITH: Result value3 *)
    ACP10PAR_VARITH_VALUE4            :UINT  := 9336;  (* (REAL) FB VARITH: Result value4 *)
    ACP10PAR_VARITH_VALUE5            :UINT  := 9344;  (* (REAL) FB VARITH: Result value5 *)
    ACP10PAR_LATCH_MODE               :UINT  := 9728;  (* (UINT) FB LATCH: Mode *)
    ACP10PAR_LATCH_IN_PARID           :UINT  := 9736;  (* (UINT) FB LATCH: Parameter ID of input *)
    ACP10PAR_LATCH_EV_PARID           :UINT  := 9744;  (* (UINT) FB LATCH: Parameter ID of trigger event input *)
    ACP10PAR_LATCH_EV_TYPE            :UINT  := 9752;  (* (USINT) FB LATCH: Trigger event type *)
    ACP10PAR_LATCH_EV_WIDTH_MIN       :UINT  := 9760;  (* (DINT) FB LATCH: Minimal signal width of trigger event *)
    ACP10PAR_LATCH_EV_WIDTH_MAX       :UINT  := 9768;  (* (DINT) FB LATCH: Maximum signal width of trigger event *)
    ACP10PAR_LATCH_WINDOW             :UINT  := 9776;  (* (DINT) FB LATCH: Window *)
    ACP10PAR_LATCH_WINDOW_POS         :UINT  := 9784;  (* (DINT) FB LATCH: Window position *)
    ACP10PAR_LATCH_POS_IV             :UINT  := 9792;  (* (DINT) FB LATCH: Interval of window position *)
    ACP10PAR_LATCH_POS_IV_ELONG       :UINT  := 9800;  (* (DINT) FB LATCH: Interval elongation of window position *)
    ACP10PAR_LATCH_T_DELAY            :UINT  := 9808;  (* (DINT) FB LATCH: Delay time [us] *)
    ACP10PAR_LATCH_EV_WIDTH           :UINT  := 9816;  (* (DINT) FB LATCH: Signal width of trigger event *)
    ACP10PAR_LATCH_VALUE              :UINT  := 9824;  (* (DINT) FB LATCH: Result value *)
    ACP10PAR_LATCH_DELTA_IV           :UINT  := 9832;  (* (DINT) FB LATCH: Difference: Window position minus result value *)
    ACP10PAR_LATCH_STATUS             :UINT  := 9840;  (* (USINT) FB LATCH: Status *)
    ACP10PAR_LATCH_ERROR_COUNT        :UINT  := 9848;  (* (USINT) FB LATCH: Error counter *)
    ACP10PAR_LATCH_WINDOW1            :UINT  := 9856;  (* (DINT) FB LATCH: Window1 *)
    ACP10PAR_LATCH_WINDOW2            :UINT  := 9864;  (* (DINT) FB LATCH: Window2 *)
    ACP10PAR_LATCH_STATUS_COUNT       :UINT  := 9872;  (* (USINT) FB LATCH: Status counter *)
    ACP10PAR_EPROM_ID                 :UINT  := 10240; (* (UINT) FB EPROM: ID *)
    ACP10PAR_EPROM_BLOCK_INDEX        :UINT  := 10248; (* (UINT) FB EPROM: Data block index *)
    ACP10PAR_EPROM_BLOCK              :UINT  := 10256; (* (DATA) FB EPROM: Data block *)
    ACP10PAR_EPROM_PRODUCT_CODE       :UINT  := 10264; (* (UDINT) FB EPROM: Product code *)
    ACP10PAR_EPROM_SERIAL_NO          :UINT  := 10272; (* (UDINT) FB EPROM: Serial number *)
    ACP10PAR_EPROM_PRODUCT_TYPE       :UINT  := 10280; (* (UDINT) FB EPROM: Product type *)
    ACP10PAR_EPROM_HW_REVISION        :UINT  := 10288; (* (UINT) FB EPROM: Hardware revision *)
    ACP10PAR_EPROM_HW_VARIANT         :UINT  := 10296; (* (UDINT) FB EPROM: Hardware variant *)
    ACP10PAR_EPROM_STAT               :UINT  := 10304; (* (UDINT) FB EPROM: Status *)
    ACP10PAR_EPROM_MISSION_TIME_END   :UINT  := 10312; (* (UDINT) FB EPROM: End date of mission time *)
    ACP10PAR_CAMCON_MODE              :UINT  := 10752; (* (UINT) FB CAMCON: Mode *)
    ACP10PAR_CAMCON_IN_PARID          :UINT  := 10760; (* (UINT) FB CAMCON: Parameter ID of input *)
    ACP10PAR_CAMCON_S_START           :UINT  := 10768; (* (DINT) FB CAMCON: Start position *)
    ACP10PAR_CAMCON_S_IV              :UINT  := 10776; (* (DINT) FB CAMCON: Interval *)
    ACP10PAR_CAMCON_T_DELAY_ON        :UINT  := 10784; (* (REAL) FB CAMCON: Delay time to switch output ON [s] *)
    ACP10PAR_CAMCON_T_DELAY_OFF       :UINT  := 10792; (* (REAL) FB CAMCON: Delay time to switch output OFF [s] *)
    ACP10PAR_CAMCON_T1_DELAY          :UINT  := 10800; (* (REAL) FB CAMCON: Switch delay: Filter time constant [s] *)
    ACP10PAR_CAMCON_HYSTERESIS        :UINT  := 10808; (* (REAL) FB CAMCON: Hysteresis window *)
    ACP10PAR_CAMCON_MAX_CAM           :UINT  := 10816; (* (UINT) FB CAMCON: Maximum number of cams *)
    ACP10PAR_CAMCON_CAM_INDEX         :UINT  := 10824; (* (UINT) FB CAMCON: Index of parameter record for one cam *)
    ACP10PAR_CAMCON_CAM_S1            :UINT  := 10832; (* (REAL) FB CAMCON: Start position of cam within interval *)
    ACP10PAR_CAMCON_CAM_S2            :UINT  := 10840; (* (REAL) FB CAMCON: End position of cam within interval *)
    ACP10PAR_CAMCON_VALUE             :UINT  := 10848; (* (USINT) FB CAMCON: Output value *)
    ACP10PAR_CAMCON_V_IN              :UINT  := 10856; (* (REAL) FB CAMCON: Input speed *)
    ACP10PAR_CAMCON_EV_PARID          :UINT  := 10864; (* (UINT) FB CAMCON: Parameter ID start event *)
    ACP10PAR_CAMCON_PAR_REC           :UINT  := 10872; (* (USINT) FB CAMCON: Parameter record for one track *)
    ACP10PAR_CAMCON_SELECT_REC        :UINT  := 10880; (* (USINT) FB CAMCON: Select parameter record for one track *)
    ACP10PAR_CAMCON_SELECT_MODE       :UINT  := 10888; (* (USINT) FB CAMCON: Mode to select a parameter record for one track *)
    ACP10PAR_CAMCON_ACT_REC           :UINT  := 10896; (* (USINT) FB CAMCON: Active parameter record for one track *)
    ACP10PAR_MUX_MODE                 :UINT  := 11264; (* (UINT) FB MUX: Mode *)
    ACP10PAR_MUX_SELECTOR_PARID       :UINT  := 11272; (* (UINT) FB MUX: Parameter ID of selector input *)
    ACP10PAR_MUX_SELECTOR_MAX         :UINT  := 11280; (* (UINT) FB MUX: Maximum selector value *)
    ACP10PAR_MUX_VALUE_I4             :UINT  := 11288; (* (DINT) FB MUX: Output value I4 *)
    ACP10PAR_MUX_VALUE_R4             :UINT  := 11296; (* (REAL) FB MUX: Output value R4 *)
    ACP10PAR_MUX_VALUE_OFFSET_I4      :UINT  := 11304; (* (DINT) FB MUX: Output value offset I4 *)
    ACP10PAR_MUX_VALUE_OFFSET_R4      :UINT  := 11312; (* (REAL) FB MUX: Output value offset R4 *)
    ACP10PAR_MUX_IN0_PARID            :UINT  := 11320; (* (UINT) FB MUX: Parameter ID of input0 *)
    ACP10PAR_MUX_IN1_PARID            :UINT  := 11328; (* (UINT) FB MUX: Parameter ID of input1 *)
    ACP10PAR_MUX_IN2_PARID            :UINT  := 11336; (* (UINT) FB MUX: Parameter ID of input2 *)
    ACP10PAR_MUX_IN3_PARID            :UINT  := 11344; (* (UINT) FB MUX: Parameter ID of input3 *)
    ACP10PAR_MUX_IN4_PARID            :UINT  := 11352; (* (UINT) FB MUX: Parameter ID of input4 *)
    ACP10PAR_MUX_IN5_PARID            :UINT  := 11360; (* (UINT) FB MUX: Parameter ID of input5 *)
    ACP10PAR_MUX_IN6_PARID            :UINT  := 11368; (* (UINT) FB MUX: Parameter ID of input6 *)
    ACP10PAR_MUX_IN7_PARID            :UINT  := 11376; (* (UINT) FB MUX: Parameter ID of input7 *)
    ACP10PAR_MUX_IN8_PARID            :UINT  := 11384; (* (UINT) FB MUX: Parameter ID of input8 *)
    ACP10PAR_MUX_IN9_PARID            :UINT  := 11392; (* (UINT) FB MUX: Parameter ID of input9 *)
    ACP10PAR_MUX_IN10_PARID           :UINT  := 11400; (* (UINT) FB MUX: Parameter ID of input10 *)
    ACP10PAR_MUX_IN11_PARID           :UINT  := 11408; (* (UINT) FB MUX: Parameter ID of input11 *)
    ACP10PAR_MUX_IN12_PARID           :UINT  := 11416; (* (UINT) FB MUX: Parameter ID of input12 *)
    ACP10PAR_MUX_IN13_PARID           :UINT  := 11424; (* (UINT) FB MUX: Parameter ID of input13 *)
    ACP10PAR_MUX_IN14_PARID           :UINT  := 11432; (* (UINT) FB MUX: Parameter ID of input14 *)
    ACP10PAR_MUX_IN15_PARID           :UINT  := 11440; (* (UINT) FB MUX: Parameter ID of input15 *)
    ACP10PAR_MUX_OFFSET_K             :UINT  := 11448; (* (REAL) FB MUX: Gradient of offset ramp [1/s] *)
    ACP10PAR_MUX_OFFSET_T             :UINT  := 11456; (* (UDINT) FB MUX: Time of offset ramp [us] *)
    ACP10PAR_FIFO_MODE                :UINT  := 11776; (* (UINT) FB FIFO: Mode *)
    ACP10PAR_FIFO_MAX_LENGTH          :UINT  := 11784; (* (UINT) FB FIFO: Maximum length *)
    ACP10PAR_FIFO_VALUE2_DISTANCE     :UINT  := 11792; (* (UINT) FB FIFO: Distance for output value2 *)
    ACP10PAR_FIFO_IN_PARID            :UINT  := 11800; (* (UINT) FB FIFO: Parameter ID input *)
    ACP10PAR_FIFO_IN_EV_PARID         :UINT  := 11808; (* (UINT) FB FIFO: Parameter ID input event *)
    ACP10PAR_FIFO_OUT_EV_PARID        :UINT  := 11816; (* (UINT) FB FIFO: Parameter ID output event *)
    ACP10PAR_FIFO_ACT_LENGTH          :UINT  := 11824; (* (UINT) FB FIFO: Actual length *)
    ACP10PAR_FIFO_VALUE_I4            :UINT  := 11832; (* (DINT) FB FIFO: Output value I4 *)
    ACP10PAR_FIFO_VALUE_R4            :UINT  := 11840; (* (REAL) FB FIFO: Output value R4 *)
    ACP10PAR_FIFO_VALUE2_I4           :UINT  := 11848; (* (DINT) FB FIFO: Output value2 I4 *)
    ACP10PAR_FIFO_VALUE2_R4           :UINT  := 11856; (* (REAL) FB FIFO: Output value2 R4 *)
    ACP10PAR_MINMAX_MODE              :UINT  := 12288; (* (UINT) FB MINMAX: Mode *)
    ACP10PAR_MINMAX_VALUE_I4          :UINT  := 12296; (* (DINT) FB MINMAX: Output value I4 *)
    ACP10PAR_MINMAX_VALUE_R4          :UINT  := 12304; (* (REAL) FB MINMAX: Output value R4 *)
    ACP10PAR_MINMAX_IN1_PARID         :UINT  := 12312; (* (UINT) FB MINMAX: Parameter ID of input1 *)
    ACP10PAR_MINMAX_IN2_PARID         :UINT  := 12320; (* (UINT) FB MINMAX: Parameter ID of input2 *)
    ACP10PAR_MINMAX_IN3_PARID         :UINT  := 12328; (* (UINT) FB MINMAX: Parameter ID of input3 *)
    ACP10PAR_MINMAX_IN4_PARID         :UINT  := 12336; (* (UINT) FB MINMAX: Parameter ID of input4 *)
    ACP10PAR_BIT_MODE                 :UINT  := 12800; (* (UINT) FB BIT: Mode *)
    ACP10PAR_BIT_A1                   :UINT  := 12808; (* (UDINT) FB BIT: Operand a1 *)
    ACP10PAR_BIT_A2                   :UINT  := 12816; (* (UDINT) FB BIT: Operand a2 *)
    ACP10PAR_BIT_A3                   :UINT  := 12824; (* (UDINT) FB BIT: Operand a3 *)
    ACP10PAR_BIT_A4                   :UINT  := 12832; (* (UDINT) FB BIT: Operand a4 *)
    ACP10PAR_BIT_A5                   :UINT  := 12840; (* (UDINT) FB BIT: Operand a5 *)
    ACP10PAR_BIT_A6                   :UINT  := 12848; (* (UDINT) FB BIT: Operand a6 *)
    ACP10PAR_BIT_A7                   :UINT  := 12856; (* (UDINT) FB BIT: Operand a7 *)
    ACP10PAR_BIT_A8                   :UINT  := 12864; (* (UDINT) FB BIT: Operand a8 *)
    ACP10PAR_BIT_B1                   :UINT  := 12872; (* (UDINT) FB BIT: Operand b1 *)
    ACP10PAR_BIT_B2                   :UINT  := 12880; (* (UDINT) FB BIT: Operand b2 *)
    ACP10PAR_BIT_B3                   :UINT  := 12888; (* (UDINT) FB BIT: Operand b3 *)
    ACP10PAR_BIT_B4                   :UINT  := 12896; (* (UDINT) FB BIT: Operand b4 *)
    ACP10PAR_BIT_B5                   :UINT  := 12904; (* (UDINT) FB BIT: Operand b5 *)
    ACP10PAR_BIT_B6                   :UINT  := 12912; (* (UDINT) FB BIT: Operand b6 *)
    ACP10PAR_BIT_B7                   :UINT  := 12920; (* (UDINT) FB BIT: Operand b7 *)
    ACP10PAR_BIT_B8                   :UINT  := 12928; (* (UDINT) FB BIT: Operand b8 *)
    ACP10PAR_BIT_IN1_PARID            :UINT  := 12936; (* (UINT) FB BIT: Parameter ID of input1 *)
    ACP10PAR_BIT_IN2_PARID            :UINT  := 12944; (* (UINT) FB BIT: Parameter ID of input2 *)
    ACP10PAR_BIT_IN3_PARID            :UINT  := 12952; (* (UINT) FB BIT: Parameter ID of input3 *)
    ACP10PAR_BIT_IN4_PARID            :UINT  := 12960; (* (UINT) FB BIT: Parameter ID of input4 *)
    ACP10PAR_BIT_IN5_PARID            :UINT  := 12968; (* (UINT) FB BIT: Parameter ID of input5 *)
    ACP10PAR_BIT_IN6_PARID            :UINT  := 12976; (* (UINT) FB BIT: Parameter ID of input6 *)
    ACP10PAR_BIT_IN7_PARID            :UINT  := 12984; (* (UINT) FB BIT: Parameter ID of input7 *)
    ACP10PAR_BIT_IN8_PARID            :UINT  := 12992; (* (UINT) FB BIT: Parameter ID of input8 *)
    ACP10PAR_BIT_VALUE1_UI1           :UINT  := 13000; (* (USINT) FB BIT: Result value1 UI1 *)
    ACP10PAR_BIT_VALUE1_UI2           :UINT  := 13008; (* (UINT) FB BIT: Result value1 UI2 *)
    ACP10PAR_BIT_VALUE1               :UINT  := 13016; (* (UDINT) FB BIT: Result value1 *)
    ACP10PAR_BIT_VALUE2               :UINT  := 13024; (* (UDINT) FB BIT: Result value2 *)
    ACP10PAR_BIT_VALUE3               :UINT  := 13032; (* (UDINT) FB BIT: Result value3 *)
    ACP10PAR_BIT_VALUE4               :UINT  := 13040; (* (UDINT) FB BIT: Result value4 *)
    ACP10PAR_BIT_VALUE5               :UINT  := 13048; (* (UDINT) FB BIT: Result value5 *)
    ACP10PAR_BIT_VALUE6               :UINT  := 13056; (* (UDINT) FB BIT: Result value6 *)
    ACP10PAR_BIT_VALUE7               :UINT  := 13064; (* (UDINT) FB BIT: Result value7 *)
    ACP10PAR_BIT_VALUE8               :UINT  := 13072; (* (UDINT) FB BIT: Result value8 *)
    ACP10PAR_CTRL_CMD_FUB             :UINT  := 13312; (* (UINT) FB CTRL: Command *)
    ACP10PAR_CTRL_MODE                :UINT  := 13320; (* (UDINT) FB CTRL: Mode *)
    ACP10PAR_CTRL_STATUS              :UINT  := 13328; (* (UDINT) FB CTRL: State *)
    ACP10PAR_CTRL_IN1_PARID           :UINT  := 13336; (* (UINT) FB CTRL: Parameter ID input1 *)
    ACP10PAR_CTRL_IN2_PARID           :UINT  := 13344; (* (UINT) FB CTRL: Parameter ID input2 *)
    ACP10PAR_CTRL_IN3_PARID           :UINT  := 13352; (* (UINT) FB CTRL: Parameter ID input3 *)
    ACP10PAR_CTRL_IN1_UI1             :UINT  := 13360; (* (USINT) FB CTRL: Parameter input1 UI1 *)
    ACP10PAR_CTRL_IN2_UI1             :UINT  := 13368; (* (USINT) FB CTRL: Parameter input2 UI1 *)
    ACP10PAR_CTRL_IN1_R4              :UINT  := 13376; (* (REAL) FB CTRL: Parameter input1 R4 *)
    ACP10PAR_CTRL_IN2_R4              :UINT  := 13384; (* (REAL) FB CTRL: Parameter input2 R4 *)
    ACP10PAR_CTRL_IN3_R4              :UINT  := 13392; (* (REAL) FB CTRL: Parameter input3 R4 *)
    ACP10PAR_CTRL_IN4_R4              :UINT  := 13400; (* (REAL) FB CTRL: Parameter input4 R4 *)
    ACP10PAR_CTRL_IN5_R4              :UINT  := 13408; (* (REAL) FB CTRL: Parameter input5 R4 *)
    ACP10PAR_CTRL_IN6_R4              :UINT  := 13416; (* (REAL) FB CTRL: Parameter input6 R4 *)
    ACP10PAR_CTRL_IN7_R4              :UINT  := 13424; (* (REAL) FB CTRL: Parameter input7 R4 *)
    ACP10PAR_CTRL_IN8_R4              :UINT  := 13432; (* (REAL) FB CTRL: Parameter input8 R4 *)
    ACP10PAR_CTRL_IN9_R4              :UINT  := 13440; (* (REAL) FB CTRL: Parameter input9 R4 *)
    ACP10PAR_CTRL_IN10_R4             :UINT  := 13448; (* (REAL) FB CTRL: Parameter input10 R4 *)
    ACP10PAR_CTRL_IN11_R4             :UINT  := 13456; (* (REAL) FB CTRL: Parameter input11 R4 *)
    ACP10PAR_CTRL_IN12_R4             :UINT  := 13464; (* (REAL) FB CTRL: Parameter input12 R4 *)
    ACP10PAR_CTRL_IN13_R4             :UINT  := 13472; (* (REAL) FB CTRL: Parameter input13 R4 *)
    ACP10PAR_CTRL_OUT1_UI2            :UINT  := 13480; (* (UINT) FB CTRL: Parameter output1 UI2 *)
    ACP10PAR_CTRL_OUT1_R4             :UINT  := 13488; (* (REAL) FB CTRL: Parameter output1 R4 *)
    ACP10PAR_CTRL_OUT2_R4             :UINT  := 13496; (* (REAL) FB CTRL: Parameter output2 R4 *)
    ACP10PAR_CTRL_OUT3_R4             :UINT  := 13504; (* (REAL) FB CTRL: Parameter output3 R4 *)
    ACP10PAR_CTRL_OUT4_R4             :UINT  := 13512; (* (REAL) FB CTRL: Parameter output4 R4 *)
    ACP10PAR_CTRL_OUT5_R4             :UINT  := 13520; (* (REAL) FB CTRL: Parameter output5 R4 *)
    ACP10PAR_CTRL_IN4_PARID           :UINT  := 13528; (* (UINT) FB CTRL: Parameter ID input4 *)
    ACP10PAR_CTRL_IN5_PARID           :UINT  := 13536; (* (UINT) FB CTRL: Parameter ID input5 *)
    ACP10PAR_CTRL_IN6_PARID           :UINT  := 13544; (* (UINT) FB CTRL: Parameter ID input6 *)
    ACP10PAR_CTRL_IN7_PARID           :UINT  := 13552; (* (UINT) FB CTRL: Parameter ID input7 *)
    ACP10PAR_CTRL_IN8_PARID           :UINT  := 13560; (* (UINT) FB CTRL: Parameter ID input8 *)
    ACP10PAR_CTRL_IN9_PARID           :UINT  := 13568; (* (UINT) FB CTRL: Parameter ID input9 *)
    ACP10PAR_CTRL_IN10_PARID          :UINT  := 13576; (* (UINT) FB CTRL: Parameter ID input10 *)
    ACP10PAR_CTRL_IN11_PARID          :UINT  := 13584; (* (UINT) FB CTRL: Parameter ID input11 *)
    ACP10PAR_CTRL_IN12_PARID          :UINT  := 13592; (* (UINT) FB CTRL: Parameter ID input12 *)
    ACP10PAR_CTRL_IN13_PARID          :UINT  := 13600; (* (UINT) FB CTRL: Parameter ID input13 *)
    ACP10PAR_CTRL_IN14_PARID          :UINT  := 13608; (* (UINT) FB CTRL: Parameter ID input14 *)
    ACP10PAR_CTRL_IN15_PARID          :UINT  := 13616; (* (UINT) FB CTRL: Parameter ID input15 *)
    ACP10PAR_CTRL_IN16_PARID          :UINT  := 13624; (* (UINT) FB CTRL: Parameter ID input16 *)
    ACP10PAR_CTRL_IN1_UI4             :UINT  := 13632; (* (UDINT) FB CTRL: Parameter input1 UI4 *)
    ACP10PAR_CTRL_IN2_UI4             :UINT  := 13640; (* (UDINT) FB CTRL: Parameter input2 UI4 *)
    ACP10PAR_CTRL_OUT6_R4             :UINT  := 13648; (* (REAL) FB CTRL: Parameter output6 R4 *)
    ACP10PAR_CTRL_OUT7_R4             :UINT  := 13656; (* (REAL) FB CTRL: Parameter output7 R4 *)
    ACP10PAR_CTRL_OUT8_R4             :UINT  := 13664; (* (REAL) FB CTRL: Parameter output8 R4 *)
    ACP10PAR_CTRL_OUT9_R4             :UINT  := 13672; (* (REAL) FB CTRL: Parameter output9 R4 *)
    ACP10PAR_CTRL_OUT10_R4            :UINT  := 13680; (* (REAL) FB CTRL: Parameter output10 R4 *)
    ACP10PAR_CTRL_IN14_R4             :UINT  := 13688; (* (REAL) FB CTRL: Parameter input14 R4 *)
    ACP10PAR_CTRL_IN15_R4             :UINT  := 13696; (* (REAL) FB CTRL: Parameter input15 R4 *)
    ACP10PAR_CTRL_IN16_R4             :UINT  := 13704; (* (REAL) FB CTRL: Parameter input16 R4 *)
    ACP10PAR_CTRL_IN17_R4             :UINT  := 13712; (* (REAL) FB CTRL: Parameter input17 R4 *)
    ACP10PAR_CTRL_IN3_UI4             :UINT  := 13720; (* (UINT) FB CTRL: Parameter input3 UI4 *)
    ACP10PAR_CTRL_IN18_R4             :UINT  := 13728; (* (REAL) FB CTRL: Parameter input18 R4 *)
    ACP10PAR_CTRL_IN19_R4             :UINT  := 13736; (* (REAL) FB CTRL: Parameter input19 R4 *)
    ACP10PAR_CTRL_IN20_R4             :UINT  := 13744; (* (REAL) FB CTRL: Parameter input20 R4 *)
    ACP10PAR_CTRL_IN21_R4             :UINT  := 13752; (* (REAL) FB CTRL: Parameter input21 R4 *)
    ACP10PAR_CTRL_IN22_R4             :UINT  := 13760; (* (REAL) FB CTRL: Parameter input22 R4 *)
    ACP10PAR_CTRL_IN23_R4             :UINT  := 13768; (* (REAL) FB CTRL: Parameter input23 R4 *)
    ACP10PAR_CTRL_IN24_R4             :UINT  := 13776; (* (REAL) FB CTRL: Parameter input24 R4 *)
    ACP10PAR_CTRL_IN1_UI2             :UINT  := 13784; (* (UINT) FB CTRL: Parameter input1 UI2 *)
    ACP10PAR_COUNT_MODE               :UINT  := 13824; (* (UINT) FB COUNT: Mode *)
    ACP10PAR_COUNT_EV1_PARID          :UINT  := 13832; (* (UINT) FB COUNT: Parameter ID of event input1 *)
    ACP10PAR_COUNT_EV2_PARID          :UINT  := 13840; (* (UINT) FB COUNT: Parameter ID of event input2 *)
    ACP10PAR_COUNT_SET_TRIG_PARID     :UINT  := 13848; (* (UINT) FB COUNT: Parameter ID trigger input to set counter value *)
    ACP10PAR_COUNT_SET_VALUE          :UINT  := 13856; (* (UDINT) FB COUNT: Value to set counter *)
    ACP10PAR_COUNT_MAX_VALUE          :UINT  := 13864; (* (UDINT) FB COUNT: Maximum counter value *)
    ACP10PAR_COUNT_CMP_VALUE          :UINT  := 13872; (* (UDINT) FB COUNT: Comparator compare value *)
    ACP10PAR_COUNT_VALUE              :UINT  := 13880; (* (UDINT) FB COUNT: Result value *)
    ACP10PAR_COUNT_CMP_STATUS         :UINT  := 13888; (* (USINT) FB COUNT: Comparator status *)
    ACP10PAR_COUNT_EV_STATUS          :UINT  := 13896; (* (USINT) FB COUNT: Event status  *)
    ACP10PAR_COUNT_ENABLE_PARID       :UINT  := 13904; (* (UINT) FB COUNT: Parameter ID of enable input *)
    ACP10PAR_DYNSYS_MODE              :UINT  := 14336; (* (UINT) FB DYNSYS: Mode *)
    ACP10PAR_DYNSYS_PAR_A             :UINT  := 14344; (* (REAL) FB DYNSYS: System parameter A *)
    ACP10PAR_DYNSYS_PAR_B             :UINT  := 14352; (* (REAL) FB DYNSYS: System parameter B *)
    ACP10PAR_DYNSYS_PAR_C             :UINT  := 14360; (* (REAL) FB DYNSYS: System parameter C *)
    ACP10PAR_DYNSYS_PAR_D             :UINT  := 14368; (* (REAL) FB DYNSYS: System parameter D *)
    ACP10PAR_DYNSYS_TUNE1             :UINT  := 14376; (* (REAL) FB DYNSYS: Tuning parameter 1 for observer design *)
    ACP10PAR_DYNSYS_TUNE2             :UINT  := 14384; (* (REAL) FB DYNSYS: Tuning parameter 2 for observer design *)
    ACP10PAR_DYNSYS_TUNE3             :UINT  := 14392; (* (REAL) FB DYNSYS: Tuning parameter 1 for output design *)
    ACP10PAR_DYNSYS_TUNE4             :UINT  := 14400; (* (REAL) FB DYNSYS: Tuning parameter 2 for output design *)
    ACP10PAR_DYNSYS_IN1_PARID         :UINT  := 14408; (* (UINT) FB DYNSYS: Parameter ID for input 1 *)
    ACP10PAR_DYNSYS_IN2_PARID         :UINT  := 14416; (* (UINT) FB DYNSYS: Parameter ID for input 2 *)
    ACP10PAR_DYNSYS_OUT1_VALUE        :UINT  := 14424; (* (REAL) FB DYNSYS: Output 1 *)
    ACP10PAR_DYNSYS_OUT2_VALUE        :UINT  := 14432; (* (REAL) FB DYNSYS: Output 2 *)
    ACP10PAR_DYNSYS_OUT1_SCALE_PARID  :UINT  := 14440; (* (UINT) FB DYNSYS: Multiplier for output 1 *)
    ACP10PAR_DYNSYS_OUT2_SCALE_PARID  :UINT  := 14448; (* (UINT) FB DYNSYS: Multiplier for output 2 *)
    ACP10PAR_DYNSYS_STATE1            :UINT  := 14456; (* (REAL) FB DYNSYS: System state 1 *)
    ACP10PAR_DYNSYS_STATE2            :UINT  := 14464; (* (REAL) FB DYNSYS: System state 2 *)
    ACP10PAR_DYNSYS_STATE3            :UINT  := 14472; (* (REAL) FB DYNSYS: System state 3 *)
    ACP10PAR_DYNSYS_STATE4            :UINT  := 14480; (* (REAL) FB DYNSYS: System state 4 *)
    ACP10PAR_DYNSYS_STATE5            :UINT  := 14488; (* (REAL) FB DYNSYS: System state 5 *)
    ACP10PAR_DYNSYS_STATUS            :UINT  := 14496; (* (UINT) FB DYNSYS: Status *)
    ACP10PAR_SERVO_V_MAX_OUTPUT       :UINT  := 64201; (* (REAL) Servo drive adjustment: Velocity at maximum output value [Units/s] *)
    ACP10PAR_ENCOD_POS_RANGE          :UINT  := 64225; (* (UDINT) Encoder1: Range of encoder position [Incr] *)
    ACP10PAR_SM_SCALE_STEP            :UINT  := 64232; (* (UDINT) Stepper motor: Step scaling: Steps per motor revolution *)
    ACP10PAR_SM_SCALE_LOAD_UNITS      :UINT  := 64233; (* (UDINT) Stepper motor: Load scaling: Units per SM_SCALE_LOAD_MOTREV motor revolutions [Units] *)
    ACP10PAR_SM_SCALE_LOAD_MOTREV     :UINT  := 64234; (* (UDINT) Stepper motor: Load scaling: Motor revolutions *)
    ACP10PAR_ENCOD2_POS_RANGE         :UINT  := 64237; (* (UDINT) Encoder2: Range of encoder position [Incr] *)
    ACP10PAR_ERROR_RESPONSE           :UINT  := 65535; (* (ERROR_NUMBER, ERROR_INFO) Messages: Error response *)
END_VAR
